# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .statement_feedback import StatementFeedback
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class StatementFeedbackDictionary(UniversalBaseModel):
    """
    A dictionary of statements with their ids by type.
    """

    cost_functions: typing.Optional[typing.List[StatementFeedback]] = pydantic.Field(default=None)
    """
    The validation feedback for cost functions.
    """

    structure_constraints: typing.Optional[typing.List[StatementFeedback]] = pydantic.Field(default=None)
    """
    The validation feedback for structure constraints.
    """

    parameter_constraints: typing.Optional[typing.List[StatementFeedback]] = pydantic.Field(default=None)
    """
    The validation feedback for parameter constraints.
    """

    query_summarizers: typing.Optional[typing.List[StatementFeedback]] = pydantic.Field(default=None)
    """
    The validation feedback for query summarizers.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
