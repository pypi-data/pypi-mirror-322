########################################################
# Started Logging At: 2016-10-26 16:10:04
########################################################
########################################################
# # Started Logging At: 2016-10-26 16:10:05
########################################################
import imf
dir(imf)
#[Out]# ['__builtins__',
#[Out]#  '__cached__',
#[Out]#  '__doc__',
#[Out]#  '__file__',
#[Out]#  '__loader__',
#[Out]#  '__name__',
#[Out]#  '__package__',
#[Out]#  '__path__',
#[Out]#  '__spec__']
from imf import imf
dir(imf)
#[Out]# ['BrokenPowerLaw',
#[Out]#  'Kroupa',
#[Out]#  'MassFunction',
#[Out]#  'Salpeter',
#[Out]#  '__builtins__',
#[Out]#  '__cached__',
#[Out]#  '__doc__',
#[Out]#  '__file__',
#[Out]#  '__loader__',
#[Out]#  '__name__',
#[Out]#  '__package__',
#[Out]#  '__spec__',
#[Out]#  'chabrier',
#[Out]#  'color_from_mass',
#[Out]#  'color_of_cluster',
#[Out]#  'coolplot',
#[Out]#  'cumint',
#[Out]#  'get_massfunc',
#[Out]#  'get_massfunc_name',
#[Out]#  'integrate',
#[Out]#  'inverse_imf',
#[Out]#  'iteritems',
#[Out]#  'kroupa',
#[Out]#  'lognormal',
#[Out]#  'lum_of_cluster',
#[Out]#  'lum_of_star',
#[Out]#  'lyc_of_cluster',
#[Out]#  'lyc_of_star',
#[Out]#  'm_cumint',
#[Out]#  'm_integrate',
#[Out]#  'make_cluster',
#[Out]#  'massfunctions',
#[Out]#  'modified_schechter',
#[Out]#  'mostcommonmass',
#[Out]#  'np',
#[Out]#  'print_function',
#[Out]#  'reverse_mf_dict',
#[Out]#  'salpeter',
#[Out]#  'schechter',
#[Out]#  'schechter_cdf',
#[Out]#  'scipy',
#[Out]#  'sh_cdf_func',
#[Out]#  'types',
#[Out]#  'vgsM',
#[Out]#  'vgsMe',
#[Out]#  'vgslogL',
#[Out]#  'vgslogLe',
#[Out]#  'vgslogQ',
#[Out]#  'vgslogQe',
#[Out]#  'vgslogq',
#[Out]#  'vgsmass']
get_ipython().magic('pinfo imf.make_cluster')
imf.make_cluster('salpeter')
imf.make_cluster(1000, 'salpeter')
#[Out]# array([ 0.04145093,  0.0858705 ,  0.03001604, ...,  0.03855298,
#[Out]#         0.04214421,  0.03123272])
imf.make_cluster(1000, 'kroupa')
#[Out]# array([ 1.62774784,  0.11899544,  0.59346083, ...,  1.19792511,
#[Out]#         1.11203591,  0.03189623])
imf.kroupa
#[Out]# <imf.imf.Kroupa at 0x107aeccf8>
get_ipython().magic('pinfo imf.kroupa')
get_ipython().magic('pinfo2 imf.kroupa')
# make 100 clusters of 10^4 msun each (very good sampling of total mass range)
clusters = [imf.make_cluster(10000, 'kroupa', p2=2.3) for x in range(100)]
get_ipython().magic('pinfo imf.make_cluster')
# make 100 clusters of 10^4 msun each (very good sampling of total mass range)
clusters = [imf.make_cluster(10000, 'kroupa', p2=2.3, silent=True) for x in range(100)]
# cluster luminosities
luminosities = [imf.lum_of_cluster(cl) for cl in clusters]
pl.plot(clusters, luminosities, '.')
get_ipython().magic('matpotlib inline')
get_ipython().magic('matplotlib inline')
pl.plot(clusters, luminosities, '.')
get_ipython().run_cell_magic('matplotlib', 'inline', '')
########################################################
# Started Logging At: 2016-10-26 16:14:17
########################################################
########################################################
# # Started Logging At: 2016-10-26 16:14:18
########################################################
get_ipython().magic('matplotlib inline')
from imf import imf
get_ipython().magic('pinfo imf.make_cluster')
# make 100 clusters of 10^4 msun each (very good sampling of total mass range)
clusters = [imf.make_cluster(10000, 'kroupa', p2=2.3, silent=True) for x in range(100)]
# cluster luminosities
luminosities = [imf.lum_of_cluster(cl) for cl in clusters]
pl.plot(clusters, luminosities, '.')
get_ipython().magic('matplotlib inline')
import pylab as pl
pl.plot(masses, luminosities, '.')
# cluster luminosities
luminosities = [imf.lum_of_cluster(cl) for cl in clusters]
masses = [cl.sum() for cl in clusters]
pl.plot(masses, luminosities, '.')
#[Out]# [<matplotlib.lines.Line2D at 0x1085c15f8>]
get_ipython().magic('matplotlib inline')
import pylab as pl
import numpy as np
from imf import imf
clusters, luminosities, masses, mean_luminosities, mean_masses = [{}]*5
for p in (2.0, 2.1, 2.2, 2.3, 2.4, 2.5):
    # make 100 clusters of 10^4 msun each (very good sampling of total mass range)
    clusters[p] = [imf.make_cluster(10000, 'kroupa', p2=p, silent=True) for x in range(100)]
    # cluster luminosities
    luminosities[p] = [imf.lum_of_cluster(cl) for cl in clusters[p]]
    masses[p] = [cl.sum() for cl in clusters[p]]
    mean_luminosities[p] = np.mean(luminosities[p])
    mean_masses[p] = np.mean(masses[p])
pl.plot(clusters.keys(), np.array(mean_luminosities.values())/np.array(mean_masses.values()))
pl.plot(clusters.keys(), np.array(list(mean_luminosities.values()))/np.array(listmean_masses.values())))
pl.plot(clusters.keys(), np.array(list(mean_luminosities.values()))/np.array(list(mean_masses.values())))
np.array(list(mean_luminosities.values()))
#[Out]# array([ 7.26824025,  7.31866049,  7.36263514,  7.22630526,  7.3671025 ,
#[Out]#         7.34554916])
clusters.keys()
#[Out]# dict_keys([2.4, 2.2, 2.1, 2.5, 2.0, 2.3])
mass_to_light = [mean_masses[k]/mean_luminosities[k] for k in sorted(clusters.keys())]
pl.plot(sorted(clusters.keys()), mass_to_light)
#[Out]# [<matplotlib.lines.Line2D at 0x1091f57b8>]
get_ipython().magic('pinfo2 imf.make_cluster')
get_ipython().magic('pinfo2 imf.inverse_imf')
get_ipython().magic('pinfo2 imf.get_massfunc')
imf.kroupa
#[Out]# <imf.imf.Kroupa at 0x1086f0e48>
get_ipython().magic('pinfo imf.kroupa')
clusters, luminosities, masses, mean_luminosities, mean_masses = [{}]*5
for p in (2.0, 2.1, 2.2, 2.3, 2.4, 2.5):
    # make 100 clusters of 10^4 msun each (very good sampling of total mass range)
    clusters[p] = [imf.make_cluster(10000, 'kroupa', p3=p, silent=True, mmax=150) for x in range(100)]
    # cluster luminosities
    luminosities[p] = [imf.lum_of_cluster(cl) for cl in clusters[p]]
    masses[p] = [cl.sum() for cl in clusters[p]]
    mean_luminosities[p] = np.mean(luminosities[p])
    mean_masses[p] = np.mean(masses[p])
mass_to_light = [mean_masses[k]/mean_luminosities[k] for k in sorted(clusters.keys())]
pl.plot(sorted(clusters.keys()), mass_to_light)
#[Out]# [<matplotlib.lines.Line2D at 0x109285a90>]
imf.kroupa(np.arange(0.1, 100), p3=2.0)
#[Out]# array([  3.46851657e+00,   8.84376932e-02,   2.42652174e-02,
#[Out]#          1.11352350e-02,   6.36583038e-03,   4.11417181e-03,
#[Out]#          2.87582931e-03,   2.12278533e-03,   1.63099541e-03,
#[Out]#          1.29223051e-03,   1.04901097e-03,   8.68513990e-04,
#[Out]#          7.30890026e-04,   6.23562780e-04,   5.38250635e-04,
#[Out]#          4.69319805e-04,   4.12829786e-04,   3.65957418e-04,
#[Out]#          3.26637187e-04,   2.93329702e-04,   2.64868713e-04,
#[Out]#          2.40357604e-04,   2.19097907e-04,   2.00538987e-04,
#[Out]#          1.84242022e-04,   1.69853826e-04,   1.57087548e-04,
#[Out]#          1.45708268e-04,   1.35522104e-04,   1.26367909e-04,
#[Out]#          1.18110847e-04,   1.10637409e-04,   1.03851485e-04,
#[Out]#          9.76712596e-05,   9.20267359e-05,   8.68577436e-05,
#[Out]#          8.21123294e-05,   7.77454456e-05,   7.37178779e-05,
#[Out]#          6.99953616e-05,   6.65478503e-05,   6.33489079e-05,
#[Out]#          6.03752003e-05,   5.76060684e-05,   5.50231687e-05,
#[Out]#          5.26101685e-05,   5.03524869e-05,   4.82370746e-05,
#[Out]#          4.62522243e-05,   4.43874087e-05,   4.26331404e-05,
#[Out]#          4.09808513e-05,   3.94227875e-05,   3.79519184e-05,
#[Out]#          3.65618570e-05,   3.52467906e-05,   3.40014199e-05,
#[Out]#          3.28209056e-05,   3.17008211e-05,   3.06371113e-05,
#[Out]#          2.96260555e-05,   2.86642350e-05,   2.77485041e-05,
#[Out]#          2.68759644e-05,   2.60439419e-05,   2.52499661e-05,
#[Out]#          2.44917522e-05,   2.37671844e-05,   2.30743009e-05,
#[Out]#          2.24112810e-05,   2.17764328e-05,   2.11681827e-05,
#[Out]#          2.05850652e-05,   2.00257146e-05,   1.94888566e-05,
#[Out]#          1.89733012e-05,   1.84779362e-05,   1.80017207e-05,
#[Out]#          1.75436805e-05,   1.71029021e-05,   1.66785290e-05,
#[Out]#          1.62697570e-05,   1.58758308e-05,   1.54960400e-05,
#[Out]#          1.51297163e-05,   1.47762305e-05,   1.44349895e-05,
#[Out]#          1.41054344e-05,   1.37870376e-05,   1.34793009e-05,
#[Out]#          1.31817537e-05,   1.28939512e-05,   1.26154723e-05,
#[Out]#          1.23459187e-05,   1.20849130e-05,   1.18320976e-05,
#[Out]#          1.15871332e-05,   1.13496983e-05,   1.11194873e-05,
#[Out]#          1.08962101e-05])
pl.plot(imf.kroupa(np.arange(0.1, 100), p3=2.0))
pl.plot(imf.kroupa(np.arange(0.1, 100), p3=2.5))
#[Out]# [<matplotlib.lines.Line2D at 0x109291048>]
pl.loglog(imf.kroupa(np.arange(0.1, 100), p3=2.0))
pl.loglog(imf.kroupa(np.arange(0.1, 100), p3=2.5))
#[Out]# [<matplotlib.lines.Line2D at 0x10eb2eac8>]
mass_to_light
#[Out]# [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
masses
#[Out]# {2.0: 7.9447944406664961,
#[Out]#  2.1: 7.8320313069535725,
#[Out]#  2.2: 7.7185235581624134,
#[Out]#  2.3: 7.5468956578159361,
#[Out]#  2.4: 7.4112234795411291,
#[Out]#  2.5: 7.2141377964344642}
clusters, luminosities, masses, mean_luminosities, mean_masses = {},{},{},{},{}
for p in (2.0, 2.1, 2.2, 2.3, 2.4, 2.5):
    # make 100 clusters of 10^4 msun each (very good sampling of total mass range)
    clusters[p] = [imf.make_cluster(10000, 'kroupa', p3=p, silent=True, mmax=150) for x in range(100)]
    # cluster luminosities
    luminosities[p] = [imf.lum_of_cluster(cl) for cl in clusters[p]]
    masses[p] = [cl.sum() for cl in clusters[p]]
    mean_luminosities[p] = np.mean(luminosities[p])
    mean_masses[p] = np.mean(masses[p])
mass_to_light = [mean_masses[k]/mean_luminosities[k] for k in sorted(clusters.keys())]
pl.plot(sorted(clusters.keys()), mass_to_light)
#[Out]# [<matplotlib.lines.Line2D at 0x128f193c8>]
mass_to_light = [mean_masses[k]/10**mean_luminosities[k] for k in sorted(clusters.keys())]
pl.plot(sorted(clusters.keys()), mass_to_light)
#[Out]# [<matplotlib.lines.Line2D at 0x1335a5be0>]
masses
#[Out]# {2.0: [9999.3042666107176,
#[Out]#   9984.8760034301995,
#[Out]#   9983.4255286791413,
#[Out]#   9963.0895187870683,
#[Out]#   9999.8726525422844,
#[Out]#   9999.8339406286104,
#[Out]#   9998.0947804416446,
#[Out]#   9999.4975557525013,
#[Out]#   9999.0551978364183,
#[Out]#   9999.8952319005839,
#[Out]#   9992.0238922367971,
#[Out]#   9982.199433972175,
#[Out]#   9963.3716761277046,
#[Out]#   9999.5600832743803,
#[Out]#   9980.3845257891171,
#[Out]#   9999.9724836254154,
#[Out]#   9892.7366715746575,
#[Out]#   9977.8281884639309,
#[Out]#   9999.3162887924991,
#[Out]#   9998.5541886448336,
#[Out]#   9930.7027339603701,
#[Out]#   9999.8107483256608,
#[Out]#   9999.9939356677878,
#[Out]#   9993.0346129604295,
#[Out]#   9992.9511466209151,
#[Out]#   9994.5122206054093,
#[Out]#   9999.9716096753327,
#[Out]#   9999.0514458048019,
#[Out]#   9957.8822419826829,
#[Out]#   9993.6680620469251,
#[Out]#   9999.7915477735114,
#[Out]#   9999.4571699177322,
#[Out]#   9992.375517670931,
#[Out]#   9997.2968755935544,
#[Out]#   9999.258289245814,
#[Out]#   9999.5806568998651,
#[Out]#   9992.140277510578,
#[Out]#   9999.9075207670394,
#[Out]#   9998.8641899597624,
#[Out]#   9998.4217497643021,
#[Out]#   9998.9630480129981,
#[Out]#   9955.7432921524141,
#[Out]#   9995.2002192452856,
#[Out]#   9988.7984360183582,
#[Out]#   9999.9207400162286,
#[Out]#   9996.2964030349394,
#[Out]#   9968.5315722362066,
#[Out]#   9999.9325988878809,
#[Out]#   9999.6028347762895,
#[Out]#   9996.7845434233786,
#[Out]#   9983.5311987063542,
#[Out]#   9999.9860078012862,
#[Out]#   9960.3318632660739,
#[Out]#   9999.0367692200252,
#[Out]#   9998.4322197847287,
#[Out]#   9999.9485822458282,
#[Out]#   9999.7059139702596,
#[Out]#   9999.9135362250581,
#[Out]#   9999.3415348358085,
#[Out]#   9999.8605233033304,
#[Out]#   9965.9381852298975,
#[Out]#   9994.6600792984627,
#[Out]#   9999.9226787960542,
#[Out]#   9999.9239725550688,
#[Out]#   9994.7562461507223,
#[Out]#   9998.7589212509956,
#[Out]#   9994.5833594901633,
#[Out]#   9995.5023697016695,
#[Out]#   9990.103599707285,
#[Out]#   9999.7716399092187,
#[Out]#   9999.836505699699,
#[Out]#   9999.0687255088415,
#[Out]#   9996.6972900642722,
#[Out]#   9999.7217565833707,
#[Out]#   9995.4973901558915,
#[Out]#   9992.7458880231061,
#[Out]#   9999.6549805284631,
#[Out]#   9993.0118743578423,
#[Out]#   9999.7875554446291,
#[Out]#   9999.2653455159816,
#[Out]#   9998.8614876949541,
#[Out]#   9994.6993422743781,
#[Out]#   9999.8983198300775,
#[Out]#   9969.5894329401635,
#[Out]#   9999.7283554815767,
#[Out]#   9999.7483448809617,
#[Out]#   9985.9106405661969,
#[Out]#   9996.5584119368959,
#[Out]#   9990.6480858932719,
#[Out]#   9999.8544128328867,
#[Out]#   9977.0928127694187,
#[Out]#   9999.4703897000363,
#[Out]#   9994.6785627563313,
#[Out]#   9998.9583201810692,
#[Out]#   9998.1780788870255,
#[Out]#   9995.0811201780562,
#[Out]#   9999.4074657737638,
#[Out]#   9906.0550078826454,
#[Out]#   9999.5553280664699,
#[Out]#   9916.0672884148244],
#[Out]#  2.1: [9995.3268219111796,
#[Out]#   9999.6555894310914,
#[Out]#   9999.2472983548796,
#[Out]#   9926.97090222111,
#[Out]#   9999.7779345083145,
#[Out]#   9952.7718144290866,
#[Out]#   9999.7220276123571,
#[Out]#   9987.7391114511702,
#[Out]#   9999.3695583243571,
#[Out]#   9988.697965101208,
#[Out]#   9999.6088896382844,
#[Out]#   9992.2586495641281,
#[Out]#   9999.8595376334124,
#[Out]#   9903.4312211143861,
#[Out]#   9999.4252404785566,
#[Out]#   9999.9540442955458,
#[Out]#   9991.3778334468152,
#[Out]#   9999.942094152857,
#[Out]#   9997.7318395647017,
#[Out]#   9999.1529137170437,
#[Out]#   9999.7284442116215,
#[Out]#   9999.9471262099614,
#[Out]#   9999.9551381556121,
#[Out]#   9986.9372875268054,
#[Out]#   9999.6297528671275,
#[Out]#   9999.9100704154916,
#[Out]#   9999.8618061939687,
#[Out]#   9999.9584568011978,
#[Out]#   9999.9672302468698,
#[Out]#   9998.8315210835226,
#[Out]#   9999.9926376644471,
#[Out]#   9997.6944612177285,
#[Out]#   9998.664280686542,
#[Out]#   9999.5028421017414,
#[Out]#   9999.5817892400264,
#[Out]#   9998.8933228610913,
#[Out]#   9999.6966149873078,
#[Out]#   9998.1573145383736,
#[Out]#   9991.897880335584,
#[Out]#   9961.4346649891031,
#[Out]#   9999.3945301823678,
#[Out]#   9964.0332562560325,
#[Out]#   9997.9946464528402,
#[Out]#   9985.8509238251791,
#[Out]#   9998.1622736699883,
#[Out]#   9994.1571518437413,
#[Out]#   9999.0722189752269,
#[Out]#   9999.5962392626625,
#[Out]#   9998.6873921957158,
#[Out]#   9995.2344077173766,
#[Out]#   9999.374228290897,
#[Out]#   9996.3981288351515,
#[Out]#   9981.4234035625559,
#[Out]#   9999.9730289544605,
#[Out]#   9998.0919040399931,
#[Out]#   9991.4881693687021,
#[Out]#   9999.8223859440677,
#[Out]#   9997.4797308072903,
#[Out]#   9999.5895232265884,
#[Out]#   9877.1087022966367,
#[Out]#   9993.7490475205905,
#[Out]#   9997.9123997144034,
#[Out]#   9999.5293899052467,
#[Out]#   9998.53415039225,
#[Out]#   9999.6064686577301,
#[Out]#   9998.7276389736217,
#[Out]#   9999.5399642314715,
#[Out]#   9999.9435046310828,
#[Out]#   9999.8684720729161,
#[Out]#   9989.8859314719139,
#[Out]#   9999.9390444621677,
#[Out]#   9958.2874084999239,
#[Out]#   9999.0722357438117,
#[Out]#   9999.7602825247304,
#[Out]#   9997.083522946743,
#[Out]#   9990.6040176515726,
#[Out]#   9999.7045632838417,
#[Out]#   9999.5408729243009,
#[Out]#   9999.6769801744267,
#[Out]#   9999.5648053560872,
#[Out]#   9999.4456280736267,
#[Out]#   9982.006658421089,
#[Out]#   9999.8330584756459,
#[Out]#   9999.2962902427425,
#[Out]#   9929.3812485722046,
#[Out]#   9998.7832798232921,
#[Out]#   9985.0514032024821,
#[Out]#   9996.067828738338,
#[Out]#   9999.6151909312866,
#[Out]#   9997.5854135626323,
#[Out]#   9946.3606590787895,
#[Out]#   9999.6622042108174,
#[Out]#   9997.4885451632745,
#[Out]#   9983.1433938219179,
#[Out]#   9999.8574368891823,
#[Out]#   9999.5997465127093,
#[Out]#   9999.6712112359473,
#[Out]#   9996.8807412010901,
#[Out]#   9999.9291326027196,
#[Out]#   9999.7454755128019],
#[Out]#  2.2: [9966.4860255446638,
#[Out]#   9987.5706608478831,
#[Out]#   9999.911219313406,
#[Out]#   9999.53361191976,
#[Out]#   9985.6096429800054,
#[Out]#   9995.5691034936044,
#[Out]#   9998.756529476761,
#[Out]#   9999.8315660750523,
#[Out]#   9999.9613378612339,
#[Out]#   9999.1873047347781,
#[Out]#   9990.3907962050507,
#[Out]#   9999.8371977740208,
#[Out]#   9996.2210335037962,
#[Out]#   9991.7101415697216,
#[Out]#   9990.638364925524,
#[Out]#   9999.9379739175311,
#[Out]#   9998.5141924027866,
#[Out]#   9999.8722880821078,
#[Out]#   9999.8705749445453,
#[Out]#   9997.1269458915594,
#[Out]#   9999.8936832446143,
#[Out]#   9999.8990729582983,
#[Out]#   9972.0147502208983,
#[Out]#   9999.9406095129234,
#[Out]#   9968.5098331372483,
#[Out]#   9998.199112489463,
#[Out]#   9999.6240858418241,
#[Out]#   9999.9390076554791,
#[Out]#   9999.8397560900412,
#[Out]#   9997.2620532911005,
#[Out]#   9931.6985060064981,
#[Out]#   9999.5986260803147,
#[Out]#   9969.5725535169895,
#[Out]#   9998.464692699501,
#[Out]#   9998.0262453806536,
#[Out]#   9998.7253186112721,
#[Out]#   9999.7421694750901,
#[Out]#   9998.7197842774567,
#[Out]#   9999.6166145264251,
#[Out]#   9999.7147472014112,
#[Out]#   9999.0446830582114,
#[Out]#   9999.138851162028,
#[Out]#   9999.9279134572153,
#[Out]#   9999.7517462530104,
#[Out]#   9999.8877395537311,
#[Out]#   9998.7520853483475,
#[Out]#   9999.9470093706368,
#[Out]#   9999.3975352699217,
#[Out]#   9997.7896576971707,
#[Out]#   9999.222340313132,
#[Out]#   9999.9475154148586,
#[Out]#   9996.3128559868583,
#[Out]#   9999.9724183383914,
#[Out]#   9973.1493417528727,
#[Out]#   9999.6860218229485,
#[Out]#   9998.5196660007095,
#[Out]#   9999.667073898021,
#[Out]#   9999.7527257086313,
#[Out]#   9996.4975872308296,
#[Out]#   9978.6968674248255,
#[Out]#   9996.3899501588676,
#[Out]#   9999.7229654387847,
#[Out]#   9999.5488734561204,
#[Out]#   9999.9220375706027,
#[Out]#   9999.0119858294202,
#[Out]#   9999.4803982292724,
#[Out]#   9999.3163716792515,
#[Out]#   9999.6661510676186,
#[Out]#   9999.9671779663622,
#[Out]#   9998.391909583037,
#[Out]#   9973.4346967094061,
#[Out]#   9997.8898808038994,
#[Out]#   9998.0671102077904,
#[Out]#   9999.4060979119058,
#[Out]#   9999.6969056698526,
#[Out]#   9999.6165206331443,
#[Out]#   9998.6066408208553,
#[Out]#   9997.9421476720399,
#[Out]#   9999.6168017623349,
#[Out]#   9994.8719167656964,
#[Out]#   9992.4019871092351,
#[Out]#   9999.8648114840071,
#[Out]#   9999.7756068540293,
#[Out]#   9999.0507559935959,
#[Out]#   9996.226051563799,
#[Out]#   9978.2969622160435,
#[Out]#   9984.7861497847261,
#[Out]#   9999.2564216333139,
#[Out]#   9999.6835626926913,
#[Out]#   9989.2193923719169,
#[Out]#   9977.8668464940929,
#[Out]#   9999.5631272489318,
#[Out]#   9998.8391103493541,
#[Out]#   9992.4079820149927,
#[Out]#   9960.3216421896723,
#[Out]#   9998.2383768683758,
#[Out]#   9999.2062010603313,
#[Out]#   9999.9872280306772,
#[Out]#   9999.9848814435718,
#[Out]#   9996.5976410754265],
#[Out]#  2.3: [9999.6347727864377,
#[Out]#   9999.839032748645,
#[Out]#   9999.8833445039181,
#[Out]#   9999.9604367961292,
#[Out]#   9999.8397903262448,
#[Out]#   9997.0907699964118,
#[Out]#   9973.4021674377873,
#[Out]#   9999.288391158796,
#[Out]#   9999.9512675072583,
#[Out]#   9999.8015852472054,
#[Out]#   9998.5097873748091,
#[Out]#   9999.9229168808888,
#[Out]#   9999.9881766025082,
#[Out]#   9992.0600046832878,
#[Out]#   9999.621901890212,
#[Out]#   9996.6305610531235,
#[Out]#   9996.5142898483791,
#[Out]#   9999.9109538377834,
#[Out]#   9999.922206832849,
#[Out]#   9999.2891670991885,
#[Out]#   9986.9604826105515,
#[Out]#   9999.9967430081124,
#[Out]#   9998.7127213191779,
#[Out]#   9999.2435426754273,
#[Out]#   9999.9933802813575,
#[Out]#   9966.8059300920249,
#[Out]#   9999.8192049800364,
#[Out]#   9999.4006375934878,
#[Out]#   9999.2413962714945,
#[Out]#   9999.0174746715056,
#[Out]#   9985.3649865131629,
#[Out]#   9999.7585689174157,
#[Out]#   9935.2741542908079,
#[Out]#   9998.5005213306376,
#[Out]#   9999.9860620736636,
#[Out]#   9951.0252544771283,
#[Out]#   9966.4337082259171,
#[Out]#   9969.9381412092371,
#[Out]#   9997.7181891763412,
#[Out]#   9999.6763920286739,
#[Out]#   9999.6989142270868,
#[Out]#   9978.5174855394616,
#[Out]#   9988.5432479048413,
#[Out]#   9999.9566986982809,
#[Out]#   9987.9434997179542,
#[Out]#   9995.3031314177861,
#[Out]#   9998.9061324608283,
#[Out]#   9999.8053140834418,
#[Out]#   9999.5917466054871,
#[Out]#   9999.9430471621999,
#[Out]#   9999.6910114240709,
#[Out]#   9999.5301264709251,
#[Out]#   9999.9592736663744,
#[Out]#   9997.2813026878775,
#[Out]#   9998.6629148272059,
#[Out]#   9999.8212937848002,
#[Out]#   9996.6313587292971,
#[Out]#   9999.8619809971769,
#[Out]#   9994.344462619465,
#[Out]#   9999.9605418473202,
#[Out]#   9998.9089790256185,
#[Out]#   9968.275182218591,
#[Out]#   9999.4272121405702,
#[Out]#   9990.9786376947013,
#[Out]#   9999.3745820700642,
#[Out]#   9998.9496348460289,
#[Out]#   9991.3411649839545,
#[Out]#   9999.9259561821964,
#[Out]#   9963.1956175542527,
#[Out]#   9998.7750913001073,
#[Out]#   9999.1254504395692,
#[Out]#   9996.9611794674183,
#[Out]#   9999.9846776915692,
#[Out]#   9999.7186185496867,
#[Out]#   9999.3939709367914,
#[Out]#   9957.6941907818473,
#[Out]#   9999.4153985015328,
#[Out]#   9999.9737120582286,
#[Out]#   9999.3933010684414,
#[Out]#   9999.8828782191194,
#[Out]#   9999.5003035102072,
#[Out]#   9999.8637403946468,
#[Out]#   9990.2642900919636,
#[Out]#   9997.7634046219773,
#[Out]#   9999.8347672338023,
#[Out]#   9998.7157746443081,
#[Out]#   9999.2478343532348,
#[Out]#   9999.3657477360794,
#[Out]#   9999.6508207962652,
#[Out]#   9997.9183316581821,
#[Out]#   9999.9185701543738,
#[Out]#   9998.1870773879309,
#[Out]#   9999.9623930130347,
#[Out]#   9991.5690988376846,
#[Out]#   9985.3276519197498,
#[Out]#   9999.73775706591,
#[Out]#   9999.755069165647,
#[Out]#   9999.8857024861645,
#[Out]#   9999.8933189867275,
#[Out]#   9999.9333119368384],
#[Out]#  2.4: [9999.648666002442,
#[Out]#   9999.4099280055962,
#[Out]#   9999.65669278112,
#[Out]#   9999.9049838395786,
#[Out]#   9998.7292816558256,
#[Out]#   9934.1838331359959,
#[Out]#   9999.9524784816604,
#[Out]#   9999.7716420436591,
#[Out]#   9998.5710566637481,
#[Out]#   9999.9953814374621,
#[Out]#   9999.8379082333067,
#[Out]#   9999.6009603679122,
#[Out]#   9999.4715245984989,
#[Out]#   9999.950189259358,
#[Out]#   9999.0644439642074,
#[Out]#   9999.9280484443861,
#[Out]#   9999.7102341505615,
#[Out]#   9999.9608252322341,
#[Out]#   9999.3926906064298,
#[Out]#   9999.9618941412937,
#[Out]#   9996.1317680498105,
#[Out]#   9983.6275396868023,
#[Out]#   9999.0757385179895,
#[Out]#   9999.9172436525223,
#[Out]#   9992.8328407070821,
#[Out]#   9999.9363796587149,
#[Out]#   9999.8687312689162,
#[Out]#   9999.3842301997574,
#[Out]#   9999.8516899231763,
#[Out]#   9999.9581797961273,
#[Out]#   9999.603706305068,
#[Out]#   9999.8513558132599,
#[Out]#   9999.9512533820962,
#[Out]#   9999.8084401684337,
#[Out]#   9995.7739596359206,
#[Out]#   9999.9099137655157,
#[Out]#   9999.9877058397014,
#[Out]#   9999.9506139731366,
#[Out]#   9985.3326115954751,
#[Out]#   9999.9719716110758,
#[Out]#   9998.0311091051699,
#[Out]#   9963.7409641075319,
#[Out]#   9999.975635431947,
#[Out]#   9999.7240628675227,
#[Out]#   9999.9158374899416,
#[Out]#   9999.8132432671337,
#[Out]#   9999.980406117671,
#[Out]#   9992.454296684069,
#[Out]#   9999.570748059743,
#[Out]#   9999.9630121628707,
#[Out]#   9999.5641227102024,
#[Out]#   9999.1323633695229,
#[Out]#   9999.308040346601,
#[Out]#   9999.2904172358049,
#[Out]#   9988.6764043341282,
#[Out]#   9998.355481353894,
#[Out]#   9999.897201155849,
#[Out]#   9961.3445844211183,
#[Out]#   9998.6819164830904,
#[Out]#   9983.5335362823589,
#[Out]#   9999.7119974638445,
#[Out]#   9998.5780187295786,
#[Out]#   9999.723241781714,
#[Out]#   9998.8565952529698,
#[Out]#   9998.4781269373652,
#[Out]#   9999.9378181987722,
#[Out]#   9999.6376980316036,
#[Out]#   9999.7169595062005,
#[Out]#   9998.3293689644706,
#[Out]#   9983.5185689433529,
#[Out]#   9999.6420286183165,
#[Out]#   9999.6069427849707,
#[Out]#   9999.8860069583425,
#[Out]#   9994.4722275967524,
#[Out]#   9999.8283163018332,
#[Out]#   9999.9423388934374,
#[Out]#   9996.8144684928902,
#[Out]#   9999.3930286198156,
#[Out]#   9999.2187543387754,
#[Out]#   9999.5864964162374,
#[Out]#   9998.2109645192777,
#[Out]#   9975.0806606082806,
#[Out]#   9998.4108532643331,
#[Out]#   9999.9206668880743,
#[Out]#   9999.7900442906994,
#[Out]#   9999.9446010129577,
#[Out]#   9999.7166084470409,
#[Out]#   9977.4622759446011,
#[Out]#   9994.5663125374758,
#[Out]#   9999.9039259349574,
#[Out]#   9999.8539866277533,
#[Out]#   9982.4519434204958,
#[Out]#   9999.8609157161591,
#[Out]#   9999.5020806793182,
#[Out]#   9999.9631104287073,
#[Out]#   9999.19008401268,
#[Out]#   9996.7564204253358,
#[Out]#   9999.9994373302306,
#[Out]#   9991.1115081011594,
#[Out]#   9940.9371496524072],
#[Out]#  2.5: [9999.9731559035881,
#[Out]#   9999.9987323724126,
#[Out]#   9998.0189864037166,
#[Out]#   9999.9549024239604,
#[Out]#   9999.7914507633977,
#[Out]#   9997.2486536175729,
#[Out]#   9981.5965123156493,
#[Out]#   9999.2419233183973,
#[Out]#   9999.8400198517666,
#[Out]#   9999.9871182752286,
#[Out]#   9999.8375872488177,
#[Out]#   9999.9537189121711,
#[Out]#   9999.9322785798868,
#[Out]#   9999.9534818874217,
#[Out]#   9998.2321319805815,
#[Out]#   9999.9386722423169,
#[Out]#   9999.1042231924457,
#[Out]#   9996.8482762085951,
#[Out]#   9998.959999590923,
#[Out]#   9999.7623283493558,
#[Out]#   9999.4567335341417,
#[Out]#   9999.1607665259362,
#[Out]#   9995.9702712472044,
#[Out]#   9992.1172170665504,
#[Out]#   9999.9922498057877,
#[Out]#   9999.3695599981911,
#[Out]#   9984.376934026528,
#[Out]#   9989.3921031954396,
#[Out]#   9999.7269732538589,
#[Out]#   9999.0213313957938,
#[Out]#   9999.5779251580661,
#[Out]#   9993.4534136120128,
#[Out]#   9997.5148616893493,
#[Out]#   9999.0554804250132,
#[Out]#   9999.9428108257052,
#[Out]#   9999.5893611093161,
#[Out]#   9999.0572517896326,
#[Out]#   9999.8542599749526,
#[Out]#   9999.9747830473643,
#[Out]#   9984.6100724854423,
#[Out]#   9999.8239518148039,
#[Out]#   9978.1835687268449,
#[Out]#   9999.8428232603928,
#[Out]#   9999.713937188626,
#[Out]#   9999.7992587387689,
#[Out]#   9999.2023583768878,
#[Out]#   9999.7818265366386,
#[Out]#   9999.6264278786657,
#[Out]#   9999.5280486828487,
#[Out]#   9997.6483299763968,
#[Out]#   9999.9700854747898,
#[Out]#   9998.3255562632294,
#[Out]#   9999.5410019699557,
#[Out]#   9999.9174771103972,
#[Out]#   9999.1891764371212,
#[Out]#   9999.7974028072786,
#[Out]#   9975.0390523545884,
#[Out]#   9999.429420757695,
#[Out]#   9998.9739514167886,
#[Out]#   9999.3649799168725,
#[Out]#   9991.408374644092,
#[Out]#   9991.1008668050818,
#[Out]#   9991.229305257848,
#[Out]#   9998.2636265287365,
#[Out]#   9999.9641861241507,
#[Out]#   9966.3595059060008,
#[Out]#   9999.9652053905338,
#[Out]#   9999.9819062412498,
#[Out]#   9999.3906704779802,
#[Out]#   9999.6914450122822,
#[Out]#   9999.9918305982064,
#[Out]#   9999.3449517561057,
#[Out]#   9999.8649030309316,
#[Out]#   9999.5494430458857,
#[Out]#   9999.768270811499,
#[Out]#   9999.2456343870963,
#[Out]#   9998.3833145584103,
#[Out]#   9999.7202161882651,
#[Out]#   9999.7249462356431,
#[Out]#   9997.6644737867609,
#[Out]#   9999.8196029805658,
#[Out]#   9999.1471296881919,
#[Out]#   9999.9524060191216,
#[Out]#   9999.0267142198336,
#[Out]#   9999.8362873973456,
#[Out]#   9999.8389715257945,
#[Out]#   9999.7626122655856,
#[Out]#   9997.8450521038976,
#[Out]#   9999.7970585053772,
#[Out]#   9999.906003324144,
#[Out]#   9998.408328850579,
#[Out]#   9995.9038646186473,
#[Out]#   9999.9493593937841,
#[Out]#   9997.0798022442432,
#[Out]#   9999.4902150381167,
#[Out]#   9999.9130378929167,
#[Out]#   9999.7628638035185,
#[Out]#   9999.9665940137456,
#[Out]#   9993.2884665618876,
#[Out]#   9983.5353703667315]}
mean_masses
#[Out]# {2.0: 9990.2067607193949,
#[Out]#  2.1: 9991.6513142240346,
#[Out]#  2.2: 9994.7274064715857,
#[Out]#  2.3: 9994.5487290295478,
#[Out]#  2.4: 9995.758944722551,
#[Out]#  2.5: 9997.3492996689492}
mean_luminosities
#[Out]# {2.0: 7.9550071534478892,
#[Out]#  2.1: 7.8448264793581686,
#[Out]#  2.2: 7.6978484268376191,
#[Out]#  2.3: 7.5796019106976216,
#[Out]#  2.4: 7.3954556937895752,
#[Out]#  2.5: 7.2044432982171918}
mass_to_light = [mean_masses[k]/10**mean_luminosities[k] for k in sorted(clusters.keys())]
pl.plot(sorted(clusters.keys()), mass_to_light)
pl.xlabel("Powerlaw alpha")
pl.ylabel("Mass / Light (Msun/Lsun)")
#[Out]# <matplotlib.text.Text at 0x10ecfe8d0>
clusters, luminosities, masses, mean_luminosities, mean_masses = {},{},{},{},{}
for mmax in (50,100,150,200,250,300,500,1000):
    # make 100 clusters of 10^4 msun each (very good sampling of total mass range)
    clusters[p] = [imf.make_cluster(10000, 'kroupa', silent=True, mmax=mmax) for x in range(100)]
    # cluster luminosities
    luminosities[p] = [imf.lum_of_cluster(cl) for cl in clusters[p]]
    masses[p] = [cl.sum() for cl in clusters[p]]
    mean_luminosities[p] = np.mean(luminosities[p])
    mean_masses[p] = np.mean(masses[p])
mass_to_light = [mean_masses[k]/10**mean_luminosities[k] for k in sorted(clusters.keys())]
pl.plot(sorted(clusters.keys()), mass_to_light)
pl.xlabel("Maximum Stellar Mass")
pl.ylabel("Mass / Light (Msun/Lsun)")
#[Out]# <matplotlib.text.Text at 0x10ed1c518>
clusters, luminosities, masses, mean_luminosities, mean_masses = {},{},{},{},{}
for mmax in (50,100,150,200,250,300,500,1000):
    # make 100 clusters of 10^4 msun each (very good sampling of total mass range)
    clusters[mmax] = [imf.make_cluster(10000, 'kroupa', silent=True, mmax=mmax) for x in range(100)]
    # cluster luminosities
    luminosities[mmax] = [imf.lum_of_cluster(cl) for cl in clusters[mmax]]
    masses[mmax] = [cl.sum() for cl in clusters[mmax]]
    mean_luminosities[mmax] = np.mean(luminosities[mmax])
    mean_masses[mmax] = np.mean(masses[mmax])
mass_to_light = [mean_masses[k]/10**mean_luminosities[k] for k in sorted(clusters.keys())]
pl.plot(sorted(clusters.keys()), mass_to_light)
pl.xlabel("Maximum Stellar Mass")
pl.ylabel("Mass / Light (Msun/Lsun)")
#[Out]# <matplotlib.text.Text at 0x10f846a20>
mass_to_light = [mean_masses[k]/10**mean_luminosities[k] for k in sorted(clusters.keys())]
pl.plot(sorted(clusters.keys()), mass_to_light)
pl.vlines([100,300],0.0001,0.0007,'k--')
pl.xlabel("Maximum Stellar Mass")
pl.ylabel("Mass / Light (Msun/Lsun)")
mass_to_light = [mean_masses[k]/10**mean_luminosities[k] for k in sorted(clusters.keys())]
pl.plot(sorted(clusters.keys()), mass_to_light)
pl.vlines([100,300],0.0001,0.0007,color='k', linestyle='--')
pl.xlabel("Maximum Stellar Mass")
pl.ylabel("Mass / Light (Msun/Lsun)")
#[Out]# <matplotlib.text.Text at 0x10fd9ad30>
