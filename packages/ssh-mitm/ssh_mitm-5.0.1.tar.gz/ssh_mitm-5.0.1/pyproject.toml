[build-system]
requires = ["hatchling", "hatch-requirements-txt"]
build-backend = "hatchling.build"

[project]
name = "ssh-mitm"
dynamic = ["version", "dependencies"]
authors = [
    {name = "SSH-MITM Dev-Team", email = "support@ssh-mitm.at"}
]
maintainers = [
  {name = "Manfred Kaiser", email = "manfred.kaiser@ssh-mitm.at"}
]
description = "ssh mitm server for security audits supporting publickey authentication, session hijacking and file manipulation"
readme = "README.md"
license = {file = "LICENSE"}
keywords = [
    "ssh",
    "proxy",
    "mitm",
    "network",
    "security",
    "audit",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Topic :: System :: Networking",
    "Development Status :: 5 - Production/Stable",
]
requires-python = ">= 3.8"

[project.urls]
Homepage = "https://www.ssh-mitm.at"
Documentation = "https://docs.ssh-mitm.at"
Changelog = "https://github.com/ssh-mitm/ssh-mitm/blob/master/CHANGELOG.md"
Source = "https://github.com/ssh-mitm/ssh-mitm"
Tracker = "https://github.com/ssh-mitm/ssh-mitm/issues"

[project.scripts]
ssh-mitm = "sshmitm.cli:main"
ssh-mitm-askpass = "sshmitm.tools.askpass:main"

[project.entry-points."sshmitm.SubCommand"]
server = "sshmitm.server.cli:SSHServerModules"
audit = "sshmitm.audit.cli:Audit"
check-publickey = "sshmitm.commands.check_publickey:CheckPublickey"

[project.entry-points."sshmitm.BaseSession"]
base = "sshmitm.session:Session"

[project.entry-points."sshmitm.Authenticator"]
passthrough = "sshmitm.authentication:AuthenticatorPassThrough"

[project.entry-points."sshmitm.BaseServerInterface"]
base = "sshmitm.interfaces.server:ServerInterface"

[project.entry-points."sshmitm.SSHBaseForwarder"]
mirrorshell = "sshmitm.plugins.ssh.mirrorshell:SSHMirrorForwarder"

[project.entry-points."sshmitm.SCPBaseForwarder"]
debug_traffic = "sshmitm.plugins.scp.debug_traffic:SCPDebugForwarder"
inject_file = "sshmitm.plugins.scp.inject_file:SCPInjectFile"
replace_file = "sshmitm.plugins.scp.replace_file:SCPReplaceFile"
store_file = "sshmitm.plugins.scp.store_file:SCPStorageForwarder"
replace-command = "sshmitm.plugins.scp.rewrite_command:SCPRewriteCommand"
CVE-2022-29154 = "sshmitm.plugins.scp.cve202229154:CVE202229154"

[project.entry-points."sshmitm.BaseSFTPServerInterface"]
base = "sshmitm.interfaces.sftp:SFTPProxyServerInterface"

[project.entry-points."sshmitm.SFTPHandlerBasePlugin"]
replace_file = "sshmitm.plugins.sftp.replace_file:SFTPProxyReplaceHandler"
store_file = "sshmitm.plugins.sftp.store_file:SFTPHandlerStoragePlugin"

[project.entry-points."sshmitm.RemotePortForwardingBaseForwarder"]
inject = "sshmitm.plugins.tunnel.injectservertunnel:InjectableRemotePortForwardingForwarder"

[project.entry-points."sshmitm.LocalPortForwardingBaseForwarder"]
socks = "sshmitm.plugins.tunnel.socks:SOCKSTunnelForwarder"

[tool.hatch.version]
path = "sshmitm/__init__.py"

[tool.hatch.metadata.hooks.requirements_txt]
files = ["requirements.in"]

[tool.hatch.build]
include = [
    "requirements.in",
    "sshmitm/**/*.py",
    "sshmitm/data/*.*",
]

[tool.hatch.envs.lint]
detached = false
dependencies = [
    "bandit",
    "black",
    "Flake8-pyproject",
    "flake8",
    "mypy",
    "pylint",
    "ruff",
]

[tool.hatch.envs.lint.scripts]
check = [
    "bandit -r sshmitm",
    "black --check sshmitm",
    "flake8 sshmitm",
    "pylint sshmitm",
    "ruff check sshmitm",
    "- mypy sshmitm",
]

[tool.hatch.envs.docs]
detached = false

[tool.hatch.envs.docs.scripts]
build = [
    "pip install -r doc/requirements.txt",
    "sphinx-apidoc -T -e -M -d 1 -o doc/api sshmitm",
    "sphinx-build doc build/html",
]

[tool.hatch.envs.appimage]
detached = false

[tool.hatch.envs.appimage.scripts]
build = [
    "appimage/build.sh",
]

[tool.flake8]
ignore = ["E203", "E501", "W503"]

[tool.mypy]
strict = true
install_types = true
non_interactive = true

[tool.pylint]
disable = [
    "duplicate-code",
    "fixme",
    "line-too-long",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "too-few-public-methods",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-locals",
    "too-many-positional-arguments",
    "too-many-return-statements",
    "too-many-statements",
]

[tool.pylint.MASTER]
load-plugins = "pylint.extensions.docparams"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "COM812",  # Trailing comma missing
    "D",       # Docstring related
    "E501",    # Line too long
    "FA100",   # Missing from __future__ import annotations
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function definition
    "FBT003",  # Boolean positional value in function call
    "FIX002",  # Line contains TODO, consider resolving the issue
    "N818",    # Exception name `MissingHostException` should be named with an Error suffix
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR2004", # Magic value used in comparison
    "PTH103",  # `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    "PTH107",  # `os.remove()` should be replaced by `Path.unlink()`
    "PTH111",  # `os.path.expanduser()` should be replaced by `Path.expanduser()`
    "PTH113",  # `os.path.isfile()` should be replaced by `Path.is_file()`
    "PTH116",  # `os.stat()` should be replaced by `Path.stat()`, `Path.owner()`, or `Path.group()`
    "PTH118",  # `os.path.join()` should be replaced by `Path` with `/` operator
    "PTH119",  # `os.path.basename()` should be replaced by `Path.name`
    "PTH123",  # `open()` should be replaced by `Path.open()`
    "S104",    # Possible binding to all interfaces
    "SLF001",  # Private member accessed: `_indent`
    "T201",    # `print` found
    "TRY301",  # Abstract `raise` to an inner function
    "TRY400",  # Use `logging.exception` instead of `logging.error`
    "UP024",   # Replace aliased errors with `OSError`,
    "UP037",   # Remove quotes from type annotation
]
[tool.ruff.lint.per-file-ignores]
"sshmitm/workarounds/monkeypatch.py" = ["ALL"]
"sshmitm/workarounds/transport.py" = ["ALL"]
