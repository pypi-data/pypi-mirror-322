import abc
import datetime
import pathlib
import threading
from abc import ABC, abstractmethod
from pathkit.config import EnvConfig as EnvConfig
from typing import Any, Callable, Generator, ParamSpec, TypeVar, Tuple, Dict, Optional


class Local:
    local: threading.local
    @classmethod
    def hasattr(cls, key: str) -> bool: ...
    @classmethod
    def getattr(cls, key: str) -> Any: ...
    @classmethod
    def setattr(cls, key: str, value: Any) -> None: ...
    @classmethod
    def delattr(cls, key: str) -> None: ...
T = TypeVar('T')
P = ParamSpec('P')

def retry(*error: Any) -> Callable[[Callable[P, T]], Callable[P, T]]: ...

class BasePath(ABC, metaclass=abc.ABCMeta):
    path: pathlib.Path
    _section: Tuple[str]
    _creator: Any = None
    def __init__(self, path: str | pathlib.Path | BasePath, semaphore: threading.Semaphore | None = None) -> None: ...
    @classmethod
    def new(cls, *section: str, **kwargs: Any) -> type['BasePath'] | type: ...
    def _key_on_thread(self) -> str: ...
    def _section_key_on_thread(self) -> str: ...
    @staticmethod
    def _read_config(section: str) -> Dict[str, str]: ...
    def _valid_reset(self) -> None: ...
    def _reset(self, section: str) -> Optional[Exception]: ...
    @property
    def client(self) -> Any: ...
    def join(self, path: str) -> BasePath: ...
    @property
    def parent(self) -> BasePath: ...
    @property
    @abstractmethod
    def exists(self) -> bool: ...
    @abstractmethod
    def is_dir(self) -> bool: ...
    @abstractmethod
    def read(self) -> bytes: ...
    @abstractmethod
    def write(self, data: bytes) -> None: ...
    @abstractmethod
    def upload(self, local_path: str) -> None: ...
    @abstractmethod
    def delete(self) -> None: ...
    @abstractmethod
    def mkdir(self) -> None: ...
    @abstractmethod
    def glob(self, pattern: str = '*') -> Generator['BasePath', Any, Any]: ...
    @property
    @abstractmethod
    def mtime(self) -> datetime.datetime: ...
    def rglob(self, pattern: str = '*') -> Generator['BasePath', Any, Any]: ...
    def __str__(self) -> str: ...
    def __hash__(self) -> int: ...
