[project]
name = "liteswarm"
version = "0.6.0"
description = "A lightweight framework for building AI agent systems"
readme = "README.md"
license = {file = "LICENSE"}
authors = [{name = "Evgenii Mozharovskii", email = "eugene@glyphy.ai"}]
keywords = [
    "ai",
    "agents",
    "llm",
    "swarm",
    "multi-agent",
    "agent-systems",
    "agent-orchestration",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    "griffe>=1.5.1",
    "json-repair>=0.30.2",
    "litellm>=1.57.1",
    "numpy>=2.2.0",
    "orjson>=3.10.11",
    "pydantic>=2.10.5",
    "prompt_toolkit>=3.0.48",
]

[project.urls]
homepage = "https://github.com/GlyphyAI/liteswarm"
repository = "https://github.com/GlyphyAI/liteswarm"
documentation = "https://github.com/GlyphyAI/liteswarm#readme"
bug-tracker = "https://github.com/GlyphyAI/liteswarm/issues"
changelog = "https://github.com/GlyphyAI/liteswarm/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "mypy>=1.14.1",
    "ruff>=0.7.3",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.1",
    "typing-extensions>=4.12.2",
    "commitizen>=4.1.0",
]

docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.13",
    "mkdocstrings>=0.24.1",
    "mkdocstrings-python>=1.9.0",
    "mdx-truly-sane-lists>=1.3",
]

examples = [
    "fastapi>=0.115.6",
    "uvicorn>=0.34.0",
]

[tool.setuptools.package-data]
"liteswarm" = ["py.typed"]

[tool.ruff]
show-fixes = true
line-length = 120
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
preview = true
explicit-preview-rules = true
ignore = [
    "E501",    # line too long, handled by black
    "S101",    # assert
    "ISC001",  # single-line-implicit-string-concatenation, incompatible with ruff format
    "D100",    # undocumented-public-module
    "D101",    # undocumented-public-class
    "D102",    # undocumented-public-method
    "D103",    # undocumented-public-function
    "D104",    # undocumented-public-package
    "D105",    # undocumented-magic-method
    "D107",    # undocumented-public-init
    "PLC0105", # type-name-incorrect-variance
]
select = [
    "E",       # pycodestyle errors
    "W",       # pycodestyle warnings
    "F",       # pyflakes
    "I",       # isort
    "B",       # flake8-bugbear
    "C4",      # flake8-comprehensions,
    "PL",      # pylint
    "TCH",     # flake8-type-checking
    "N",       # pep8-naming
    "YTT",     # flake8-2020
    "TRY004",  # type-check-without-type-error
    "TRY201",  # verbose-raise
    "TRY203",  # useless-try-except
    "TRY401",  # verbose-log-message
    "RUF022",  # unsorted-dunder-all
    "RUF023",  # unsorted-dunder-slots
    "C420",    # unnecessary-dict-comprehension-for-iterable
    "RUF027",  # missing-f-string-syntax
    "RUF030",  # assert-with-print-message
    "RUF101",  # redirected-noqa
    "D",       # pydocstyle
    "UP",      # pyupgrade
]

[tool.ruff.lint.pylint]
max-args = 20
max-branches = 20
max-statements = 100

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::pydantic.PydanticDeprecatedSince20",
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]

[tool.mypy]
plugins = ["pydantic.mypy"]
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
ignore_missing_imports = true
disallow_any_generics = true
disallow_untyped_defs = true
disallow_any_unimported = true
explicit_package_bases = true
enable_error_code = [
    "explicit-override",
    "possibly-undefined",
    "truthy-bool",
    "unused-awaitable",
    "unused-ignore",
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.6.0"
tag_format = "$version"
version_files = [
    "pyproject.toml:version",
    "CITATION.cff:version",
]
