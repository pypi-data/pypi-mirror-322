"""
    ai/h2o/engine/v1/adjusted_dai_profile.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from h2o_engine_manager.gen.api_client import ApiClient, Endpoint as _Endpoint
from h2o_engine_manager.gen.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from h2o_engine_manager.gen.model.dai_profile_resource import DAIProfileResource
from h2o_engine_manager.gen.model.dai_profile_service_reorder_dai_profile_request import DAIProfileServiceReorderDAIProfileRequest
from h2o_engine_manager.gen.model.rpc_status import RpcStatus
from h2o_engine_manager.gen.model.v1_create_dai_profile_response import V1CreateDAIProfileResponse
from h2o_engine_manager.gen.model.v1_dai_profile import V1DAIProfile
from h2o_engine_manager.gen.model.v1_get_dai_profile_response import V1GetDAIProfileResponse
from h2o_engine_manager.gen.model.v1_list_dai_profiles_response import V1ListDAIProfilesResponse
from h2o_engine_manager.gen.model.v1_reorder_dai_profile_response import V1ReorderDAIProfileResponse
from h2o_engine_manager.gen.model.v1_update_dai_profile_response import V1UpdateDAIProfileResponse


class DAIProfileServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.d_ai_profile_service_create_dai_profile_endpoint = _Endpoint(
            settings={
                'response_type': (V1CreateDAIProfileResponse,),
                'auth': [],
                'endpoint_path': '/v1/daiProfiles',
                'operation_id': 'd_ai_profile_service_create_dai_profile',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'dai_profile_id',
                    'dai_profile',
                ],
                'required': [
                    'dai_profile_id',
                    'dai_profile',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dai_profile_id':
                        (str,),
                    'dai_profile':
                        (V1DAIProfile,),
                },
                'attribute_map': {
                    'dai_profile_id': 'daiProfileId',
                },
                'location_map': {
                    'dai_profile_id': 'query',
                    'dai_profile': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.d_ai_profile_service_delete_dai_profile_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/v1/{name_3}',
                'operation_id': 'd_ai_profile_service_delete_dai_profile',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_3',
                ],
                'required': [
                    'name_3',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_3',
                ]
            },
            root_map={
                'validations': {
                    ('name_3',): {

                        'regex': {
                            'pattern': r'daiProfiles\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_3':
                        (str,),
                },
                'attribute_map': {
                    'name_3': 'name_3',
                },
                'location_map': {
                    'name_3': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.d_ai_profile_service_get_dai_profile_endpoint = _Endpoint(
            settings={
                'response_type': (V1GetDAIProfileResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name_5}',
                'operation_id': 'd_ai_profile_service_get_dai_profile',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_5',
                ],
                'required': [
                    'name_5',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_5',
                ]
            },
            root_map={
                'validations': {
                    ('name_5',): {

                        'regex': {
                            'pattern': r'daiProfiles\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_5':
                        (str,),
                },
                'attribute_map': {
                    'name_5': 'name_5',
                },
                'location_map': {
                    'name_5': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.d_ai_profile_service_list_dai_profiles_endpoint = _Endpoint(
            settings={
                'response_type': (V1ListDAIProfilesResponse,),
                'auth': [],
                'endpoint_path': '/v1/daiProfiles',
                'operation_id': 'd_ai_profile_service_list_dai_profiles',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'page_size',
                    'page_token',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                },
                'attribute_map': {
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                },
                'location_map': {
                    'page_size': 'query',
                    'page_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.d_ai_profile_service_reorder_dai_profile_endpoint = _Endpoint(
            settings={
                'response_type': (V1ReorderDAIProfileResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name}:reorder',
                'operation_id': 'd_ai_profile_service_reorder_dai_profile',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name',
                ]
            },
            root_map={
                'validations': {
                    ('name',): {

                        'regex': {
                            'pattern': r'daiProfiles\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (DAIProfileServiceReorderDAIProfileRequest,),
                },
                'attribute_map': {
                    'name': 'name',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.d_ai_profile_service_update_dai_profile_endpoint = _Endpoint(
            settings={
                'response_type': (V1UpdateDAIProfileResponse,),
                'auth': [],
                'endpoint_path': '/v1/{daiProfile.name}',
                'operation_id': 'd_ai_profile_service_update_dai_profile',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'dai_profile_name',
                    'update_mask',
                    'dai_profile',
                ],
                'required': [
                    'dai_profile_name',
                    'update_mask',
                    'dai_profile',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'dai_profile_name',
                ]
            },
            root_map={
                'validations': {
                    ('dai_profile_name',): {

                        'regex': {
                            'pattern': r'daiProfiles\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dai_profile_name':
                        (str,),
                    'update_mask':
                        (str,),
                    'dai_profile':
                        (DAIProfileResource,),
                },
                'attribute_map': {
                    'dai_profile_name': 'daiProfile.name',
                    'update_mask': 'updateMask',
                },
                'location_map': {
                    'dai_profile_name': 'path',
                    'update_mask': 'query',
                    'dai_profile': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def d_ai_profile_service_create_dai_profile(
        self,
        dai_profile_id,
        dai_profile,
        **kwargs
    ):
        """Creates a new DAIProfile. (-- api-linter: core::0133::method-signature=disabled     aip.dev/not-precedent: Not specifying \"parent\" because DAIProfile is a top-level resource. --) (-- api-linter: core::0133::http-uri-parent=disabled     aip.dev/not-precedent: Not specifying \"parent\" because DAIProfile is a top-level resource. --)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_profile_service_create_dai_profile(dai_profile_id, dai_profile, async_req=True)
        >>> result = thread.get()

        Args:
            dai_profile_id (str): Specify the DAIProfile ID, which will become a part of the DAIProfile resource name.  It must: - contain 1-63 characters - contain only lowercase alphanumeric characters or hyphen ('-') - start with an alphabetic character - end with an alphanumeric character  This matches a regular expression: ^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$
            dai_profile (V1DAIProfile): The DAIProfile resource to create.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1CreateDAIProfileResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dai_profile_id'] = \
            dai_profile_id
        kwargs['dai_profile'] = \
            dai_profile
        return self.d_ai_profile_service_create_dai_profile_endpoint.call_with_http_info(**kwargs)

    def d_ai_profile_service_delete_dai_profile(
        self,
        name_3,
        **kwargs
    ):
        """Deletes a DAIProfile.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_profile_service_delete_dai_profile(name_3, async_req=True)
        >>> result = thread.get()

        Args:
            name_3 (str): DAIProfile resource name.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_3'] = \
            name_3
        return self.d_ai_profile_service_delete_dai_profile_endpoint.call_with_http_info(**kwargs)

    def d_ai_profile_service_get_dai_profile(
        self,
        name_5,
        **kwargs
    ):
        """Returns a specific DAIProfile.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_profile_service_get_dai_profile(name_5, async_req=True)
        >>> result = thread.get()

        Args:
            name_5 (str): DAIProfile resource name.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1GetDAIProfileResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_5'] = \
            name_5
        return self.d_ai_profile_service_get_dai_profile_endpoint.call_with_http_info(**kwargs)

    def d_ai_profile_service_list_dai_profiles(
        self,
        **kwargs
    ):
        """Returns a collection of DAIProfiles.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_profile_service_list_dai_profiles(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page_size (int): Maximum number of DAIProfiles to return in a response. If unspecified (or set to 0), at most 50 DAIProfiles will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.. [optional]
            page_token (str): Leave unset to receive the initial page. To list any subsequent pages use the value of 'next_page_token' returned from the ListDAIProfilesResponse.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1ListDAIProfilesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.d_ai_profile_service_list_dai_profiles_endpoint.call_with_http_info(**kwargs)

    def d_ai_profile_service_reorder_dai_profile(
        self,
        name,
        body,
        **kwargs
    ):
        """Change order of a DAIProfile. Changing DAIProfile's order may result in changing order of other DAIProfiles. new_order must be >= 0. When new_order is greater than the last possible order, server will use the last order instead. When new_order is zero, server will use the last order instead.  # noqa: E501

        Example 1: - DAIProfiles: {profileA.order=1, profileB.order=2, profileC.order=3}. - ReorderDAIProfile(name=profileA,new_order=2) - DAIProfiles: {profileB.order=1, profileA.order=2, profileC.order=3}  Example 2 (when new_order greater than the last order, apply last order): - DAIProfiles: {profileA.order=1, profileB.order=2, profileC.order=3}. - ReorderDAIProfile(name=profileA,new_order=50) - DAIProfiles: {profileB.order=1, profileC.order=2, profileA.order=3}  Example 3 (when new_order is zero, apply last order): - DAIProfiles: {profileA.order=1, profileB.order=2, profileC.order=3}. - ReorderDAIProfile(name=profileA,new_order=0) - DAIProfiles: {profileB.order=1, profileC.order=2, profileA.order=3}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_profile_service_reorder_dai_profile(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): DAIProfile resource name.
            body (DAIProfileServiceReorderDAIProfileRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1ReorderDAIProfileResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.d_ai_profile_service_reorder_dai_profile_endpoint.call_with_http_info(**kwargs)

    def d_ai_profile_service_update_dai_profile(
        self,
        dai_profile_name,
        update_mask,
        dai_profile,
        **kwargs
    ):
        """Updates a DAIProfile.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_profile_service_update_dai_profile(dai_profile_name, update_mask, dai_profile, async_req=True)
        >>> result = thread.get()

        Args:
            dai_profile_name (str): DAIProfile resource name.
            update_mask (str): The list of paths referencing which fields to update. Update mask must be non-empty.  Allowed field paths are: {\"display_name\", \"cpu\", \"gpu\", \"memory_bytes\", \"storage_bytes\"}.  To update all allowed fields, specify exactly one path with value \"*\".
            dai_profile (DAIProfileResource): DAIProfile resource.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1UpdateDAIProfileResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dai_profile_name'] = \
            dai_profile_name
        kwargs['update_mask'] = \
            update_mask
        kwargs['dai_profile'] = \
            dai_profile
        return self.d_ai_profile_service_update_dai_profile_endpoint.call_with_http_info(**kwargs)

