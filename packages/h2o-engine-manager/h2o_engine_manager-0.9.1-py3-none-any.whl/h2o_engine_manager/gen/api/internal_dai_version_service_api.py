"""
    ai/h2o/engine/v1/adjusted_dai_profile.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from h2o_engine_manager.gen.api_client import ApiClient, Endpoint as _Endpoint
from h2o_engine_manager.gen.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from h2o_engine_manager.gen.model.internal_dai_version_resource import InternalDAIVersionResource
from h2o_engine_manager.gen.model.rpc_status import RpcStatus
from h2o_engine_manager.gen.model.v1_assign_internal_dai_version_aliases_request import V1AssignInternalDAIVersionAliasesRequest
from h2o_engine_manager.gen.model.v1_assign_internal_dai_version_aliases_response import V1AssignInternalDAIVersionAliasesResponse
from h2o_engine_manager.gen.model.v1_create_internal_dai_version_response import V1CreateInternalDAIVersionResponse
from h2o_engine_manager.gen.model.v1_get_internal_dai_version_response import V1GetInternalDAIVersionResponse
from h2o_engine_manager.gen.model.v1_internal_dai_version import V1InternalDAIVersion
from h2o_engine_manager.gen.model.v1_list_internal_dai_versions_response import V1ListInternalDAIVersionsResponse
from h2o_engine_manager.gen.model.v1_update_internal_dai_version_response import V1UpdateInternalDAIVersionResponse


class InternalDAIVersionServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.internal_dai_version_service_assign_internal_dai_version_aliases_endpoint = _Endpoint(
            settings={
                'response_type': (V1AssignInternalDAIVersionAliasesResponse,),
                'auth': [],
                'endpoint_path': '/v1/internalDAIVersions:assignInternalDAIVersionAliases',
                'operation_id': 'internal_dai_version_service_assign_internal_dai_version_aliases',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (V1AssignInternalDAIVersionAliasesRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.internal_dai_version_service_create_internal_dai_version_endpoint = _Endpoint(
            settings={
                'response_type': (V1CreateInternalDAIVersionResponse,),
                'auth': [],
                'endpoint_path': '/v1/internalDAIVersions',
                'operation_id': 'internal_dai_version_service_create_internal_dai_version',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'internal_dai_version_id',
                    'internal_dai_version',
                ],
                'required': [
                    'internal_dai_version_id',
                    'internal_dai_version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'internal_dai_version_id':
                        (str,),
                    'internal_dai_version':
                        (V1InternalDAIVersion,),
                },
                'attribute_map': {
                    'internal_dai_version_id': 'internalDaiVersionId',
                },
                'location_map': {
                    'internal_dai_version_id': 'query',
                    'internal_dai_version': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.internal_dai_version_service_delete_internal_dai_version_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/v1/{name_6}',
                'operation_id': 'internal_dai_version_service_delete_internal_dai_version',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_6',
                ],
                'required': [
                    'name_6',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_6',
                ]
            },
            root_map={
                'validations': {
                    ('name_6',): {

                        'regex': {
                            'pattern': r'internalDAIVersions\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_6':
                        (str,),
                },
                'attribute_map': {
                    'name_6': 'name_6',
                },
                'location_map': {
                    'name_6': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.internal_dai_version_service_get_internal_dai_version_endpoint = _Endpoint(
            settings={
                'response_type': (V1GetInternalDAIVersionResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name_13}',
                'operation_id': 'internal_dai_version_service_get_internal_dai_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_13',
                ],
                'required': [
                    'name_13',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_13',
                ]
            },
            root_map={
                'validations': {
                    ('name_13',): {

                        'regex': {
                            'pattern': r'internalDAIVersions\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_13':
                        (str,),
                },
                'attribute_map': {
                    'name_13': 'name_13',
                },
                'location_map': {
                    'name_13': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.internal_dai_version_service_list_internal_dai_versions_endpoint = _Endpoint(
            settings={
                'response_type': (V1ListInternalDAIVersionsResponse,),
                'auth': [],
                'endpoint_path': '/v1/internalDAIVersions',
                'operation_id': 'internal_dai_version_service_list_internal_dai_versions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'page_size',
                    'page_token',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                },
                'attribute_map': {
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                },
                'location_map': {
                    'page_size': 'query',
                    'page_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.internal_dai_version_service_update_internal_dai_version_endpoint = _Endpoint(
            settings={
                'response_type': (V1UpdateInternalDAIVersionResponse,),
                'auth': [],
                'endpoint_path': '/v1/{internalDaiVersion.name}',
                'operation_id': 'internal_dai_version_service_update_internal_dai_version',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'internal_dai_version_name',
                    'update_mask',
                    'internal_dai_version',
                ],
                'required': [
                    'internal_dai_version_name',
                    'update_mask',
                    'internal_dai_version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'internal_dai_version_name',
                ]
            },
            root_map={
                'validations': {
                    ('internal_dai_version_name',): {

                        'regex': {
                            'pattern': r'internalDAIVersions\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'internal_dai_version_name':
                        (str,),
                    'update_mask':
                        (str,),
                    'internal_dai_version':
                        (InternalDAIVersionResource,),
                },
                'attribute_map': {
                    'internal_dai_version_name': 'internalDaiVersion.name',
                    'update_mask': 'updateMask',
                },
                'location_map': {
                    'internal_dai_version_name': 'path',
                    'update_mask': 'query',
                    'internal_dai_version': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def internal_dai_version_service_assign_internal_dai_version_aliases(
        self,
        body,
        **kwargs
    ):
        """Assign new set of aliases to InternalDAIVersion. This will replace existing InternalDAIVersion aliases with the new aliases. If there are other InternalDAIVersions with the same alias that we try to assign, they will be deleted from the other InternalDAIVersions.  # noqa: E501

        Example 1 - assign *only* alias latest to another InternalDAIVersion: - InternalDAIVersions: {daiv1.aliases=[\"latest\", \"foo\"], daiv2.aliases=[\"bar\", \"baz\"], daiv3.aliases=[\"goo\"]} - AssignAliases(daiv3, aliases=[\"latest\"]) - InternalDAIVersions: {daiv1.aliases=[\"foo\"], daiv2.aliases=[\"bar\", \"baz\"], daiv3.aliases=[\"latest\"]} Note that alias \"latest\" was deleted from daiv1 and alias \"goo\" was deleted from daiv3.  Example 2 - add alias latest to another InternalDAIVersion: - InternalDAIVersions: {daiv1.aliases=[\"latest\", \"foo\"], daiv2.aliases=[\"bar\", \"baz\"], daiv3.aliases=[\"goo\"]} - AssignAliases(daiv3, aliases=[\"goo\", \"latest\"]) - InternalDAIVersions: {daiv1.aliases=[\"foo\"], daiv2.aliases=[\"bar\", \"baz\"], daiv3.aliases=[\"goo\", \"latest\"]} Note that alias \"latest\" was deleted from daiv1 and alias \"goo\" remained in the daiv3.  Example 3 - assign multiple aliases which affects aliases of multiple InternalDAIVersions: - InternalDAIVersions: {daiv1.aliases=[\"latest\", \"foo\"], daiv2.aliases=[\"bar\", \"baz\"], daiv3.aliases=[\"goo\"]} - AssignAliases(daiv3, aliases=[\"latest\", \"bar\"]) - InternalDAIVersions: {daiv1.aliases=[\"foo\"], daiv2.aliases=[\"baz\"], daiv3.aliases=[\"latest\", \"bar\"]} Note that - alias \"latest\" was deleted from daiv1 - alias \"latest\" was added to daiv3 - alias \"bar\" was deleted from daiv2 - alias \"goo\" was deleted from daiv3  (-- api-linter: core::0136::http-uri-suffix=disabled     aip.dev/not-precedent: Google linter incorrectly requires URI suffix \"assignInternalDaiVersionAliases\" --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.internal_dai_version_service_assign_internal_dai_version_aliases(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (V1AssignInternalDAIVersionAliasesRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1AssignInternalDAIVersionAliasesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.internal_dai_version_service_assign_internal_dai_version_aliases_endpoint.call_with_http_info(**kwargs)

    def internal_dai_version_service_create_internal_dai_version(
        self,
        internal_dai_version_id,
        internal_dai_version,
        **kwargs
    ):
        """Creates a new InternalDAIVersion. (-- api-linter: core::0133::http-uri-parent=disabled     aip.dev/not-precedent: InternalDAIVersion has no parent (it's a top-level resource) --) (-- api-linter: core::0133::method-signature=disabled     aip.dev/not-precedent: InternalDAIVersion has no parent (it's a top-level resource) --)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.internal_dai_version_service_create_internal_dai_version(internal_dai_version_id, internal_dai_version, async_req=True)
        >>> result = thread.get()

        Args:
            internal_dai_version_id (str): Specify the InternalDAIVersion resource ID, which will become a part of the InternalDAIVersion resource name.  It must: - be in semver format (but allowing more segments than only the standard three segments Major.Minor.Patch) - contain max 63 characters  Examples: \"1.10.3\", \"1.10.3-alpha\", \"1.10.3.2\", \"1.10.3.2-alpha\"
            internal_dai_version (V1InternalDAIVersion): The InternalDAIVersion resource to create.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1CreateInternalDAIVersionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['internal_dai_version_id'] = \
            internal_dai_version_id
        kwargs['internal_dai_version'] = \
            internal_dai_version
        return self.internal_dai_version_service_create_internal_dai_version_endpoint.call_with_http_info(**kwargs)

    def internal_dai_version_service_delete_internal_dai_version(
        self,
        name_6,
        **kwargs
    ):
        """Deletes a InternalDAIVersion.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.internal_dai_version_service_delete_internal_dai_version(name_6, async_req=True)
        >>> result = thread.get()

        Args:
            name_6 (str): InternalDAIVersion resource name.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_6'] = \
            name_6
        return self.internal_dai_version_service_delete_internal_dai_version_endpoint.call_with_http_info(**kwargs)

    def internal_dai_version_service_get_internal_dai_version(
        self,
        name_13,
        **kwargs
    ):
        """Returns a specific InternalDAIVersion.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.internal_dai_version_service_get_internal_dai_version(name_13, async_req=True)
        >>> result = thread.get()

        Args:
            name_13 (str): InternalDAIVersion resource name.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1GetInternalDAIVersionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_13'] = \
            name_13
        return self.internal_dai_version_service_get_internal_dai_version_endpoint.call_with_http_info(**kwargs)

    def internal_dai_version_service_list_internal_dai_versions(
        self,
        **kwargs
    ):
        """Returns a collection of InternalDAIVersions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.internal_dai_version_service_list_internal_dai_versions(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page_size (int): Maximum number of InternalDAIVersions to return in a response. If unspecified (or set to 0), at most 50 InternalDAIVersions will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.. [optional]
            page_token (str): Leave unset to receive the initial page. To list any subsequent pages use the value of 'next_page_token' returned from the ListInternalDAIVersionsResponse.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1ListInternalDAIVersionsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.internal_dai_version_service_list_internal_dai_versions_endpoint.call_with_http_info(**kwargs)

    def internal_dai_version_service_update_internal_dai_version(
        self,
        internal_dai_version_name,
        update_mask,
        internal_dai_version,
        **kwargs
    ):
        """Updates a InternalDAIVersion.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.internal_dai_version_service_update_internal_dai_version(internal_dai_version_name, update_mask, internal_dai_version, async_req=True)
        >>> result = thread.get()

        Args:
            internal_dai_version_name (str): InternalDAIVersion resource name. For example: internalDAIVersions/1.10.1.2
            update_mask (str): The list of paths referencing which fields to update. Update mask must be non-empty.  Allowed field paths are: {deprecated, image, image_pull_policy, image_pull_secrets, gpu_resource_name, data_directory_storage_class, annotations}.  To update all allowed fields, specify exactly one path with value \"*\".
            internal_dai_version (InternalDAIVersionResource): InternalDAIVersion resource.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1UpdateInternalDAIVersionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['internal_dai_version_name'] = \
            internal_dai_version_name
        kwargs['update_mask'] = \
            update_mask
        kwargs['internal_dai_version'] = \
            internal_dai_version
        return self.internal_dai_version_service_update_internal_dai_version_endpoint.call_with_http_info(**kwargs)

