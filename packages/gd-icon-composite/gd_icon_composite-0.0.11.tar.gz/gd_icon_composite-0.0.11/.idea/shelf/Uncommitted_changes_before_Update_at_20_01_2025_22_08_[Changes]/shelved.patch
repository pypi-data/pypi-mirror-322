Index: src/gd_icon_composite/icon_composite.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport plistlib\r\n\r\nimport numpy as np\r\nfrom PIL import Image, ImageChops\r\n\r\n\r\nformal_icon_names = {\r\n    \"cube\": \"player\",\r\n    \"ship\": \"ship\",\r\n    \"ball\": \"player_ball\",\r\n    \"ufo\": \"bird\",\r\n    \"wave\": \"dart\",\r\n    \"robot\": \"robot\",\r\n    \"spider\": \"spider\",\r\n    \"swing\": \"swing\",\r\n    \"jetpack\": \"jetpack\"\r\n}\r\n\r\ndef layer_extract(src: Image.Image, plist: dict, gamemode_type: str, icon_number: int, p_layer: str = \"\", *,\r\n                  icon_part: str = \"\", upscale: bool = False):\r\n    \"\"\"extracts a layer for an icon from the specified spritesheet and its associated plist\"\"\"\r\n    try:\r\n\r\n        slice_indexes = plist[\"frames\"][f\"{gamemode_type}_{icon_number:0>2}\"\r\n                                        f\"{icon_part}{p_layer}_001.png\"][\"textureRect\"]\r\n        slice_indexes = slice_indexes.replace(\"{\", \"\").replace(\"}\", \"\").split(\",\")\r\n        slice_indexes[0] = int(slice_indexes[0])\r\n        slice_indexes[1] = int(slice_indexes[1])\r\n\r\n        if plist[\"frames\"][f\"{gamemode_type}_{icon_number:0>2}{icon_part}{p_layer}_001.png\"][\"textureRotated\"] is True:\r\n            y_size = int(slice_indexes[2])\r\n            x_size = int(slice_indexes[3])\r\n            slice_indexes[2] = slice_indexes[0] + x_size\r\n            slice_indexes[3] = slice_indexes[1] + y_size\r\n        else:\r\n            y_size = int(slice_indexes[3])\r\n            x_size = int(slice_indexes[2])\r\n            slice_indexes[2] = slice_indexes[0] + x_size\r\n            slice_indexes[3] = slice_indexes[1] + y_size\r\n\r\n        icon_layer = src.crop(slice_indexes)\r\n\r\n        if plist[\"frames\"][f\"{gamemode_type}_{icon_number:0>2}{icon_part}{p_layer}_001.png\"][\"textureRotated\"] is True:\r\n            icon_layer = icon_layer.rotate(90, expand=True)\r\n\r\n        if upscale is True:\r\n            icon_layer = icon_layer.resize((icon_layer.width * 2, icon_layer.height * 2), resample=Image.BOX)\r\n\r\n    except KeyError as error:\r\n        if p_layer == \"_extra\":\r\n            icon_layer = None\r\n        else:\r\n            raise error\r\n\r\n    return icon_layer\r\n\r\n\r\ndef layer_color(layer: Image, color_rgba: tuple):\r\n    \"\"\"\r\n    colors a greyscale rgba image with the given color by multplying the image with said color\r\n\r\n    img = (img_r * r, img_g * g, img_b * b, img_a * a)\r\n\r\n    :param layer: the layer you want to color\r\n    :param color_rgba: the color you want to use\r\n    :return: the colored layer\r\n    \"\"\"\r\n    color = Image.new(\"RGBA\", layer.size, color_rgba)\r\n\r\n    layer = ImageChops.multiply(layer, color)\r\n\r\n    return layer\r\n\r\n\r\ndef add_to_center(final_img: Image.Image, layer: Image.Image,\r\n                  offset: tuple[int, int], x_offset: int = 0, y_offset: int = 0):\r\n    \"\"\"\r\n    alpha composites a layer into the center of the final_img\r\n\r\n    :param final_img: image to modify\r\n    :param layer: layer to be added to the final_img\r\n    :param offset: offset from the center of the final_img\r\n    :param x_offset: offsets the center in the x-axis\r\n    :param y_offset: offsets the center in the y-axis\r\n    :return:\r\n    \"\"\"\r\n    img_w, img_h = layer.size\r\n    bg_w, bg_h = final_img.size\r\n    offset = ((bg_w - img_w) // 2 + offset[0] + x_offset, (bg_h - img_h) // 2 - offset[1] + y_offset)\r\n\r\n    final_img.alpha_composite(layer, dest=offset)\r\n\r\n\r\n# ==================================================================================================================== #\r\n\r\n# These require the parts to already be composited onto an image of the same size\r\n\r\n\r\ndef add_robot_parts_old(head: Image.Image, ltop: Image.Image, lbot: Image.Image, foot: Image.Image,\r\n                        size: tuple[int, int], is_glow: bool = False, center_offset: tuple = (0, 0)):\r\n    \"\"\"\r\n    Note: the center offset does not work as intended, preferably leave it at the default\r\n    \"\"\"\r\n    robot = Image.new(\"RGBA\", size, (255, 255, 255, 0))\r\n\r\n    # back leg\r\n    darken = 0.6\r\n\r\n    add_to_center(robot, lbot.rotate(36, resample=Image.BICUBIC, expand=True), (-30 + center_offset[0], -50 + center_offset[1]))  # robot _03\r\n\r\n    add_to_center(robot, ltop.rotate(-65, resample=Image.BICUBIC, expand=True), (-36 + center_offset[0], -22 + center_offset[1]))  # robot _02\r\n\r\n    add_to_center(robot, foot, (-16 + center_offset[0], -64 + center_offset[1]))  # robot _04\r\n\r\n    if not is_glow:\r\n        robot = layer_color(robot, (int(darken * 255), int(darken * 255), int(darken * 255), 255))\r\n\r\n    # head\r\n    robot.alpha_composite(head)  # robot _01 it's here where the offset fails because I can't be bothered to write it\r\n\r\n    # front leg\r\n    add_to_center(robot, lbot.rotate(43, resample=Image.BICUBIC, expand=True), (-22 + center_offset[0], -45 + center_offset[1]))  # robot _03\r\n\r\n    add_to_center(robot, ltop.rotate(-45.5, resample=Image.BICUBIC, expand=True), (-29 + center_offset[0], -26 + center_offset[1]))  # robot _02\r\n\r\n    add_to_center(robot, foot, (6 + center_offset[0], -64 + center_offset[1]))  # robot _04\r\n\r\n    return robot\r\n\r\n\r\ndef add_robot_parts(head: Image.Image, ltop: Image.Image, lbot: Image.Image, foot: Image.Image, size: tuple[int, int],\r\n                    is_glow: bool = False, center_offset: tuple = (0, 0)):\r\n    if is_glow and head is None:  # what is this for???\r\n        return None\r\n\r\n    # these offsets and what not were taken directly from Robot_AnimDesc.plist\r\n    robot = Image.new(\"RGBA\", size, (255, 255, 255, 0))\r\n\r\n    # back leg\r\n    darken = 0.6\r\n    const = 4.1\r\n\r\n    add_to_center(robot, lbot.rotate(29.672, resample=Image.BICUBIC, expand=True),\r\n                  (int(-7.175 * const) + center_offset[0], int(-6.875 * const) + center_offset[1]))  # robot _03\r\n\r\n    add_to_center(robot, ltop.rotate(-57.968, resample=Image.BICUBIC, expand=True),\r\n                  (int(-7.175 * const) + center_offset[0], int(-1.025 * const) + center_offset[1]))  # robot _02\r\n\r\n    add_to_center(robot, foot,\r\n                  (int(-2.675 * const) + center_offset[0], int(-10.9 * const) + center_offset[1]))  # robot _04\r\n\r\n    if not is_glow:\r\n        robot = layer_color(robot, (int(darken * 255), int(darken * 255), int(darken * 255), 255))\r\n\r\n    # head\r\n    add_to_center(robot, head.rotate(2.285, resample=Image.BICUBIC, expand=True),\r\n                  (int(0.25 * const) + center_offset[0], int(5.5 * const) + center_offset[1]))  # robot _01\r\n\r\n    # front leg\r\n    add_to_center(robot, lbot.rotate(42.941, resample=Image.BICUBIC, expand=True),\r\n                  (int(-4.525 * const) + center_offset[0], int(-6.625 * const) + center_offset[1]))  # robot _03\r\n\r\n    add_to_center(robot, ltop.rotate(-42.501, resample=Image.BICUBIC, expand=True),\r\n                  (int(-5.75 * const) + center_offset[0], int(-2.15 * const) + center_offset[1]))  # robot _02\r\n\r\n    add_to_center(robot, foot,\r\n                  (int(2.275 * const) + center_offset[0], int(-10.9 * const) + center_offset[1]))  # robot _04\r\n\r\n    return robot\r\n\r\n\r\ndef add_spider_parts(head: Image.Image, front: Image.Image, back1: Image.Image, back2: Image.Image,\r\n                     size: tuple[int, int], is_glow: bool = False, center_offset: tuple = (0, 0)):\r\n    if is_glow and head is None:\r\n        return None\r\n\r\n    # these offsets and what not were taken directly from Spider_AnimDesc.plist\r\n    spider = Image.new(\"RGBA\", size, (255, 255, 255, 0))\r\n\r\n    # left legs\r\n    darken = 0.6\r\n    const = 3.6\r\n\r\n    add_to_center(spider, front.resize((int(front.width * 0.88), int(front.height * 0.88))),\r\n                  (int(5.625 * const) + center_offset[0], int(-7.5 * const) + center_offset[1]))  # spider _02\r\n\r\n    add_to_center(spider, front.resize((int(front.width * 0.88), int(front.height * 0.88)))\r\n                  .transpose(Image.FLIP_LEFT_RIGHT),\r\n                  (int(16 * const) + center_offset[0], int(-7.5 * const) + center_offset[1]))  # spider _02\r\n\r\n    if not is_glow:\r\n        spider = layer_color(spider, (int(darken * 255), int(darken * 255), int(darken * 255), 255))\r\n\r\n    # right legs\r\n    # back leg\r\n    add_to_center(spider, back2.rotate(7.682, resample=Image.BICUBIC, expand=True),\r\n                  (int(-5 * const) + center_offset[0], int(0.125 * const) + center_offset[1]))  # spider _04\r\n\r\n    # head\r\n    add_to_center(spider, head,\r\n                  (int(0.625 * const) + center_offset[0], int(4.5 * const) + center_offset[1]))  # spider _01\r\n\r\n    # front leg\r\n    add_to_center(spider, back1.rotate(-38.963, resample=Image.BICUBIC, expand=True),\r\n                  (int(-14.825 * const) + center_offset[0], int(-7.7 * const) + center_offset[1]))  # spider _03\r\n\r\n    add_to_center(spider, front,\r\n                  (int(-2.75 * const) + center_offset[0], int(-6.625 * const) + center_offset[1]))  # spider _02\r\n\r\n    return spider\r\n\r\n\r\n# ==================================================================================================================== #\r\n\r\n\r\ndef process_offset(offset_str: str, icon_gamemode: str, p_layer: str, upscale: bool):\r\n    \"\"\"\r\n    Converts a raw offset string (as found in the plist) into a tuple of integers\r\n\r\n    This is used to handle cases such as an empty string (the game allows those), floating point values (they should\r\n    not be allowed, but there are a couple sprites that have them in the base game, and the games doesn't crash beacuse\r\n    of it), and a special offset for ufo domes (because that's apparently a thing)\r\n\r\n    The upscale bool is used for upscaled, medium resolution sprites. This because some functions, such as add robot and\r\n    spider parts, are only programmed to work on uhd textures, therefore you're required to upscale medium textures to\r\n    work with those (if you instead want to work with low resolution sprites, please reconsider your life choices)\r\n    \"\"\"\r\n    offset = offset_str.replace(\"{\", \"\").replace(\"}\", \"\").split(\",\")\r\n\r\n    # I've only had to handle this because of texture packs :'v\r\n    # surprised that the game doesn't crash with this\r\n    # turns out the game uses a (0, 0) offset by default, so it allows for an empty string, this is kind of annoying\r\n    if offset[0] == \"\":\r\n        offset = (0, 0)\r\n    else:\r\n        # oh, and this int(float()) thing has to do with not allowing floats on sprite offsets\r\n        # since I assumed there would be some texture packs that would do this without realizing it back when I made\r\n        # it support other texture packs, but turns out there are 3 icons on the base game that have floats in some\r\n        # of their sprites, and all of them are 3x3 transparent pixels. I love robtop games\r\n        offset = (int(float(offset[0])), int(float(offset[1])))\r\n\r\n    if upscale is True:\r\n        offset = (offset[0] * 2, offset[1] * 2)\r\n\r\n    # turns out the damn ufo domes have a default value too, what the hell man\r\n    # I don't know what I'm doing anymore really\r\n    if icon_gamemode == \"bird\" and p_layer == \"_3\":\r\n        offset = (offset[0], offset[1] - 59)\r\n\r\n    return offset\r\n\r\n\r\n# ==================================================================================================================== #\r\n\r\n# Sheetless icon compositing\r\n\r\n# __\"icon\"\r\n#  |\r\n#  |__\"_01\"\r\n#  | |\r\n#  | |__\"\"\r\n#  | |__\"_2\"\r\n#  | |__\"_extra\" <- \"_02\", \"_03\", and \"_04\" don't have this layer\r\n#  | |__\"_3\"     <- ufo only\r\n#  | |__\"_glow\"\r\n#  |\r\n#  |__\"_02\"\r\n#  | | ...\r\n#  |\r\n#  |__\"_03\"\r\n#  | | ...\r\n#  |\r\n#  |__\"_04\"\r\n#    | ...\r\n\r\ndef make_part(images: dict[str, Image.Image], offsets: dict, size: tuple,\r\n              p1_color: tuple, p2_color: tuple, glow_color: tuple, extra_color: tuple, *,\r\n              merge_glow: bool, x_offset: int = 0, y_offset: int = 0):\r\n    bg_img = Image.new(\"RGBA\", size, (255, 255, 255, 0))\r\n    bg_img_glow = bg_img.copy()\r\n\r\n    if offsets.get(\"dome\") is not None:\r\n        add_to_center(bg_img, images[\"dome\"], offsets[\"dome\"], x_offset=x_offset, y_offset=y_offset)\r\n\r\n    add_to_center(bg_img, layer_color(images[\"p2\"], p2_color), offsets[\"p2\"], x_offset=x_offset, y_offset=y_offset)\r\n\r\n    add_to_center(bg_img, layer_color(images[\"p1\"], p1_color), offsets[\"p1\"], x_offset=x_offset, y_offset=y_offset)\r\n\r\n    if offsets.get(\"extra\") is not None:\r\n        add_to_center(bg_img, layer_color(images[\"extra\"], extra_color), offsets[\"extra\"],\r\n                      x_offset=x_offset, y_offset=y_offset)\r\n\r\n    add_to_center(bg_img_glow, layer_color(images[\"glow\"], glow_color), offsets[\"glow\"],\r\n                  x_offset=x_offset, y_offset=y_offset)\r\n\r\n    if merge_glow:\r\n        return Image.alpha_composite(bg_img_glow, bg_img)\r\n\r\n    return bg_img, bg_img_glow\r\n\r\n\r\ndef make_icon(icon_gamemode: str, images: dict[str, dict[str, Image.Image]], offsets: dict, size: tuple,\r\n              p1_color: tuple, p2_color: tuple, glow_color: tuple, extra_color: tuple, *, merge_glow: bool = True):\r\n    \"\"\"\r\n    renders an icon given its layers and offsets, the dict structure should be as follows:\r\n\r\n    - images / offsets\r\n        - \"01\":\r\n            - \"p1\"\r\n            - \"p2\"\r\n            - \"extra\" <- \"_02\", \"_03\", and \"_04\" don't have this layer (though this isn't checked)\r\n            - \"dome\"  <- ufo only (will not throw error if the gamemode isn't ufo yet a dome is defined)\r\n            - \"glow\"\r\n        - \"02\"\r\n        - \"03\"\r\n        - \"04\"\r\n\r\n    the values to the keys in the image dict should be PIL.Image.Image objects,\r\n    and the values to the keys in the offsets dict should be a tuple of 2 integers\r\n    \"\"\"\r\n\r\n    #TODO: add center_offset to this function for completeness :pppppp\r\n\r\n    if icon_gamemode not in {\"player\", \"ship\", \"player_ball\", \"bird\", \"dart\", \"robot\", \"spider\", \"swing\", \"jetpack\"}:\r\n\r\n        did_you_mean = f\". Did you mean '{formal_icon_names[icon_gamemode]}' instead?\" \\\r\n            if formal_icon_names.get(icon_gamemode) is not None else \".\"\r\n\r\n        raise ValueError(f\"icon of gamemode {icon_gamemode} is not supported{did_you_mean}\")\r\n\r\n    if icon_gamemode == \"bird\":\r\n        offsets[\"01\"][\"dome\"] = (offsets[\"01\"][\"dome\"][0], offsets[\"01\"][\"dome\"][1] + 59)\r\n\r\n        icon, glow = make_part(images[\"01\"], offsets[\"01\"], size, p1_color, p2_color, glow_color, extra_color,\r\n                               merge_glow=False, y_offset=int(images[\"01\"][\"dome\"].height / 4))\r\n\r\n    elif icon_gamemode == \"robot\":\r\n        robot_head, robot_head_glow = make_part(images[\"01\"], offsets[\"01\"], size, p1_color, p2_color, glow_color,\r\n                                                extra_color, merge_glow=False)\r\n        robot_leg1, robot_leg1_glow = make_part(images[\"02\"], offsets[\"02\"], size, p1_color, p2_color, glow_color,\r\n                                                extra_color, merge_glow=False)\r\n        robot_leg2, robot_leg2_glow = make_part(images[\"03\"], offsets[\"03\"], size, p1_color, p2_color, glow_color,\r\n                                                extra_color, merge_glow=False)\r\n        robot_leg3, robot_leg3_glow = make_part(images[\"04\"], offsets[\"04\"], size, p1_color, p2_color, glow_color,\r\n                                                extra_color, merge_glow=False)\r\n\r\n        icon, glow = add_robot_parts(robot_head, robot_leg1, robot_leg2, robot_leg3, size), \\\r\n            add_robot_parts(robot_head_glow, robot_leg1_glow, robot_leg2_glow, robot_leg3_glow, size, True)\r\n\r\n    elif icon_gamemode == \"spider\":\r\n        spider_head, spider_head_glow = make_part(images[\"01\"], offsets[\"01\"], size, p1_color, p2_color, glow_color,\r\n                                                  extra_color, merge_glow=False)\r\n        spider_leg1, spider_leg1_glow = make_part(images[\"02\"], offsets[\"02\"], size, p1_color, p2_color, glow_color,\r\n                                                  extra_color, merge_glow=False)\r\n        spider_leg2, spider_leg2_glow = make_part(images[\"03\"], offsets[\"03\"], size, p1_color, p2_color, glow_color,\r\n                                                  extra_color, merge_glow=False)\r\n        spider_leg3, spider_leg3_glow = make_part(images[\"04\"], offsets[\"04\"], size, p1_color, p2_color, glow_color,\r\n                                                  extra_color, merge_glow=False)\r\n\r\n        icon, glow = add_spider_parts(spider_head, spider_leg1, spider_leg2, spider_leg3, size), add_spider_parts(\r\n            spider_head_glow, spider_leg1_glow, spider_leg2_glow, spider_leg3_glow, size, True)\r\n\r\n    else:\r\n        icon, glow = make_part(images[\"01\"], offsets[\"01\"], size, p1_color, p2_color, glow_color, extra_color,\r\n                               merge_glow=False)\r\n\r\n    if merge_glow:\r\n        return Image.alpha_composite(glow, icon)\r\n\r\n    return icon, glow\r\n\r\n\r\n# ==================================================================================================================== #\r\n\r\n# Composite icons from spritesheet\r\n\r\n\r\ndef add_layer_to_img(final_img: Image.Image, src: Image.Image, plist: dict, icon_gamemode: str,\r\n                     icon_number: int, color: tuple, p_layer: str = \"\", *, icon_part: str = \"\",\r\n                     x_offset: int = 0, y_offset: int = 0, upscale: bool = False):\r\n    layer = layer_extract(src, plist, icon_gamemode, icon_number, p_layer, icon_part=icon_part, upscale=upscale)\r\n\r\n    if layer is not None:\r\n        layer = layer_color(layer, color)\r\n\r\n        # gets the offset\r\n        offset = plist[\"frames\"][f\"{icon_gamemode}_{icon_number:0>2}{icon_part}{p_layer}_001.png\"][\"spriteOffset\"]\r\n\r\n        offset = process_offset(offset, icon_gamemode, p_layer, upscale)\r\n\r\n        add_to_center(final_img, layer, offset, x_offset, y_offset)\r\n\r\n\r\ndef get_icon_and_glow(icon_name: str, icon_number: int, p1_color: tuple, p2_color: tuple, glow_color: tuple,\r\n                      source_02: Image.Image, plist_02: dict, source_glow: Image.Image, plist_glow: dict,\r\n                      use_glow: bool, size: tuple = (220, 220), icon_part: str = \"\", *, upscale: bool = False,\r\n                      center_offset: tuple = (0, 0)):\r\n    icon = Image.new('RGBA', size, (255, 255, 255, 0))\r\n\r\n    # adds an extra offset if the icon is an ufo because of the dome\r\n    if icon_name == \"bird\":\r\n        ufo_offset = int(layer_extract(source_02, plist_02, icon_name, icon_number, \"_3\", upscale=upscale).height / 2.5)\r\n        # ufo_offset = 0\r\n    else:\r\n        ufo_offset = 0\r\n\r\n    # glow layer\r\n    if use_glow:\r\n        glow = Image.new('RGBA', size, (255, 255, 255, 0))\r\n        add_layer_to_img(glow, source_glow, plist_glow, icon_name, icon_number, glow_color, \"_glow\",\r\n                         x_offset=center_offset[0], y_offset=ufo_offset + center_offset[1], icon_part=icon_part,\r\n                         upscale=upscale)\r\n    else:\r\n        glow = None\r\n\r\n    # dome\r\n    if ufo_offset != 0:\r\n        add_layer_to_img(icon, source_02, plist_02, \"bird\", icon_number, (255, 255, 255, 255), \"_3\",\r\n                         x_offset=center_offset[0], y_offset=-ufo_offset + center_offset[1], upscale=upscale)\r\n\r\n    # p2 layer\r\n    add_layer_to_img(icon, source_02, plist_02, icon_name, icon_number, p2_color, \"_2\",\r\n                     x_offset=center_offset[0], y_offset=ufo_offset + center_offset[1], icon_part=icon_part,\r\n                     upscale=upscale)\r\n\r\n    # p1 layer\r\n    add_layer_to_img(icon, source_02, plist_02, icon_name, icon_number, p1_color,\r\n                     x_offset=center_offset[0], y_offset=ufo_offset + center_offset[1], icon_part=icon_part,\r\n                     upscale=upscale)\r\n\r\n    # extra layer (doesn't do anything if there's no extra layer)\r\n    add_layer_to_img(icon, source_02, plist_02, icon_name, icon_number, (255, 255, 255, 255), \"_extra\",\r\n                     x_offset=center_offset[0], y_offset=ufo_offset + center_offset[1], icon_part=icon_part,\r\n                     upscale=upscale)\r\n\r\n    return icon, glow\r\n\r\n\r\ndef make_robot(robot_id: int, p1_color: tuple, p2_color: tuple, glow_color: tuple, use_glow: bool,\r\n               source_02: Image.Image, plist_02: dict, size: tuple = (220, 220), *, alt_pose: bool = False,\r\n               upscale: bool = False, center_offset: tuple = (0, 0)):\r\n    robot_head, robot_head_glow = get_icon_and_glow(\"robot\", robot_id, p1_color, p2_color, glow_color,\r\n                                                    source_02, plist_02, source_02, plist_02, use_glow, size, \"_01\",\r\n                                                    upscale=upscale)\r\n    robot_leg1, robot_leg1_glow = get_icon_and_glow(\"robot\", robot_id, p1_color, p2_color, glow_color,\r\n                                                    source_02, plist_02, source_02, plist_02, use_glow, size, \"_02\",\r\n                                                    upscale=upscale)\r\n    robot_leg2, robot_leg2_glow = get_icon_and_glow(\"robot\", robot_id, p1_color, p2_color, glow_color,\r\n                                                    source_02, plist_02, source_02, plist_02, use_glow, size, \"_03\",\r\n                                                    upscale=upscale)\r\n    robot_leg3, robot_leg3_glow = get_icon_and_glow(\"robot\", robot_id, p1_color, p2_color, glow_color,\r\n                                                    source_02, plist_02, source_02, plist_02, use_glow, size, \"_04\",\r\n                                                    upscale=upscale)\r\n\r\n    if alt_pose:\r\n        return add_robot_parts_old(robot_head, robot_leg1, robot_leg2, robot_leg3, size), \\\r\n            add_robot_parts_old(robot_head_glow, robot_leg1_glow, robot_leg2_glow, robot_leg3_glow, size, True)\r\n    else:\r\n        return add_robot_parts(robot_head, robot_leg1, robot_leg2, robot_leg3, size), \\\r\n            add_robot_parts(robot_head_glow, robot_leg1_glow, robot_leg2_glow, robot_leg3_glow, size, True)\r\n\r\n\r\ndef make_spider(spider_id: int, p1_color: tuple, p2_color: tuple, glow_color: tuple, use_glow: bool,\r\n                source_02: Image.Image, plist_02: dict, size: tuple = (220, 220), *,\r\n                upscale: bool = False, center_offset: tuple = (0, 0)):\r\n    spider_head, spider_head_glow = get_icon_and_glow(\"spider\", spider_id, p1_color, p2_color, glow_color,\r\n                                                      source_02, plist_02, source_02, plist_02, use_glow, size, \"_01\",\r\n                                                      upscale=upscale)\r\n    spider_leg1, spider_leg1_glow = get_icon_and_glow(\"spider\", spider_id, p1_color, p2_color, glow_color,\r\n                                                      source_02, plist_02, source_02, plist_02, use_glow, size, \"_02\",\r\n                                                      upscale=upscale)\r\n    spider_leg2, spider_leg2_glow = get_icon_and_glow(\"spider\", spider_id, p1_color, p2_color, glow_color,\r\n                                                      source_02, plist_02, source_02, plist_02, use_glow, size, \"_03\",\r\n                                                      upscale=upscale)\r\n    spider_leg3, spider_leg3_glow = get_icon_and_glow(\"spider\", spider_id, p1_color, p2_color, glow_color,\r\n                                                      source_02, plist_02, source_02, plist_02, use_glow, size, \"_04\",\r\n                                                      upscale=upscale)\r\n\r\n    return add_spider_parts(spider_head, spider_leg1, spider_leg2, spider_leg3, size), add_spider_parts(\r\n        spider_head_glow, spider_leg1_glow, spider_leg2_glow, spider_leg3_glow, size, True)\r\n\r\n\r\ndef make_icon_from_spritesheet(icon_name: str, icon_id: int, p1_color: tuple, p2_color: tuple, glow_color: tuple,\r\n                               source_02: Image.Image, plist_02: dict, source_glow: Image.Image, plist_glow: dict,\r\n                               use_glow: bool,\r\n                               size: tuple = (220, 220), *, merge_glow: bool = True, alt_pose_robot: bool = False,\r\n                               upscale: bool = False, center_offset: tuple = (0, 0)):\r\n    if icon_name == \"robot\":\r\n        icon, glow = make_robot(icon_id, p1_color, p2_color, glow_color, use_glow, source_02, plist_02, size,\r\n                                alt_pose=alt_pose_robot, upscale=upscale, center_offset=center_offset)\r\n    elif icon_name == \"spider\":\r\n        icon, glow = make_spider(icon_id, p1_color, p2_color, glow_color, use_glow, source_02, plist_02, size,\r\n                                 upscale=upscale, center_offset=center_offset)\r\n    else:\r\n        icon, glow = get_icon_and_glow(icon_name, icon_id, p1_color, p2_color, glow_color,\r\n                                       source_02, plist_02, source_glow, plist_glow, use_glow, size,\r\n                                       upscale=upscale, center_offset=center_offset)\r\n\r\n    if merge_glow:\r\n        return Image.alpha_composite(glow, icon) if glow is not None else icon\r\n\r\n    else:\r\n        return icon, glow\r\n\r\nclass Icon:\r\n    def __init__(self, gamemode: str, sprite_id: int,\r\n                 p1_color: tuple[int, int, int, int], p2_color: tuple[int, int, int, int], glow_color: tuple[int, int, int, int],\r\n                 use_glow: bool, texture_quality: str = \"uhd\"):\r\n        self.gamemode = gamemode\r\n        if gamemode in formal_icon_names.values():\r\n            self.gamemode_name = self.gamemode\r\n        else:\r\n            try:\r\n                self.gamemode_name = formal_icon_names[self.gamemode]\r\n            except KeyError:\r\n                raise ValueError(f\"gamemode `{gamemode}` is not valid\")\r\n\r\n        self.id = sprite_id\r\n\r\n        self.p1= p1_color\r\n        self.p2 = p2_color\r\n        self.glow = glow_color\r\n\r\n        self.use_glow = use_glow\r\n\r\n        file_name = f\"{self.gamemode_name}_{sprite_id:0>2}{'-' if texture_quality != '' else ''}{texture_quality}\"\r\n\r\n        source_spritesheet = (Image.open(os.path.join(os.path.dirname(__file__), \"icons\", f\"{file_name}.png\"))\r\n                              .convert(\"RGBA\"))\r\n\r\n        with open(os.path.join(os.path.dirname(__file__), \"icons\", f\"{file_name}.plist\"), \"rb\") as plist_file:\r\n            plist = plistlib.load(plist_file)\r\n\r\n        self.source = source_spritesheet\r\n        self.plist = plist\r\n\r\n    def render(self, source_size: tuple = (220, 220), center_offset: tuple = (0, 0), merge_glow: bool = True):\r\n        return make_icon_from_spritesheet(self.gamemode_name, self.id, self.p1, self.p2, self.glow,\r\n                                          self.source, self.plist, self.source, self.plist, self.use_glow,\r\n                                          source_size, center_offset=center_offset, merge_glow=merge_glow)\r\n\r\n    def change_palette(self, p1_color: tuple[int, int, int] = None,\r\n                       p2_color: tuple[int, int, int] = None,\r\n                       glow_color: tuple[int, int, int] = None):\r\n\r\n        if p1_color is not None:\r\n            self.p1 = p1_color\r\n\r\n        if p2_color is not None:\r\n            self.p2 = p2_color\r\n\r\n        if glow_color is not None:\r\n            self.glow = glow_color\r\n\r\n\r\nclass Icon22:\r\n    def __init__(self, spritesheet: Image.Image, plist_dict: dict,\r\n                 p1_color: tuple[int, int, int, int], p2_color: tuple[int, int, int, int], glow_color: tuple[int, int, int, int],\r\n                 use_glow: bool):\r\n\r\n        gamemode, icon_id = plist_dict[\"metadata\"][\"realTextureFileName\"].split(\"/\")[1].split(\".\")[0].split(\"-\")[0].rsplit(\"_\", maxsplit=1)\r\n\r\n        self.gamemode_name = gamemode\r\n        self.id = int(icon_id)\r\n\r\n        self.p1 = p1_color\r\n        self.p2 = p2_color\r\n        self.glow = glow_color\r\n\r\n        self.use_glow = use_glow\r\n\r\n        self.source = spritesheet\r\n        self.plist = plist_dict\r\n\r\n    def render(self, source_size: tuple = (220, 220), center_offset: tuple = (0, 0), merge_glow: bool = True):\r\n        return make_icon_from_spritesheet(self.gamemode_name, self.id, self.p1, self.p2, self.glow,\r\n                                          self.source, self.plist, self.source, self.plist, self.use_glow,\r\n                                          source_size, center_offset=center_offset, merge_glow=merge_glow)\r\n\r\n    def change_palette(self, p1_color: tuple[int, int, int] = None,\r\n                       p2_color: tuple[int, int, int] = None,\r\n                       glow_color: tuple[int, int, int] = None):\r\n\r\n        if p1_color is not None:\r\n            self.p1 = p1_color\r\n\r\n        if p2_color is not None:\r\n            self.p2 = p2_color\r\n\r\n        if glow_color is not None:\r\n            self.glow = glow_color\r\n\r\n\r\nclass IconSet:\r\n\r\n    def __init__(self, cube: int, ship: int, ball: int, ufo: int, wave: int, robot: int, spider: int, swing: int,\r\n                 jetpack: int,\r\n                 p1_color: tuple[int, int, int, int], p2_color: tuple[int, int, int, int], glow_color: tuple[int, int, int, int],\r\n                 use_glow: bool, texture_quality: str = \"uhd\", **kwargs):\r\n\r\n        self.cube = Icon(\"cube\", cube, p1_color, p2_color, glow_color, use_glow, texture_quality)\r\n        self.ship = Icon(\"ship\", ship, p1_color, p2_color, glow_color, use_glow, texture_quality)\r\n        self.ball = Icon(\"ball\", ball, p1_color, p2_color, glow_color, use_glow, texture_quality)\r\n        self.ufo = Icon(\"ufo\", ufo, p1_color, p2_color, glow_color, use_glow, texture_quality)\r\n        self.wave = Icon(\"wave\", wave, p1_color, p2_color, glow_color, use_glow, texture_quality)\r\n        self.robot = Icon(\"robot\", robot, p1_color, p2_color, glow_color, use_glow, texture_quality)\r\n        self.spider = Icon(\"spider\", spider, p1_color, p2_color, glow_color, use_glow, texture_quality)\r\n        self.swing = Icon(\"swing\", swing, p1_color, p2_color, glow_color, use_glow, texture_quality)\r\n        self.jetpack = Icon(\"jetpack\", jetpack, p1_color, p2_color, glow_color, use_glow, texture_quality)\r\n\r\n        self.p1 = p1_color\r\n        self.p2 = p2_color\r\n        self.glow = glow_color\r\n\r\n        self.use_glow = use_glow\r\n\r\n        self.texture_quality = texture_quality\r\n\r\n    def render_iconset(self):\r\n        iconset = np.hstack([self.cube.render(), self.ship.render(), self.ball.render(), self.ufo.render(),\r\n                             self.wave.render(), self.robot.render(), self.spider.render(), self.swing.render(),\r\n                             self.jetpack.render()])\r\n        return Image.fromarray(iconset, \"RGBA\")\r\n\r\n\r\nclass IconBuilder:\r\n\r\n    def __init__(self, p1_color: tuple, p2_color: tuple, glow_color: tuple, use_glow: bool,\r\n                 source_02: Image.Image, plist_02: dict, source_glow: Image.Image, plist_glow: dict,\r\n                 layer_size: tuple = (220, 220),\r\n                 *, alt_pose_robot: bool = False, upscale_icons: bool = False, **kwargs):\r\n        self.p1 = p1_color\r\n        self.p2 = p2_color\r\n        self.glow = glow_color\r\n        self.use_glow = use_glow\r\n\r\n        self.s_02 = source_02\r\n        self.p_02 = plist_02\r\n        self.s_glow = source_glow\r\n        self.p_glow = plist_glow\r\n\r\n        self.size = layer_size\r\n        self.upscale = upscale_icons\r\n\r\n        self.alt_pose = alt_pose_robot\r\n\r\n    def make_icon(self, icon_name: str, icon_id: int):\r\n        return make_icon_from_spritesheet(icon_name, icon_id, self.p1, self.p2, self.glow, self.s_02, self.p_02,\r\n                                          self.s_glow, self.p_glow, self.use_glow, self.size,\r\n                                          alt_pose_robot=self.alt_pose, upscale=self.upscale)\r\n\r\n    def make_iconset(self, cube_id: int, ship_id: int, ball_id: int, ufo_id: int, wave_id: int, robot_id: int,\r\n                     spider_id: int):\r\n        cube = make_icon_from_spritesheet(\"player\", cube_id, self.p1, self.p2, self.glow, self.s_02, self.p_02,\r\n                                          self.s_glow, self.p_glow, self.use_glow, self.size, upscale=self.upscale)\r\n        ship = make_icon_from_spritesheet(\"ship\", ship_id, self.p1, self.p2, self.glow, self.s_02, self.p_02,\r\n                                          self.s_glow, self.p_glow, self.use_glow, self.size, upscale=self.upscale)\r\n        ball = make_icon_from_spritesheet(\"player_ball\", ball_id, self.p1, self.p2, self.glow, self.s_02, self.p_02,\r\n                                          self.s_glow, self.p_glow, self.use_glow, self.size, upscale=self.upscale)\r\n        ufo = make_icon_from_spritesheet(\"bird\", ufo_id, self.p1, self.p2, self.glow, self.s_02, self.p_02, self.s_glow,\r\n                                         self.p_glow, self.use_glow, self.size, upscale=self.upscale)\r\n        wave = make_icon_from_spritesheet(\"dart\", wave_id, self.p1, self.p2, self.glow, self.s_02, self.p_02,\r\n                                          self.s_glow, self.p_glow, self.use_glow, self.size, upscale=self.upscale)\r\n        robot = make_icon_from_spritesheet(\"robot\", robot_id, self.p1, self.p2, self.glow, self.s_02, self.p_02,\r\n                                           self.s_glow, self.p_glow, self.use_glow, self.size,\r\n                                           alt_pose_robot=self.alt_pose, upscale=self.upscale)\r\n        spider = make_icon_from_spritesheet(\"spider\", spider_id, self.p1, self.p2, self.glow, self.s_02, self.p_02,\r\n                                            self.s_glow, self.p_glow, self.use_glow, self.size, upscale=self.upscale)\r\n\r\n        iconset = np.hstack([cube, ship, ball, ufo, wave, robot, spider])\r\n        return Image.fromarray(iconset, \"RGBA\")\r\n\r\n\r\n# file_name = \"player_ball_64\"\r\n#\r\n# source_spritesheet = (Image.open(os.path.join(os.path.dirname(__file__), \"icons\", f\"{file_name}.png\"))\r\n#                         .convert(\"RGBA\"))\r\n#\r\n# with open(os.path.join(os.path.dirname(__file__), \"icons\", f\"{file_name}.plist\"), \"rb\") as plist_file:\r\n#     plist = plistlib.load(plist_file)\r\n#\r\n# test_icon = Icon(\"cube\", 459, (255, 255, 255, 255), (255, 255 ,255, 255), (255, 255, 255, 255), True)\r\n# test_icon.render().show()\r\n# test_icon = Icon22(source_spritesheet, plist)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/gd_icon_composite/icon_composite.py b/src/gd_icon_composite/icon_composite.py
--- a/src/gd_icon_composite/icon_composite.py	(revision 035c9f16abba8206e3c285b3c118c6b611ff3ffb)
+++ b/src/gd_icon_composite/icon_composite.py	(date 1737401086443)
@@ -45,7 +45,7 @@
             icon_layer = icon_layer.rotate(90, expand=True)
 
         if upscale is True:
-            icon_layer = icon_layer.resize((icon_layer.width * 2, icon_layer.height * 2), resample=Image.BOX)
+            icon_layer = icon_layer.resize((icon_layer.width * 2, icon_layer.height * 2), resample=Image.Resampling.BOX)
 
     except KeyError as error:
         if p_layer == "_extra":
@@ -107,9 +107,9 @@
     # back leg
     darken = 0.6
 
-    add_to_center(robot, lbot.rotate(36, resample=Image.BICUBIC, expand=True), (-30 + center_offset[0], -50 + center_offset[1]))  # robot _03
+    add_to_center(robot, lbot.rotate(36, resample=Image.Resampling.BICUBIC, expand=True), (-30 + center_offset[0], -50 + center_offset[1]))  # robot _03
 
-    add_to_center(robot, ltop.rotate(-65, resample=Image.BICUBIC, expand=True), (-36 + center_offset[0], -22 + center_offset[1]))  # robot _02
+    add_to_center(robot, ltop.rotate(-65, resample=Image.Resampling.BICUBIC, expand=True), (-36 + center_offset[0], -22 + center_offset[1]))  # robot _02
 
     add_to_center(robot, foot, (-16 + center_offset[0], -64 + center_offset[1]))  # robot _04
 
@@ -120,9 +120,9 @@
     robot.alpha_composite(head)  # robot _01 it's here where the offset fails because I can't be bothered to write it
 
     # front leg
-    add_to_center(robot, lbot.rotate(43, resample=Image.BICUBIC, expand=True), (-22 + center_offset[0], -45 + center_offset[1]))  # robot _03
+    add_to_center(robot, lbot.rotate(43, resample=Image.Resampling.BICUBIC, expand=True), (-22 + center_offset[0], -45 + center_offset[1]))  # robot _03
 
-    add_to_center(robot, ltop.rotate(-45.5, resample=Image.BICUBIC, expand=True), (-29 + center_offset[0], -26 + center_offset[1]))  # robot _02
+    add_to_center(robot, ltop.rotate(-45.5, resample=Image.Resampling.BICUBIC, expand=True), (-29 + center_offset[0], -26 + center_offset[1]))  # robot _02
 
     add_to_center(robot, foot, (6 + center_offset[0], -64 + center_offset[1]))  # robot _04
 
@@ -141,10 +141,10 @@
     darken = 0.6
     const = 4.1
 
-    add_to_center(robot, lbot.rotate(29.672, resample=Image.BICUBIC, expand=True),
+    add_to_center(robot, lbot.rotate(29.672, resample=Image.Resampling.BICUBIC, expand=True),
                   (int(-7.175 * const) + center_offset[0], int(-6.875 * const) + center_offset[1]))  # robot _03
 
-    add_to_center(robot, ltop.rotate(-57.968, resample=Image.BICUBIC, expand=True),
+    add_to_center(robot, ltop.rotate(-57.968, resample=Image.Resampling.BICUBIC, expand=True),
                   (int(-7.175 * const) + center_offset[0], int(-1.025 * const) + center_offset[1]))  # robot _02
 
     add_to_center(robot, foot,
@@ -154,14 +154,14 @@
         robot = layer_color(robot, (int(darken * 255), int(darken * 255), int(darken * 255), 255))
 
     # head
-    add_to_center(robot, head.rotate(2.285, resample=Image.BICUBIC, expand=True),
+    add_to_center(robot, head.rotate(2.285, resample=Image.Resampling.BICUBIC, expand=True),
                   (int(0.25 * const) + center_offset[0], int(5.5 * const) + center_offset[1]))  # robot _01
 
     # front leg
-    add_to_center(robot, lbot.rotate(42.941, resample=Image.BICUBIC, expand=True),
+    add_to_center(robot, lbot.rotate(42.941, resample=Image.Resampling.BICUBIC, expand=True),
                   (int(-4.525 * const) + center_offset[0], int(-6.625 * const) + center_offset[1]))  # robot _03
 
-    add_to_center(robot, ltop.rotate(-42.501, resample=Image.BICUBIC, expand=True),
+    add_to_center(robot, ltop.rotate(-42.501, resample=Image.Resampling.BICUBIC, expand=True),
                   (int(-5.75 * const) + center_offset[0], int(-2.15 * const) + center_offset[1]))  # robot _02
 
     add_to_center(robot, foot,
@@ -186,7 +186,7 @@
                   (int(5.625 * const) + center_offset[0], int(-7.5 * const) + center_offset[1]))  # spider _02
 
     add_to_center(spider, front.resize((int(front.width * 0.88), int(front.height * 0.88)))
-                  .transpose(Image.FLIP_LEFT_RIGHT),
+                  .transpose(Image.Transpose.FLIP_LEFT_RIGHT),
                   (int(16 * const) + center_offset[0], int(-7.5 * const) + center_offset[1]))  # spider _02
 
     if not is_glow:
@@ -194,7 +194,7 @@
 
     # right legs
     # back leg
-    add_to_center(spider, back2.rotate(7.682, resample=Image.BICUBIC, expand=True),
+    add_to_center(spider, back2.rotate(7.682, resample=Image.Resampling.BICUBIC, expand=True),
                   (int(-5 * const) + center_offset[0], int(0.125 * const) + center_offset[1]))  # spider _04
 
     # head
@@ -202,7 +202,7 @@
                   (int(0.625 * const) + center_offset[0], int(4.5 * const) + center_offset[1]))  # spider _01
 
     # front leg
-    add_to_center(spider, back1.rotate(-38.963, resample=Image.BICUBIC, expand=True),
+    add_to_center(spider, back1.rotate(-38.963, resample=Image.Resampling.BICUBIC, expand=True),
                   (int(-14.825 * const) + center_offset[0], int(-7.7 * const) + center_offset[1]))  # spider _03
 
     add_to_center(spider, front,
@@ -274,7 +274,7 @@
 #  |__"_04"
 #    | ...
 
-def make_part(images: dict[str, Image.Image], offsets: dict, size: tuple,
+def make_part(images: dict[str, Image.Image], offsets: dict, size: tuple[int, int],
               p1_color: tuple, p2_color: tuple, glow_color: tuple, extra_color: tuple, *,
               merge_glow: bool, x_offset: int = 0, y_offset: int = 0):
     bg_img = Image.new("RGBA", size, (255, 255, 255, 0))
@@ -300,7 +300,7 @@
     return bg_img, bg_img_glow
 
 
-def make_icon(icon_gamemode: str, images: dict[str, dict[str, Image.Image]], offsets: dict, size: tuple,
+def make_icon(icon_gamemode: str, images: dict[str, dict[str, Image.Image]], offsets: dict, size: tuple[int, int],
               p1_color: tuple, p2_color: tuple, glow_color: tuple, extra_color: tuple, *, merge_glow: bool = True):
     """
     renders an icon given its layers and offsets, the dict structure should be as follows:
@@ -394,7 +394,7 @@
 
 def get_icon_and_glow(icon_name: str, icon_number: int, p1_color: tuple, p2_color: tuple, glow_color: tuple,
                       source_02: Image.Image, plist_02: dict, source_glow: Image.Image, plist_glow: dict,
-                      use_glow: bool, size: tuple = (220, 220), icon_part: str = "", *, upscale: bool = False,
+                      use_glow: bool, size: tuple[int, int] = (220, 220), icon_part: str = "", *, upscale: bool = False,
                       center_offset: tuple = (0, 0)):
     icon = Image.new('RGBA', size, (255, 255, 255, 0))
 
@@ -438,7 +438,7 @@
 
 
 def make_robot(robot_id: int, p1_color: tuple, p2_color: tuple, glow_color: tuple, use_glow: bool,
-               source_02: Image.Image, plist_02: dict, size: tuple = (220, 220), *, alt_pose: bool = False,
+               source_02: Image.Image, plist_02: dict, size: tuple[int, int] = (220, 220), *, alt_pose: bool = False,
                upscale: bool = False, center_offset: tuple = (0, 0)):
     robot_head, robot_head_glow = get_icon_and_glow("robot", robot_id, p1_color, p2_color, glow_color,
                                                     source_02, plist_02, source_02, plist_02, use_glow, size, "_01",
@@ -462,7 +462,7 @@
 
 
 def make_spider(spider_id: int, p1_color: tuple, p2_color: tuple, glow_color: tuple, use_glow: bool,
-                source_02: Image.Image, plist_02: dict, size: tuple = (220, 220), *,
+                source_02: Image.Image, plist_02: dict, size: tuple[int, int] = (220, 220), *,
                 upscale: bool = False, center_offset: tuple = (0, 0)):
     spider_head, spider_head_glow = get_icon_and_glow("spider", spider_id, p1_color, p2_color, glow_color,
                                                       source_02, plist_02, source_02, plist_02, use_glow, size, "_01",
@@ -484,7 +484,7 @@
 def make_icon_from_spritesheet(icon_name: str, icon_id: int, p1_color: tuple, p2_color: tuple, glow_color: tuple,
                                source_02: Image.Image, plist_02: dict, source_glow: Image.Image, plist_glow: dict,
                                use_glow: bool,
-                               size: tuple = (220, 220), *, merge_glow: bool = True, alt_pose_robot: bool = False,
+                               size: tuple[int, int] = (220, 220), *, merge_glow: bool = True, alt_pose_robot: bool = False,
                                upscale: bool = False, center_offset: tuple = (0, 0)):
     if icon_name == "robot":
         icon, glow = make_robot(icon_id, p1_color, p2_color, glow_color, use_glow, source_02, plist_02, size,
@@ -535,7 +535,7 @@
         self.source = source_spritesheet
         self.plist = plist
 
-    def render(self, source_size: tuple = (220, 220), center_offset: tuple = (0, 0), merge_glow: bool = True):
+    def render(self, source_size: tuple[int, int] = (220, 220), center_offset: tuple = (0, 0), merge_glow: bool = True):
         return make_icon_from_spritesheet(self.gamemode_name, self.id, self.p1, self.p2, self.glow,
                                           self.source, self.plist, self.source, self.plist, self.use_glow,
                                           source_size, center_offset=center_offset, merge_glow=merge_glow)
@@ -573,7 +573,7 @@
         self.source = spritesheet
         self.plist = plist_dict
 
-    def render(self, source_size: tuple = (220, 220), center_offset: tuple = (0, 0), merge_glow: bool = True):
+    def render(self, source_size: tuple[int, int] = (220, 220), center_offset: tuple = (0, 0), merge_glow: bool = True):
         return make_icon_from_spritesheet(self.gamemode_name, self.id, self.p1, self.p2, self.glow,
                                           self.source, self.plist, self.source, self.plist, self.use_glow,
                                           source_size, center_offset=center_offset, merge_glow=merge_glow)
@@ -628,7 +628,7 @@
 
     def __init__(self, p1_color: tuple, p2_color: tuple, glow_color: tuple, use_glow: bool,
                  source_02: Image.Image, plist_02: dict, source_glow: Image.Image, plist_glow: dict,
-                 layer_size: tuple = (220, 220),
+                 layer_size: tuple[int, int] = (220, 220),
                  *, alt_pose_robot: bool = False, upscale_icons: bool = False, **kwargs):
         self.p1 = p1_color
         self.p2 = p2_color
Index: pyproject.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[build-system]\r\nrequires = [\"hatchling\"]\r\nbuild-backend = \"hatchling.build\"\r\n\r\n[project]\r\nname = \"gd_icon_composite\"\r\nversion = \"0.0.7\"\r\nauthors = [\r\n  { name=\"Luar77\", email=\"luar77.commissions@gmail.com\" },\r\n]\r\ndescription = \"A package to easily generate images of geometry dash icons using pillow\"\r\nreadme = \"README.md\"\r\nrequires-python = \">=3.9\"\r\nclassifiers = [\r\n    \"Programming Language :: Python :: 3\",\r\n    \"License :: OSI Approved :: MIT License\",\r\n    \"Operating System :: OS Independent\",\r\n]\r\nkeywords = [\r\n    \"geometry\", \"dash\", \"geometry dash\", \"icon\", \"gd\", \"gmd\"\r\n]\r\ndependencies = [\r\n    \"numpy~=1.23.5\",\r\n    \"pillow>=9\"\r\n]\r\n\r\n[project.urls]\r\n\"Homepage\" = \"https://github.com/Luar77/gdIconComposite\"\r\n\"Bug Tracker\" = \"https://github.com/Luar77/gdIconComposite/issues\"\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pyproject.toml b/pyproject.toml
--- a/pyproject.toml	(revision 035c9f16abba8206e3c285b3c118c6b611ff3ffb)
+++ b/pyproject.toml	(date 1737410137426)
@@ -1,10 +1,10 @@
 [build-system]
-requires = ["hatchling"]
-build-backend = "hatchling.build"
+requires = ["setuptools>=70.0"]
+build-backend = "setuptools.build_meta"
 
 [project]
 name = "gd_icon_composite"
-version = "0.0.7"
+version = "0.0.8"
 authors = [
   { name="Luar77", email="luar77.commissions@gmail.com" },
 ]
