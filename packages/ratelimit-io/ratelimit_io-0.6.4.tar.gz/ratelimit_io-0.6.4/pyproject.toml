[tool.poetry]
name = "ratelimit-io"
version = "0.6.4"
description = "Flexible bidirectional rate-limiting library with redis backend"
authors = ["Galushko Bogdan <galushko355@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "ratelimit_io"}]

package-mode = true

repository = "https://github.com/bagowix/ratelimit-io"

keywords = [
    "rate-limit",
    "ratelimit",
    "rate limit",
    "throttle",
    "rate control",
    "rate-limiting",
    "ratelimiting",
    "limit",
    "limiting",
    "asyncio",
    "I/O",
    "redis",
    "aioredis",
]

classifiers = [
    "Programming Language :: Python :: 3",
    "Topic :: Software Development :: Libraries",
    "Topic :: Internet",
    "Topic :: System :: Networking",
    "Intended Audience :: Developers",
]

[tool.poetry.dependencies]
python = "^3.8"
redis = "^5.2.1"

[tool.poetry.group.dev.dependencies]
mypy = "^1.14.1"
ruff = "^0.9.1"
pytest = "^8.3.4"
pytest-cov = "^5.0.0"
pytest-asyncio = "^0.18.3"
pre-commit = "^3.5"
fakeredis = "^2.26.2"
cibuildwheel = "^2.22.0"

[tool.ruff]
line-length = 79
target-version = "py38"

[tool.ruff.lint]
    ignore = [
        "PT001",
        "PT023",
        "SIM103",
    ]
    select = [
        "B",    # flake8-bugbear,
        "C4",   # flake8-comprehensions
        "E",    # pycodestyle error
        "F",    # pyflakes
        "SIM",  # flake8-simplify
        "T20",  # flake8-print
        "W",    # pycodestyle warning
        "UP",   # pyupgrade
        "I",    # isort
    ]

[tool.ruff.lint.mccabe]
max-complexity = 12


[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",
    "F403",
]
"test_*.py" = [
    "S101",
    "E501",
    "ANN201",
]

[tool.ruff.lint.isort]
known-first-party = [
    "ratelimit_io",
]
known-third-party = [
    "asyncio",
    "hashlib",
    "redis",
    "pytest",
    "pytest-asyncio",
]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
force-single-line = true

[tool.ruff.format]
quote-style = "double"

[tool.pytest.ini_options]
asyncio_mode = "auto"

[build-system]
requires = ["poetry-core<=1.8.5"]
build-backend = "poetry.core.masonry.api"
