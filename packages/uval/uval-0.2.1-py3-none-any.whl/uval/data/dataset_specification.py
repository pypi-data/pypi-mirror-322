# -*- coding: utf-8 -*-
"""A StageData object acts like a data container that manages results generated by stages and read by subsequent
stages.
"""

import csv
from os import path
from typing import Dict

from uval.utils.label_naming import label_short_to_long  # type: ignore
from uval.utils.log import logger  # type: ignore
from uval.utils.yaml_io import load_yaml_data  # type: ignore


# @uval_stage
def load_data_split(file_path: str, subsets=None, output=None, class_mappings=None) -> Dict:
    """This stage will load a data split file in YAML format and keep the id lists for
    train, val and test set.

    Args:
        file_path (str): path to the yaml file.
        subsets ([str], optional): which subsets of the yaml files are to be loaded,
        if set to None, all subsets are used. Defaults to None.
        output: The output file to be generated, if needed

    Returns:
        DatasetSpecificationData: returns the dataset.
    """

    logger.debug("Reading YAML file started")
    data_split_dict: Dict[str, Dict] = load_yaml_data(file_path)
    logger.debug("Reading YAML file finished.")

    dic: Dict[str, dict] = {}
    if not data_split_dict or not data_split_dict.get("split"):
        logger.error(f"No data could be read from data split file '{file_path}'")
        return dic
    available_subsets = []
    if "split" in data_split_dict:
        available_subsets = list(data_split_dict.get("split").keys())  # type: ignore
    if subsets is None:
        subsets = available_subsets
    else:
        for subset in subsets:
            if subset not in available_subsets:
                raise ValueError(f"The requested split subset {subset} not found in the YAML file.")
    logger.debug(subsets)

    for subset_name, subset_data in data_split_dict.get("split").items():  # type: ignore
        if subset_name not in subsets:
            continue
        for class_name, image_list in subset_data.items():
            is_negative = class_name == "negative"
            logger.debug(f"Reading list of '{len(image_list)}' images for split {subset_name}/{class_name}")

            for volume_id, labels in image_list.items():
                labels_list = labels if isinstance(labels, list) else [labels]
                for label_id in labels_list:
                    try:
                        item_key = label_short_to_long(volume_id, label_id) if label_id else volume_id
                        dic[item_key] = {
                            "volume_id": volume_id,
                            "label_id": label_id,
                            "is_negative": is_negative,
                            "subset": subset_name,
                            "class_name": class_mappings.get(class_name, class_name),
                        }
                    except KeyError:
                        logger.warning(f"Unable to find proper keys in the YAML file: '{file_path}'")
    if output:
        if output.DATASET_OVERVIEW_FILE.split(".")[-1] == "html":
            logger.warning("Exporting data split to html not implemented")
        elif output.DATASET_OVERVIEW_FILE.split(".")[-1] == "csv":
            with open(path.join(output.PATH, output.DATASET_OVERVIEW_FILE), "w") as f:
                w = csv.writer(f)
                w.writerows(dic.items())
        else:
            raise NotImplementedError("Other output formats rather than 'html' and 'csv' are not implemented yet!")
        logger.info(f"dataset overview saved to {path.join(output.PATH, output.DATASET_OVERVIEW_FILE)}.")

    return dic
