IF(Tungl_FIND_VERSION AND Tungl_VERSION AND Tungl_VERSION VERSION_LESS Tungl_FIND_VERSION)
	UNSET(Tungl_VERSION CACHE)
	UNSET(Tungl_FOUND CACHE)
ENDIF()
IF(NOT Tungl_FOUND)
	SET(Tungl_FOUND FALSE)
	FIND_PATH(Tungl_DIR "include/tungl/version.h" PATHS "${CMAKE_CURRENT_LIST_DIR}/../" "/usr/local/nle/")
 
	IF(NOT Tungl_DIR)
		FIND_PACKAGE(Python3 3.7 REQUIRED)
		SET(Python3_USERLIB "$ENV{HOME}/.local/lib/python${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR}/site-packages")
		FIND_FILE(Tungl_DIR "include/tungl/version.h" PATHS "${Python3_SITELIB}/tungl" "${Python3_USERLIB}/tungl")
	ENDIF()
 
	IF(Tungl_DIR)
		FIND_LIBRARY(Tungl_LIBRARY "libtungl.so" "lubtungl.a" "PATHS" "${Tungl_DIR}/lib64")
		FIND_FILE(Tungl_SRC "tungl.cpp" "PATHS" "${Tungl_DIR}/src/tungl")
		SET(Tungl_INCLUDE_DIRS "${Tungl_DIR}/include" "CACHE" "STRING" "Tungl include dir")

		IF(Tungl_LIBRARY AND Tungl_SRC AND Tungl_INCLUDE_DIRS)
			SET(Tungl_FOUND TRUE)
			FILE(READ "${Tungl_INCLUDE_DIRS}/tungl/version.h" Tungl_VERSION)
			STRING(REGEX MATCH "\"([0-9.]+)\"" Tungl_VERSION ${Tungl_VERSION})
			SET(Tungl_VERSION ${CMAKE_MATCH_1})
			SET(Tungl_VERSION ${Tungl_VERSION} CACHE STRING "Tungl Version")
			MESSAGE(STATUS "Found Tungl v${Tungl_VERSION}: ${Tungl_DIR}")
		ELSE()
			MESSAGE(STATUS "Unable to find all requirements of Tungl in ${Tungl_DIR}")
			MESSAGE(STATUS "Tungl_LIBRARY: ${Tungl_LIBRARY}")
			MESSAGE(STATUS "Tungl_SRC: ${Tungl_SRC}")
			MESSAGE(STATUS "Tungl_INCLUDE_DIRS: ${Tungl_INCLUDE_DIRS}")
		ENDIF()
 
		SET(Tungl_FOUND ${Tungl_FOUND} CACHE BOOL "Found Tungl" FORCE)
		MARK_AS_ADVANCED(Tungl_FOUND Tungl_VERSION Tungl_DIR Tungl_LIBRARY Tungl_SRC Tungl_INCLUDE_DIRS)
	ENDIF()
ENDIF()
 
IF(Tungl_FIND_REQUIRED AND NOT Tungl_FOUND)
	MESSAGE(FATAL_ERROR "Unable to find Tungl!")
ENDIF()
 
IF(Tungl_FIND_VERSION AND Tungl_VERSION VERSION_LESS Tungl_FIND_VERSION)
	MESSAGE(FATAL_ERROR "Found Tungl v${Tungl_VERSION} but expected at least v${Tungl_FIND_VERSION}")
ENDIF()
 
STRING(ASCII 59 Tungl_SEMICOLON)
STRING(REPLACE "." "${Tungl_SEMICOLON}" Tungl_VERSION_LIST ${Tungl_VERSION})
SET(Tungl_VERSION_MAJOR 0)
SET(Tungl_VERSION_MINOR 0)
SET(Tungl_VERSION_PATCH 0)
LIST(LENGTH Tungl_VERSION_LIST Tungl_VERSION_LEN)
IF(Tungl_VERSION_LEN GREATER 0)
	LIST(GET Tungl_VERSION_LIST 0 Tungl_VERSION_MAJOR)
ENDIF()
IF(Tungl_VERSION_LEN GREATER 1)
	LIST(GET Tungl_VERSION_LIST 1 Tungl_VERSION_MINOR)
ENDIF()
IF(Tungl_VERSION_LEN GREATER 2)
	LIST(GET Tungl_VERSION_LIST 2 Tungl_VERSION_PATCH)
ENDIF()
UNSET(Tungl_VERSION_LEN)
UNSET(Tungl_VERSION_LIST)
UNSET(Tungl_SEMICOLON)