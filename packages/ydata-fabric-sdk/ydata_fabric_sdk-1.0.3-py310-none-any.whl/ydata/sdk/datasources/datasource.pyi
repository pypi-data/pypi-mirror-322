from typing import Optional, Union
from ydata.sdk.common.client import Client
from ydata.sdk.common.types import Project, UID
from ydata.sdk.connectors.connector import Connector
from ydata.sdk.datasources._models.datasource_list import DataSourceList
from ydata.sdk.datasources._models.datatype import DataSourceType
from ydata.sdk.datasources._models.metadata.metadata import Metadata
from ydata.sdk.datasources._models.status import Status
from ydata.sdk.utils.model_mixin import ModelFactoryMixin

class DataSource(ModelFactoryMixin):
    def __init__(self, connector: Connector, datatype: Optional[Union[DataSourceType, str]] = ..., name: Optional[str] = ..., project: Optional[Project] = ..., wait_for_metadata: bool = ..., client: Optional[Client] = ..., **config) -> None: ...
    @property
    def uid(self) -> UID: ...
    @property
    def datatype(self) -> DataSourceType: ...
    @property
    def project(self) -> Project: ...
    @property
    def status(self) -> Status: ...
    @property
    def metadata(self) -> Optional[Metadata]: ...
    @staticmethod
    def list(project: Optional[Project] = ..., client: Optional[Client] = ...) -> DataSourceList: ...
    @staticmethod
    def get(uid: UID, project: Optional[Project] = ..., client: Optional[Client] = ...) -> DataSource: ...
    @classmethod
    def create(cls, connector: Connector, datatype: Optional[Union[DataSourceType, str]] = ..., name: Optional[str] = ..., project: Optional[Project] = ..., wait_for_metadata: bool = ..., client: Optional[Client] = ..., **config) -> DataSource: ...
