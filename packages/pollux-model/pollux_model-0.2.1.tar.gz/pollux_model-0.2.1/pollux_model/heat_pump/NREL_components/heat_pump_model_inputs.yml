# If csv data will be used, update n_hrs after running construct_yaml_input_quantities
n_hrs: 1

##### Usage Notes #####

# If a variable uses a dictionary, the dictionary must include a value (val) and a unit.
# If an input array (hourly data) will be used, load this file, then write over the inputs here with desired array.

##### IO #####
print_results: True
write_output_file: True

##### 1.COP #####
electricity_power_in: {val: 419000.0, unit: 'W'}
cold_temperature_available: {val: 50.0, unit: 'degC'}
hot_temperature_desired: {val: 120.0, unit: 'degC'}
second_law_efficiency: {val: 0.5, unit: 'dimensionless'}
# If the refrigerant selection process fails, the flag is changed to true so that it can be automatically analyzed post processing
second_law_efficiency_flag: False
t_crit_delta: {val: 30, unit: 'delta_degC'}
min_p_crit: {val: 1.0e9, unit: 'Pa'}
# The hot and cold buffer are the temperature difference between the working fluid and the hot and cold streams, a measure of the heat exchanger efficiency
cold_buffer: {val: 3.0, unit: 'delta_degC'}
hot_buffer: {val: 3.0, unit: 'delta_degC'}
compressor_efficiency: {val: 0.82, unit: 'dimensionless'}
# Refrigerant
refrigerant: 'R1234ze(Z)'
refrigerant_flag: False

##### 2.Energy and Mass Flow #####
# Cold Inputs
cold_pressure: {val: 1.0, unit: 'atm'}
cold_mass_flowrate: {val: 1000, unit: 'kg/s'}
cold_refrigerant: 'water'
cold_deltaT: {val: 1.0, unit: 'delta_degC'}
# Hot inputs
hot_pressure: {val: 1.0, unit: 'atm'}
hot_temperature_minimum: {val: 115.0, unit: 'degC'}
hot_mass_flowrate: {val: NaN, unit: 'kg/s'}
hot_refrigerant: 'water'
# Process Heat
process_heat_requirement: {val: NaN, unit: 'MW'}
