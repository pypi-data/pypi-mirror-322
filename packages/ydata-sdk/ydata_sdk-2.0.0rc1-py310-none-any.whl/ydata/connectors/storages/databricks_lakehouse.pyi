from _typeshed import Incomplete
from enum import Enum
from ydata.connectors.base_connector import BaseConnector
from ydata.core.connectors import WriteMode
from ydata.dataset import Dataset

class Cloud(Enum):
    AZURE = ...
    AWS = ...
    @property
    def connector(self): ...

def manage_exceptions(func): ...

class DatabricksLakehouse(BaseConnector):
    DB_TYPE: str
    DB_PYTHON_LIBRARY: str
    uri: Incomplete
    catalog: Incomplete
    schema: Incomplete
    def __init__(self, host: str, access_token: str, staging_credentials: dict, cloud: Cloud | str = ..., catalog: str | None = None, schema: str | None = None, echo: bool = False) -> None: ...
    @property
    def client(self): ...
    def set_client(self) -> None: ...
    @property
    def connection(self): ...
    def list_sqlwarehouses(self) -> dict: ...
    def connect_to_warehouse(self, warehouse: dict): ...
    def list_catalogs(self) -> list: ...
    def list_schemas(self, catalog: str) -> list: ...
    def list_tables(self, catalog: str, schema: str) -> list: ...
    def get_table(self, table: str, warehouse: str, catalog: str | None = None, schema: str | None = None) -> Dataset: ...
    def get_table_sample(self, table: str, warehouse: str, sample_size: int = ..., catalog: str | None = None, schema: str | None = None): ...
    def query(self, query: str, warehouse: str) -> Dataset: ...
    def query_sample(self, query: str, warehouse: str, sample_size: int = ...) -> Dataset: ...
    def write_table(self, data: Dataset, staging_path: str, warehouse: str, table: str, catalog: str | None = None, schema: str | None = None, if_exists: str | WriteMode = ...): ...
    def test(self) -> None: ...
