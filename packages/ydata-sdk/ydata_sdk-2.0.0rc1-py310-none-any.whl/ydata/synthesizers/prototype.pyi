from dataclasses import dataclass
from typing import Any
from ydata.preprocessors.base import Preprocessor
from ydata.synthesizers.base_synthesizer import BaseSynthesizer
from ydata.synthesizers.utils.segmentation import SegmentInfo
from ydata.synthesizers.utils.slicing import SliceInfo
from ydata.utils.acceleration_device import Device

@dataclass
class DataBlock:
    synthesizer: BaseSynthesizer
    info: SliceInfo
    preprocessor: Preprocessor = ...
    def __init__(self, synthesizer, info, preprocessor=...) -> None: ...

@dataclass
class DataSegment:
    info: SegmentInfo
    preprocessor: Preprocessor = ...
    blocks: dict[Any, DataBlock] = ...
    def __init__(self, info, preprocessor=..., blocks=...) -> None: ...

@dataclass
class PipelinePrototype:
    @dataclass()
    class DatasetScope:
        preprocessor: type[Preprocessor] = ...
        preprocessor_params: dict = ...
        def __init__(self, preprocessor=..., preprocessor_params=...) -> None: ...
    @dataclass()
    class SegmentScope:
        preprocessor: type[Preprocessor] = ...
        preprocessor_params: dict = ...
        def __init__(self, preprocessor=..., preprocessor_params=...) -> None: ...
    @dataclass()
    class BlockScope:
        synthesizer: type[BaseSynthesizer]
        synthesizer_params: dict = ...
        preprocessor: type[Preprocessor] = ...
        preprocessor_params: dict = ...
        def __init__(self, synthesizer, synthesizer_params=..., preprocessor=..., preprocessor_params=...) -> None: ...
    block: BlockScope
    segment: SegmentScope
    dataset: DatasetScope
    device: Device
    def __init__(self, block, segment, dataset=..., device=...) -> None: ...
