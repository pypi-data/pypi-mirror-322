from _typeshed import Incomplete
from networkx import DiGraph
from typing import Callable, Iterable
from ydata.dataset import Dataset
from ydata.dataset.engines import VALID_ENGINES
from ydata.dataset.schemas import MultiTableSchema, RDBMSSchema, RelationType

class MultiDataset:
    rdbms_schema: Incomplete
    def __init__(self, datasets: dict[str, Dataset | VALID_ENGINES] | None = None, connector: RDBMSConnector | None = None, schema: MultiTableSchema | RDBMSSchema | dict | None = None, index_cols: dict[str] | None = None, lazy: bool = True) -> None: ...
    def add_observer_for_new_tables(self, func: Callable): ...
    def add_foreign_key(self, table: str, column: str, parent_table: str, parent_column: str, relation_type: str | RelationType = ...): ...
    def add_primary_key(self, table: str, column: str): ...
    @property
    def schema(self): ...
    def get_components(self): ...
    def get_database_dag(self, reverse: bool = False) -> DiGraph: ...
    def deferred_request_endpoint(self): ...
    def compute(self): ...
    def select_tables(self, tables: Iterable[str]): ...
    def __getitem__(self, key: str | list[str]) -> Dataset | MultiDataset: ...
    def __setitem__(self, key: str, data: Dataset): ...
    def items(self): ...
    def keys(self): ...
    def values(self): ...
    def __iter__(self): ...
