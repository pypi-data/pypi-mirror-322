from _typeshed import Incomplete
from dataclasses import dataclass
from enum import Enum as Enum
from lib2to3.pytree import Base as Base
from ydata.connectors.base_connector import BaseConnector
from ydata.connectors.exceptions import InvalidIndexCol as InvalidIndexCol
from ydata.core.connectors import WriteMode
from ydata.dataset import Dataset
from ydata.dataset.multidataset import MultiDataset
from ydata.dataset.schemas import RDBMSSchema as Schema, Table

@dataclass
class ConnectionString:
    username: str
    password: str
    database: str
    schema: str | None = ...
    port: int | None = ...
    hostname: str | None = ...
    warehouse: str | None = ...
    def __init__(self, username, password, database, schema=..., port=..., hostname=..., warehouse=...) -> None: ...

class RDBMSConnector(BaseConnector):
    STORAGE_TYPE: Incomplete
    DB_TYPE: Incomplete
    DB_PYTHON_LIBRARY: Incomplete
    conn_str: Incomplete
    def __init__(self, conn_string: ConnectionString | dict, echo: bool = False) -> None: ...
    @property
    def uri(self): ...
    @property
    def database(self): ...
    @property
    def connection(self): ...
    def set_schema(self, schema_name: str | None = None): ...
    @property
    def schema_name(self): ...
    def get_database_schema(self, schema_name: str | None = None, refresh: bool = True, set_schema: bool = True) -> Schema: ...
    def dispose(self) -> None: ...
    def get_tables(self, tables: list[str], schema: Schema | dict | None = None, schema_name: str | None = None): ...
    def get_table(self, table: str, schema: Table | dict | None = None, schema_name: str | None = None, index_col: str | None = None) -> Dataset: ...
    def get_table_sample(self, table: str, schema: Table | dict | None = None, schema_name: str | None = None, sample_size: int = ...) -> Dataset: ...
    def query(self, query: str, schema: Table | dict | None = None) -> Dataset: ...
    def delete_tables(self, tables: list[str]): ...
    def query_sample(self, query: str, sample_size: int = ...) -> Dataset: ...
    def read_database(self, schema_name: str | None = None, index_cols: dict[str, str] | None = None, lazy: bool = True) -> MultiDataset: ...
    def write_table(self, data: Dataset, name: str, schema_name: str | None = None, if_exists: str | WriteMode = ...): ...
    def write_database(self, data: MultiDataset, table_names: dict | list | None = None, schema_name: str | None = None, if_exists: str | WriteMode = ...): ...
    def test(self) -> None: ...

class MySQLConnector(RDBMSConnector):
    DB_TYPE: str
    DB_PYTHON_LIBRARY: str

class PostgreSQLConnector(RDBMSConnector):
    DB_TYPE: str
    DB_PYTHON_LIBRARY: str

class SnowflakeConnector(RDBMSConnector):
    DB_TYPE: str
    DB_PYTHON_LIBRARY: str
    def list_schemas(self): ...
    def set_schema(self, schema_name: str): ...
    def get_table(self, table: str, schema_name: str | None = None, schema: Table | dict | list = None) -> Dataset: ...
    def write_table(self, data: Dataset, name: str, schema_name: str | None = None, if_exists: str | WriteMode = ...): ...

class AzureSQLConnector(RDBMSConnector):
    DB_TYPE: str
    DB_PYTHON_LIBRARY: str
    def query_sample(self, query: str, sample_size: int = ...) -> Dataset: ...
