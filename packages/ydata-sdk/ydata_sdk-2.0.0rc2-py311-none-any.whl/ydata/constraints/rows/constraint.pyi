from _typeshed import Incomplete
from enum import Enum
from pandas import DataFrame as pdDataFrame
from typing import Any, Callable
from ydata.constraints.base import Axis as Axis, RowConstraint
from ydata.dataset.dataset import Dataset

class CustomConstraint(RowConstraint):
    axis: Incomplete
    name: Incomplete
    available_columns: Incomplete
    def __init__(self, check: Callable, columns: str | list[str] | None = None, name: str | None = None, axis: Axis = 'column', available_columns: list[str] | None = None, entity: str | None = None) -> None: ...
    def validate(self, dataset: Dataset) -> pdDataFrame: ...

class GreaterThan(RowConstraint):
    def __init__(self, columns: str | list[str], value: float | str) -> None: ...
    def validate(self, dataset: Dataset) -> pdDataFrame: ...

class LowerThan(RowConstraint):
    def __init__(self, columns: str | list[str], value: float | str) -> None: ...
    def validate(self, dataset: Dataset) -> pdDataFrame: ...

class Between(RowConstraint):
    def __init__(self, columns: str | list[str], lower_bound: int | float, upper_bound: int | float) -> None: ...
    def validate(self, dataset: Dataset) -> pdDataFrame: ...

class Positive(GreaterThan):
    def __init__(self, columns: str | list[str]) -> None: ...
    def validate(self, dataset: Dataset) -> pdDataFrame: ...

class BetweenDates(RowConstraint):
    def __init__(self, constrained_column: str, reference_column: str, lower_bound: int, upper_bound: int) -> None: ...
    def validate(self, dataset: Dataset) -> pdDataFrame: ...

class IncludedIn(RowConstraint):
    def __init__(self, column: str, values: list[Any] | Any) -> None: ...
    def validate(self, dataset: Dataset) -> pdDataFrame: ...

class Regex(RowConstraint):
    def __init__(self, column: str, regex: str) -> None: ...
    def validate(self, dataset: Dataset) -> pdDataFrame: ...

class CombineConstraints(RowConstraint):
    class Operation(Enum):
        MERGE = 'AND'
        CHAIN = 'XAND'
    def __init__(self, constraints: list[RowConstraint], operation: Operation = ...) -> None: ...
    def validate(self, dataset: Dataset) -> pdDataFrame: ...
