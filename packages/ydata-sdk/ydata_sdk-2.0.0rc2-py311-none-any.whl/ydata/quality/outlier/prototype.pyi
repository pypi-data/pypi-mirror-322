from _typeshed import Incomplete
from dataclasses import dataclass
from pandas import DataFrame as pdDataFrame, Index as pdIndex
from sklearn.base import BaseEstimator, ClassifierMixin, ClusterMixin, TransformerMixin
from ydata.dataset import Dataset

DEFAULT_IS_OUTLIER_SCORE_COL: str
DEFAULT_CLUSTER_COL: str

class BaseOperator:
    def summary(self) -> dict: ...

class BaseClusteringOperator(BaseOperator, ClusterMixin):
    outlier_col: Incomplete
    def __init__(self, outlier_col: str = ...) -> None: ...
    def fit(self, X: pdDataFrame): ...
    def fit_predict(self, X: pdDataFrame) -> pdDataFrame: ...

class BaseProjectionOperator(BaseOperator, TransformerMixin): ...
class BaseDetectionOperator(BaseOperator, BaseEstimator, ClassifierMixin): ...

class Identity(BaseOperator):
    def fit_transform(X: pdDataFrame, *args, **kwargs) -> pdDataFrame: ...
    def fit_predict(X: pdDataFrame, *args, **kwargs) -> pdDataFrame: ...
    def represent(X: pdDataFrame, *args, **kwargs) -> pdDataFrame: ...
    def transform(X: pdDataFrame, *args, **kwargs) -> pdDataFrame: ...

@dataclass
class OutlierSteps:
    projection: BaseProjectionOperator = ...
    detection: BaseDetectionOperator = ...
    clustering: BaseClusteringOperator = ...
    representation: BaseOperator = ...
    def __init__(self, projection=..., detection=..., clustering=..., representation=...) -> None: ...

@dataclass
class OutlierCluster:
    index: pdIndex
    pipeline: str = ...
    is_outlier: bool = ...
    def mark_inlier(self) -> None: ...
    def get_outliers(self, X: Dataset | pdDataFrame) -> pdDataFrame: ...
    def __init__(self, index, pipeline=..., is_outlier=...) -> None: ...
