from pandas import DataFrame as pdDataFrame
from pathlib import Path
from visions import VisionsTypeset as VisionsTypeset
from ydata.dataset import Dataset
from ydata.profiling.correlations import pandas_auto_compute as pandas_auto_compute
from ydata.profiling.model import BaseDescription
from ydata_profiling import ProfileReport as _ProfileReport
from ydata_profiling.config import Settings
from ydata_profiling.model.summarizer import BaseSummarizer as BaseSummarizer
from ydata_profiling.report.presentation.core import Root

class ProfileReport(_ProfileReport):
    def __init__(self, df: Dataset | pdDataFrame | None = None, minimal: bool = False, explorative: bool = False, sensitive: bool = False, tsmode: bool = False, sortby: str | None = None, sample: dict | None = None, config_file: Path | str = ..., lazy: bool = True, typeset: VisionsTypeset | None = None, summarizer: BaseSummarizer | None = None, config: Settings | None = None, outlier: bool = False, **kwargs) -> None: ...
    @property
    def typeset(self) -> VisionsTypeset | None: ...
    @property
    def description_set(self) -> BaseDescription: ...
    @property
    def report(self) -> Root: ...
    def to_file(self, output_file: str | Path, silent: bool = True, html_breakdown: bool = False) -> None: ...
    def compare(self, other: ProfileReport, config: Settings | None = None, config_file: str | None = None) -> ProfileReport: ...
    def dumps(self, include_schema: bool = False) -> bytes: ...
    @staticmethod
    def loads(data: bytes) -> ProfileReport: ...
    def save(self, output_file: Path | str, include_schema: bool = False): ...
    @staticmethod
    def load(path: Path, dataset: pdDataFrame | None = None) -> ProfileReport: ...
