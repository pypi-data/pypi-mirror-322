from _typeshed import Incomplete
from ydata.connectors.filetype import FileType
from ydata.connectors.storages.object_storage_connector import ObjectStorageConnector

class AzureBlobConnector(ObjectStorageConnector):
    STORAGE_TYPE: Incomplete
    credentials: Incomplete
    storage_options: Incomplete
    def __init__(self, account_name: str, account_key: str) -> None: ...
    @property
    def client(self): ...
    def set_client(self, connection_string: Incomplete | None = None) -> None: ...
    @staticmethod
    def parse_connector_url(url: str): ...
    def list(self, path: Incomplete | None = None, container_name_starts_with: Incomplete | None = None, file_type: Incomplete | None = None, include_metadata: bool = False): ...
    def check_blob(self, path: str) -> bool: ...
    def check_container(self, container_name: str) -> bool: ...
    def get_blob(self, url: str = None): ...
    def get_container(self, container_name): ...
    def delete_blob_if_exists(self, blob_name: str, container_name: str | None = None): ...
    def get_file_paths(self, path: str, file_type: FileType, extension: str): ...
    def write_file(self, data, path: str, file_type: FileType | None = None, *args, **kwargs): ...
    def test(self) -> None: ...
