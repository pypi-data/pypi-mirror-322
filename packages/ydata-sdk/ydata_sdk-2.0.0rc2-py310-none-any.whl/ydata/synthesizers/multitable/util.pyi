from pandas import DataFrame as pdDataFrame
from ydata.dataset.schemas.datasets_schema import MultiTableSchema, TableSchema as TableSchema
from ydata.synthesizers.calculated_features import CalculatedFeature

def topological_sort(graph: dict[str, set[str]]) -> list[str]: ...
def dfs_sort(graph: dict[str, set[str]], starting_nodes: list[str] | None) -> list[str]: ...
def get_multitable_synthesis_order(schema: dict): ...
def drop_unmatching_keys(table_schema: TableSchema, sample_data: pdDataFrame, sample_tables: dict[str, pdDataFrame]) -> pdDataFrame: ...
def replace_for_valid_keys(table_schema: TableSchema, sample_data: pdDataFrame, sample_tables: dict[str, pdDataFrame], missing_values: dict[str, int], reference_values: dict[str, pdDataFrame]) -> pdDataFrame: ...
def is_parent_persisted(table_schema: TableSchema, persisted: set) -> bool: ...
def get_tables_to_persist(tables: list, sampled_tables: dict, persisted_tables: set, schema: MultiTableSchema, composite_keys: dict, calculated_features: list[CalculatedFeature]) -> set[str]: ...
def get_table_relationships(relations: MultiTableSchema): ...
def get_relationship(relationships, left, right): ...
def merge_tables(relationship, tables_df, reference_table, columns: dict | None = None): ...
def build_relation_graph(relations: dict): ...
def get_merge_sequence(graph) -> list: ...
def get_expected_size(nrows: int, fraction: float): ...
