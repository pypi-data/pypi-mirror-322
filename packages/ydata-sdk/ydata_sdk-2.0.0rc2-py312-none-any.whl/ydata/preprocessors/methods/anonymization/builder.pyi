from _typeshed import Incomplete
from dataclasses import dataclass
from typing import Any, Callable

@dataclass
class ColumnAnonymizer:
    anonymizer: Callable
    cols: list[str]
    params: dict[str, Any] = ...
    def __init__(self, anonymizer, cols, params=...) -> None: ...

class AnonymizerConfigurationBuilder:
    VALID_METHODS: Incomplete
    config: Incomplete
    default_locale: Incomplete
    def __init__(self, initial_config: Incomplete | None = None, locale: str | None = None) -> None: ...
    def add_config(self, configuration: dict): ...
    def remove_config(self, column: str): ...
    def save(self, filepath: str): ...
    @staticmethod
    def load(filepath: str): ...
    def get_config(self): ...
