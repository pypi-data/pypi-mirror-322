from _typeshed import Incomplete
from typing import NamedTuple
from ydata.connectors.filetype import FileType
from ydata.connectors.storages.object_storage_connector import ObjectStorageConnector

class S3Spec(NamedTuple('S3Spec', [('bucket', Incomplete), ('key', Incomplete)])): ...

def parse_s3_path(s3_path): ...

class S3Connector(ObjectStorageConnector):
    STORAGE_TYPE: Incomplete
    credentials: Incomplete
    storage_options: Incomplete
    def __init__(self, access_key_id, secret_access_key, aws_ssl: bool = True, session_token: Incomplete | None = None, aws_region: Incomplete | None = None, ds: Incomplete | None = None, **kwargs) -> None: ...
    def set_client(self) -> None: ...
    def set_env_vars(self) -> None: ...
    @property
    def filesystem(self): ...
    def set_filesystem(self, credentials) -> None: ...
    @property
    def resource(self): ...
    def set_resource(self, **kwargs) -> None: ...
    def parse_connector_url(self, url: str): ...
    @staticmethod
    def check_prefix_format(prefix: str, delimiter: str): ...
    def check_bucket(self, bucket_name): ...
    def get_bucket(self, bucket_name): ...
    def get_key(self, key, bucket_name: Incomplete | None = None): ...
    def read_key(self, key, bucket_name: Incomplete | None = None): ...
    def ls(self, path): ...
    def list(self, bucket_name, prefix: str = '', delimiter: str = '/', page_size: Incomplete | None = None, max_items: Incomplete | None = None, keys: bool = True, prefixes: bool = True): ...
    def list_keys(self, bucket_name, prefix: str = '', delimiter: str = '', page_size: Incomplete | None = None, max_items: Incomplete | None = None): ...
    def check_key(self, key, bucket_name: Incomplete | None = None): ...
    def get_file_paths(self, path: str, file_type: FileType, extension: str): ...
    def test(self) -> None: ...
