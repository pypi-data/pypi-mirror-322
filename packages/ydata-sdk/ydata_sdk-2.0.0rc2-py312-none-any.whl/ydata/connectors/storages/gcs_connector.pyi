from _typeshed import Incomplete
from typing import NamedTuple
from ydata.connectors.filetype import FileType
from ydata.connectors.storages.object_storage_connector import ObjectStorageConnector

class GCSSpec(NamedTuple('GCSSpec', [('bucket', Incomplete), ('blob', Incomplete)])): ...

def parse_gcs_path(gcs_path): ...

class GCSConnector(ObjectStorageConnector):
    STORAGE_TYPE: Incomplete
    bucket_name: Incomplete
    credentials: Incomplete
    storage_options: Incomplete
    def __init__(self, project_id, gcs_credentials: Incomplete | None = None, key_path: Incomplete | None = None, keyfile_dict: Incomplete | None = None, **kwargs) -> None: ...
    def set_client(self) -> None: ...
    @property
    def filesystem(self): ...
    def set_filesystem(self, bucket_name) -> None: ...
    def set_env_vars(self) -> None: ...
    def parse_connector_url(self, url: str): ...
    def get_blob(self, blob, bucket_name: Incomplete | None = None): ...
    def get_bucket(self, bucket_name): ...
    def check_blob(self, blob_name: str, bucket_name: str | None = None): ...
    def delete_blob_if_exists(self, blob_name: str, bucket_name: str | None = None): ...
    def ls(self, path: str): ...
    def list(self, key, bucket_name: Incomplete | None = None, path: Incomplete | None = None, delimiter: str = '/', blobs: bool = True, prefixes: bool = True): ...
    def get_file_paths(self, path: str, file_type: FileType, extension: str): ...
    def test(self) -> None: ...
