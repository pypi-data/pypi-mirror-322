import pytest
from typing import List, Union, Literal
from pydantic import BaseModel, Field
from enum import Enum
from pulsar.parser import parse


# Base Models
class ServerActionTask(BaseModel):
    type: Literal["server_action"] = Field(description="A server action is a function that will be generated by the codegen agent.")
    name: str
    description: str
    function_signature: str

class PageTask(BaseModel):
    type: Literal["page"] = "page"
    name: str
    description: str
    required_components: List[str]
    required_actions: List[str]
    route: str

class ComponentTask(BaseModel):
    type: Literal["component"] = "component"
    name: str
    description: str
    props: str

class Task(BaseModel):
    tasks: List[Union[ServerActionTask, PageTask, ComponentTask]]


# Test Helper Functions
def case_parse(data: str, model_type: type, expected_json: dict = None, should_fail: bool = False, allow_partial: bool = False, exclude_none=True):
    if should_fail:
        with pytest.raises(ValueError):
            parse(data, model_type, allow_partial)
        return
    result = parse(data, model_type, allow_partial)

    if expected_json is not None:
        if isinstance(result, BaseModel):
            assert result.model_dump(exclude_none=exclude_none) == expected_json
        elif isinstance(result, list) and all(isinstance(r, BaseModel) for r in result):
            assert [r.model_dump(exclude_none=exclude_none) for r in result] == expected_json
        else:
            assert result == expected_json


# Test cases
def test_single_page_task():
    data = """
    {
        type: page,
        name: HomePage,
        description: Landing page with post list,
        required_components: [PostCard, PostFilter],
        required_actions: [fetchPosts],
        route: /
    }
    """
    expected = {
        "type": "page",
        "name": "HomePage",
        "description": "Landing page with post list",
        "required_components": ["PostCard", "PostFilter"],
        "required_actions": ["fetchPosts"],
        "route": "/"
    }
    case_parse(data, PageTask, expected)

def test_class_2_single():
    data = """[
        {
            type: server_action,
            name: fetchPosts,
            description: Fetch paginated blog posts with sorting and filtering,
            function_signature: async function fetchPosts(page: number, sort: string, filters: object): Promise<PostList>
        }
    ]"""
    expected = [
        {
            "type": "server_action",
            "name": "fetchPosts",
            "description": "Fetch paginated blog posts with sorting and filtering",
            "function_signature": "async function fetchPosts(page: number, sort: string, filters: object): Promise<PostList>"
        }
    ]
    case_parse(data, List[Union[ServerActionTask, PageTask, ComponentTask]], expected)

def test_class_2_two():
    data = """[
        {
            type: server_action,
            name: fetchPosts,
            description: Fetch paginated blog posts with sorting and filtering,
            function_signature: async function fetchPosts(page: number, sort: string, filters: object): Promise<PostList>
        },
        {
            type: component,
            name: PostCard,
            description: Card component for displaying post preview on home page,
            props: {title: string, excerpt: string, author: Author, date: string, onClick: () => void}
        }
    ]"""
    expected = [
        {
            "type": "server_action",
            "name": "fetchPosts",
            "description": "Fetch paginated blog posts with sorting and filtering",
            "function_signature": "async function fetchPosts(page: number, sort: string, filters: object): Promise<PostList>"
        },
        {
            "type": "component",
            "name": "PostCard",
            "description": "Card component for displaying post preview on home page",
            "props": "{title: string, excerpt: string, author: Author, date: string, onClick: () => void}"
        }
    ]
    case_parse(data, List[Union[ServerActionTask, PageTask, ComponentTask]], expected)

def test_class_2_three():
    data = """[
        {
            type: server_action,
            name: fetchPosts,
            description: Fetch paginated blog posts with sorting and filtering,
            function_signature: async function fetchPosts(page: number, sort: string, filters: object): Promise<PostList>
        },
        {
            type: component,
            name: PostCard,
            description: Card component for displaying post preview on home page,
            props: {title: string, excerpt: string, author: Author, date: string, onClick: () => void}
        },
        {
            type: page,
            name: HomePage,
            description: Landing page with post list,
            required_components: [PostCard, PostFilter],
            required_actions: [fetchPosts],
            route: /
        }
    ]"""
    expected = [
        {
            "type": "server_action",
            "name": "fetchPosts",
            "description": "Fetch paginated blog posts with sorting and filtering",
            "function_signature": "async function fetchPosts(page: number, sort: string, filters: object): Promise<PostList>"
        },
        {
            "type": "component",
            "name": "PostCard",
            "description": "Card component for displaying post preview on home page",
            "props": "{title: string, excerpt: string, author: Author, date: string, onClick: () => void}"
        },
        {
            "type": "page",
            "name": "HomePage",
            "description": "Landing page with post list",
            "required_components": ["PostCard", "PostFilter"],
            "required_actions": ["fetchPosts"],
            "route": "/"
        }
    ]
    case_parse(data, List[Union[ServerActionTask, PageTask, ComponentTask]], expected)

def test_full():
    # This is a long test with a full blog system specification
    data = """
    [
        {
            type: server_action,
            name: fetchPosts,
            description: Fetch paginated blog posts with sorting and filtering,
            function_signature: async function fetchPosts(page: number, sort: string, filters: object): Promise<PostList>
        },
        {
            type: server_action,
            name: fetchPostById,
            description: Fetch single post with full content and metadata,
            function_signature: async function fetchPostById(id: string): Promise<Post>
        },
        {
            type: server_action,
            name: createPost,
            description: Create new blog post with content and images,
            function_signature: async function createPost(title: string, content: string, images: File[]): Promise<Post>
        },
        {
            type: server_action,
            name: fetchComments,
            description: Fetch comments for a post,
            function_signature: async function fetchComments(postId: string): Promise<Comment[]>
        },
        {
            type: server_action,
            name: addComment,
            description: Add new comment to a post,
            function_signature: async function addComment(postId: string, content: string): Promise<Comment>
        },
        {
            type: server_action,
            name: fetchUserProfile,
            description: Fetch user profile data and posts,
            function_signature: async function fetchUserProfile(userId: string): Promise<UserProfile>
        },
        {
            type: server_action,
            name: updateProfile,
            description: Update user profile information,
            function_signature: async function updateProfile(userId: string, data: ProfileData): Promise<UserProfile>
        },
        {
            type: component,
            name: PostCard,
            description: Card component for displaying post preview on home page,
            props: "{title: string, excerpt: string, author: Author, date: string, onClick: () => void}"
        },
        {
            type: component,
            name: PostFilter,
            description: Filter and sort controls for post list,
            props: "{onFilterChange: (filters: object) => void, onSortChange: (sort: string) => void}"
        },
        {
            type: component,
            name: RichTextEditor,
            description: Rich text editor component for creating posts,
            props: "{value: string, onChange: (content: string) => void, onImageUpload: (file: File) => Promise<string>}"
        },
        {
            type: component,
            name: CommentSection,
            description: Comments display and input component,
            props: "{comments: Comment[], postId: string, onAddComment: (content: string) => void}"
        },
        {
            type: component,
            name: ProfileHeader,
            description: User profile information display component,
            props: "{user: UserProfile, isEditable: boolean, onEdit: () => void}"
        },
        {
            type: page,
            name: HomePage,
            description: Landing page with post list,
            required_components: ["PostCard", "PostFilter"],
            required_actions: ["fetchPosts"],
            route: "/"
        },
        {
            type: page,
            name: PostDetailPage,
            description: Full post display page,
            required_components: ["CommentSection"],
            required_actions: ["fetchPostById", "fetchComments", "addComment"],
            route: "/post/[id]"
        },
        {
            type: page,
            name: NewPostPage,
            description: Create new post page,
            required_components: ["RichTextEditor"],
            required_actions: ["createPost"],
            route: "/new"
        },
        {
            type: page,
            name: ProfilePage,
            description: User profile page,
            required_components: ["ProfileHeader", "PostCard"],
            required_actions: ["fetchUserProfile", "updateProfile"],
            route: "/profile"
        }
    ]"""

    expected = [
        {
            "type": "server_action",
            "name": "fetchPosts",
            "description": "Fetch paginated blog posts with sorting and filtering",
            "function_signature": "async function fetchPosts(page: number, sort: string, filters: object): Promise<PostList>"
        },
        {
            "type": "server_action",
            "name": "fetchPostById",
            "description": "Fetch single post with full content and metadata",
            "function_signature": "async function fetchPostById(id: string): Promise<Post>"
        },
        {
            "type": "server_action",
            "name": "createPost",
            "description": "Create new blog post with content and images",
            "function_signature": "async function createPost(title: string, content: string, images: File[]): Promise<Post>"
        },
        {
            "type": "server_action",
            "name": "fetchComments",
            "description": "Fetch comments for a post",
            "function_signature": "async function fetchComments(postId: string): Promise<Comment[]>"
        },
        {
            "type": "server_action",
            "name": "addComment",
            "description": "Add new comment to a post",
            "function_signature": "async function addComment(postId: string, content: string): Promise<Comment>"
        },
        {
            "type": "server_action",
            "name": "fetchUserProfile",
            "description": "Fetch user profile data and posts",
            "function_signature": "async function fetchUserProfile(userId: string): Promise<UserProfile>"
        },
        {
            "type": "server_action",
            "name": "updateProfile",
            "description": "Update user profile information",
            "function_signature": "async function updateProfile(userId: string, data: ProfileData): Promise<UserProfile>"
        },
        {
            "type": "component",
            "name": "PostCard",
            "description": "Card component for displaying post preview on home page",
            "props": "{title: string, excerpt: string, author: Author, date: string, onClick: () => void}"
        },
        {
            "type": "component",
            "name": "PostFilter",
            "description": "Filter and sort controls for post list",
            "props": "{onFilterChange: (filters: object) => void, onSortChange: (sort: string) => void}"
        },
        {
            "type": "component",
            "name": "RichTextEditor",
            "description": "Rich text editor component for creating posts",
            "props": "{value: string, onChange: (content: string) => void, onImageUpload: (file: File) => Promise<string>}"
        },
        {
            "type": "component",
            "name": "CommentSection",
            "description": "Comments display and input component",
            "props": "{comments: Comment[], postId: string, onAddComment: (content: string) => void}"
        },
        {
            "type": "component",
            "name": "ProfileHeader",
            "description": "User profile information display component",
            "props": "{user: UserProfile, isEditable: boolean, onEdit: () => void}"
        },
        {
            "type": "page",
            "name": "HomePage",
            "description": "Landing page with post list",
            "required_components": ["PostCard", "PostFilter"],
            "required_actions": ["fetchPosts"],
            "route": "/"
        },
        {
            "type": "page",
            "name": "PostDetailPage",
            "description": "Full post display page",
            "required_components": ["CommentSection"],
            "required_actions": ["fetchPostById", "fetchComments", "addComment"],
            "route": "/post/[id]"
        },
        {
            "type": "page",
            "name": "NewPostPage",
            "description": "Create new post page",
            "required_components": ["RichTextEditor"],
            "required_actions": ["createPost"],
            "route": "/new"
        },
        {
            "type": "page",
            "name": "ProfilePage",
            "description": "User profile page",
            "required_components": ["ProfileHeader", "PostCard"],
            "required_actions": ["fetchUserProfile", "updateProfile"],
            "route": "/profile"
        }
    ]
    
    case_parse(data, List[Union[ServerActionTask, PageTask, ComponentTask]], expected)


def test_extend():
    class Person(BaseModel):
        name: str
    
    class Employee(Person):
        job: str
    
    data = """So the employee is: { "name": "john", "job": "MLE" }"""
    expected = { "name": "john", "job": "MLE" }
    case_parse(data, Employee, expected)
