Metadata-Version: 2.1
Name: partisan-cats
Version: 0.1.0
Summary: A comprehensive toolset for data management, hashing operations, JSON conversions, and more.
Home-page: UNKNOWN
Author: Abbas Faramarzi Filabadi
Author-email: abbasfaramarzi068@gmail.com
License: MIT
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE

<link rel="stylesheet" href="oscat/docs/styles.css">


<div class="container">
    <img alt="License" src="partisan_cats/docs/catsbanner.svg"/>
    <a href="https://github.com/abbasfaramarzi/ocat" class="github-button" target="_blank">
        <img src="partisan_cats/docs/GitHub-Logo.wine .svg" alt="GitHub Logo" style="width: 40px; height: 40px; margin-right: 5px;"/>
        PARTISAN CAT
    </a>
</div>

---

## Exploring the Capabilities of Partisan Cat Project

The Partisan Cat Project is a powerful toolset designed for efficient data management, hashing operations, JSON conversions, and other advanced functionalities. The project is structured with modular classes, each serving specific purposes that contribute to the overall capability of the project. In this article, we'll explore the key features and demonstrate some examples of how these capabilities can be utilized.

### Key Features

1. **Data Management:**
   - Manage and manipulate data structures such as dictionaries, lists, and sets.
   - Perform various set operations, manage cursor positions within directories, and handle file operations seamlessly.

2. **Hashing Operations:**
   - Utilize SHA-256 hashing to securely hash and compare data.
   - Ensure data integrity and verify data authenticity with ease.

3. **JSON Conversions:**
   - Convert Python data structures to JSON format and vice versa.
   - Handle JSON data effectively for web applications, APIs, and data storage.

4. **Property and Method Inheritance:**
   - Leverage inheritance to create robust classes that combine multiple functionalities.
   - Extend and customize classes for specific use cases without redundancy.

### Example Usage

#### 1. Managing Dictionaries with `CatDict`

The `CatDict` class provides comprehensive tools for working with dictionary data, including hashing and JSON conversion.

```python
from partisan_cats.magics.cat_dict import CatDict

if __name__ == "__main__":
    students_info = CatDict({})
    students_info.abbas = CatDict({})
    students_info.abbas.age = 34
    students_info.abbas.python_start = "97!100"
    students_info.arshia = CatDict({})
    students_info.arshia.age = 8
    students_info.arshia.python_start = "64!100"
    students_info.sara = CatDict({})
    students_info.sara.age = 37
    students_info.sara.python_start = "80!100"
    students_info['fatemeh'] = CatDict({'python_start' : "80!100"})
    print(students_info.fatemeh.python_start)  # Output: 80!100
    print(students_info.sara.is_equal_with_hash_of(students_info.sara.value_str))
```

#### 2. Working with Lists using `CatListTool`

The `CatListTool` class is designed for scenarios that require advanced list management and operations.

```python
from partisan_cats.magics.cat_list import CatListTool

if __name__ == "__main__":
    students = ["Arshia", "Abbas", "Sara"]
    students_cat_list = CatListTool(students)

    students = ["Jim", "Bill", "Case"]
    students_cat_list = CatListTool(students)
    students_cat_list.loop = True
    print(students_cat_list.previous)  # Output: Case
```

#### 3. Handling Set Operations with `CatSetType`

The `CatSetType` class provides methods for performing set operations on lists, ensuring uniqueness of elements.

```python
from partisan_cats.vars.cat_set import CatSetVars
from partisan_cats.magics.cat_set import CatSetMagics
from partisan_cats.statics.cat_set import CatSetStatics
from partisan_cats.funcs.cat_set import CatSetFuncs
from partisan_cats.properties.cat_set import CatSetProperties

class CatSetType(
    CatSetVars,
    CatSetMagics,
    CatSetStatics,
    CatSetFuncs,
    CatSetProperties,
):
    pass

if __name__ == "__main__":
    unique_numbers = CatSetType([1, 2, 2, 3, 4])
    print(unique_numbers)  # Output: {1, 2, 3, 4}
```

### Conclusion

The Partisan Cat Project offers a wide range of functionalities that can be applied to various data management and processing tasks. Its modular design allows users to extend and customize the toolset to fit their specific needs. Whether you're working with dictionaries, lists, or sets, or need secure data hashing and JSON conversions, the Partisan Cat Project provides a comprehensive solution.

With the examples provided, you can start exploring and utilizing the capabilities of this project to enhance your workflows and applications.

--- 


