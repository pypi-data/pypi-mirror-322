# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from alvenir_grpc_contracts.asr.v1 import asr_pb2 as alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in alvenir_grpc_contracts/asr/v1/asr_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ASRServiceStub(object):
    """The ASRService provides methods for streaming audio and getting transcriptions.
    The service can be used in 2 ways:
    1. StreamAudio until end of stream, then ask for transcription. This is done with StreamAudio and GetTranscription.
    2. Stream and receive partial transcriptions in real-time. This is done with BidiStreamAudio.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamAudio = channel.stream_unary(
                '/alvenir_grpc_contracts.asr.v1.ASRService/StreamAudio',
                request_serializer=alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2.StreamAudioRequest.SerializeToString,
                response_deserializer=alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2.StreamAudioResponse.FromString,
                _registered_method=True)
        self.GetTranscription = channel.unary_unary(
                '/alvenir_grpc_contracts.asr.v1.ASRService/GetTranscription',
                request_serializer=alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2.GetTranscriptionRequest.SerializeToString,
                response_deserializer=alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2.GetTranscriptionResponse.FromString,
                _registered_method=True)
        self.BidiStreamAudio = channel.stream_stream(
                '/alvenir_grpc_contracts.asr.v1.ASRService/BidiStreamAudio',
                request_serializer=alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2.BidiStreamAudioRequest.SerializeToString,
                response_deserializer=alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2.BidiStreamAudioResponse.FromString,
                _registered_method=True)


class ASRServiceServicer(object):
    """The ASRService provides methods for streaming audio and getting transcriptions.
    The service can be used in 2 ways:
    1. StreamAudio until end of stream, then ask for transcription. This is done with StreamAudio and GetTranscription.
    2. Stream and receive partial transcriptions in real-time. This is done with BidiStreamAudio.
    """

    def StreamAudio(self, request_iterator, context):
        """StreamAudio streams audio data to the ASR service. The audio data is sent in chunks.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTranscription(self, request, context):
        """GetTranscription gets the transcription of the audio data that was streamed to the ASR service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BidiStreamAudio(self, request_iterator, context):
        """BidiStreamAudio streams audio data to the ASR service and receives partial transcriptions in real-time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ASRServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamAudio': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamAudio,
                    request_deserializer=alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2.StreamAudioRequest.FromString,
                    response_serializer=alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2.StreamAudioResponse.SerializeToString,
            ),
            'GetTranscription': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTranscription,
                    request_deserializer=alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2.GetTranscriptionRequest.FromString,
                    response_serializer=alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2.GetTranscriptionResponse.SerializeToString,
            ),
            'BidiStreamAudio': grpc.stream_stream_rpc_method_handler(
                    servicer.BidiStreamAudio,
                    request_deserializer=alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2.BidiStreamAudioRequest.FromString,
                    response_serializer=alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2.BidiStreamAudioResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'alvenir_grpc_contracts.asr.v1.ASRService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('alvenir_grpc_contracts.asr.v1.ASRService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ASRService(object):
    """The ASRService provides methods for streaming audio and getting transcriptions.
    The service can be used in 2 ways:
    1. StreamAudio until end of stream, then ask for transcription. This is done with StreamAudio and GetTranscription.
    2. Stream and receive partial transcriptions in real-time. This is done with BidiStreamAudio.
    """

    @staticmethod
    def StreamAudio(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/alvenir_grpc_contracts.asr.v1.ASRService/StreamAudio',
            alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2.StreamAudioRequest.SerializeToString,
            alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2.StreamAudioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTranscription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alvenir_grpc_contracts.asr.v1.ASRService/GetTranscription',
            alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2.GetTranscriptionRequest.SerializeToString,
            alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2.GetTranscriptionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BidiStreamAudio(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/alvenir_grpc_contracts.asr.v1.ASRService/BidiStreamAudio',
            alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2.BidiStreamAudioRequest.SerializeToString,
            alvenir__grpc__contracts_dot_asr_dot_v1_dot_asr__pb2.BidiStreamAudioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
