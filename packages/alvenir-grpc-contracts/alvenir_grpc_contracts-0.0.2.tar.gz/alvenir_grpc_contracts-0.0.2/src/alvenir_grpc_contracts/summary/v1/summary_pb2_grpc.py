# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from alvenir_grpc_contracts.summary.v1 import summary_pb2 as alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2
from alvenir_grpc_contracts.types.v1 import ping_pb2 as alvenir__grpc__contracts_dot_types_dot_v1_dot_ping__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in alvenir_grpc_contracts/summary/v1/summary_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SummaryServiceStub(object):
    """The summary service provides a way to turn streamed audio into a transcription, and then summarize the transcription.
    The service is designed to stream in real time, and afterwards ask for a response.
    If realtime transcription is wanted look at the module alvenir.asr.v1
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamAudio = channel.stream_unary(
                '/alvenir_grpc_contracts.summary.v1.SummaryService/StreamAudio',
                request_serializer=alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2.StreamAudioRequest.SerializeToString,
                response_deserializer=alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2.StreamAudioResponse.FromString,
                _registered_method=True)
        self.GetSummary = channel.unary_unary(
                '/alvenir_grpc_contracts.summary.v1.SummaryService/GetSummary',
                request_serializer=alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2.GetSummaryRequest.SerializeToString,
                response_deserializer=alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2.GetSummaryResponse.FromString,
                _registered_method=True)
        self.StreamAndGetSummary = channel.stream_unary(
                '/alvenir_grpc_contracts.summary.v1.SummaryService/StreamAndGetSummary',
                request_serializer=alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2.StreamAndGetSummaryRequest.SerializeToString,
                response_deserializer=alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2.StreamAndGetSummaryResponse.FromString,
                _registered_method=True)
        self.Ping = channel.unary_unary(
                '/alvenir_grpc_contracts.summary.v1.SummaryService/Ping',
                request_serializer=alvenir__grpc__contracts_dot_types_dot_v1_dot_ping__pb2.PingRequest.SerializeToString,
                response_deserializer=alvenir__grpc__contracts_dot_types_dot_v1_dot_ping__pb2.PingResponse.FromString,
                _registered_method=True)


class SummaryServiceServicer(object):
    """The summary service provides a way to turn streamed audio into a transcription, and then summarize the transcription.
    The service is designed to stream in real time, and afterwards ask for a response.
    If realtime transcription is wanted look at the module alvenir.asr.v1
    """

    def StreamAudio(self, request_iterator, context):
        """StreamAudio streams audio data to the server. The server will respond with a call_id that can be used to get the summary with the GetSummary method.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSummary(self, request, context):
        """GetSummary gets the summary of the audio data that was streamed to the server. The call_id is used to identify the audio data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamAndGetSummary(self, request_iterator, context):
        """Stream audio and get summary directly back
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Send a ping request with a wait time defined. Server should respons after waiting the defined time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SummaryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamAudio': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamAudio,
                    request_deserializer=alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2.StreamAudioRequest.FromString,
                    response_serializer=alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2.StreamAudioResponse.SerializeToString,
            ),
            'GetSummary': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSummary,
                    request_deserializer=alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2.GetSummaryRequest.FromString,
                    response_serializer=alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2.GetSummaryResponse.SerializeToString,
            ),
            'StreamAndGetSummary': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamAndGetSummary,
                    request_deserializer=alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2.StreamAndGetSummaryRequest.FromString,
                    response_serializer=alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2.StreamAndGetSummaryResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=alvenir__grpc__contracts_dot_types_dot_v1_dot_ping__pb2.PingRequest.FromString,
                    response_serializer=alvenir__grpc__contracts_dot_types_dot_v1_dot_ping__pb2.PingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'alvenir_grpc_contracts.summary.v1.SummaryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('alvenir_grpc_contracts.summary.v1.SummaryService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SummaryService(object):
    """The summary service provides a way to turn streamed audio into a transcription, and then summarize the transcription.
    The service is designed to stream in real time, and afterwards ask for a response.
    If realtime transcription is wanted look at the module alvenir.asr.v1
    """

    @staticmethod
    def StreamAudio(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/alvenir_grpc_contracts.summary.v1.SummaryService/StreamAudio',
            alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2.StreamAudioRequest.SerializeToString,
            alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2.StreamAudioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSummary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alvenir_grpc_contracts.summary.v1.SummaryService/GetSummary',
            alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2.GetSummaryRequest.SerializeToString,
            alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2.GetSummaryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamAndGetSummary(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/alvenir_grpc_contracts.summary.v1.SummaryService/StreamAndGetSummary',
            alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2.StreamAndGetSummaryRequest.SerializeToString,
            alvenir__grpc__contracts_dot_summary_dot_v1_dot_summary__pb2.StreamAndGetSummaryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alvenir_grpc_contracts.summary.v1.SummaryService/Ping',
            alvenir__grpc__contracts_dot_types_dot_v1_dot_ping__pb2.PingRequest.SerializeToString,
            alvenir__grpc__contracts_dot_types_dot_v1_dot_ping__pb2.PingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
