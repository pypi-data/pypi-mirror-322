from _typeshed import Incomplete
from dataclasses import dataclass
from decimal import Decimal
from eskmo.base.mvtype import LAST_REPLY as LAST_REPLY, MARKET_PRICE as MARKET_PRICE, MIT_ORDER as MIT_ORDER, ORDER as ORDER, ORDER_LAST_PRICE as ORDER_LAST_PRICE, ORDER_VOLUME_DEAL as ORDER_VOLUME_DEAL, ORDER_VOLUME_REMAIN as ORDER_VOLUME_REMAIN, SYMBOL_ALL as SYMBOL_ALL
from eskmo.const.skcom import BUY_ZH as BUY_ZH, SELL_ZH as SELL_ZH, SK_REPLY_BUYSELL_REMAP_BUY_OR_SELL as SK_REPLY_BUYSELL_REMAP_BUY_OR_SELL, SK_REPLY_KEY_NO as SK_REPLY_KEY_NO, SK_REPLY_SYMBOL_CODE as SK_REPLY_SYMBOL_CODE, SK_STRATEGY_SMART_KEY_NO as SK_STRATEGY_SMART_KEY_NO, SK_STRATEGY_STOCK_NO as SK_STRATEGY_STOCK_NO, isReplyBuy as isReplyBuy, isReplySell as isReplySell

class OrderHelper:
    @staticmethod
    def isBuy(order): ...
    @staticmethod
    def isSell(order): ...

@dataclass
class OrdersOnPrice:
    symbolCode: str = ...
    orders: dict[str, dict] = ...
    remainVolume: int = ...
    dealVolume: int = ...
    def getAllSeqNo(self): ...
    def hasVolumeRemained(self): ...
    def updateVolume(self) -> None: ...
    def add(self, order) -> None: ...
    def __init__(self, symbolCode=..., orders=..., remainVolume=..., dealVolume=...) -> None: ...

@dataclass
class BidAskOrderCache:
    symbolCode: str = ...
    bids: dict[str, OrdersOnPrice] = ...
    asks: dict[str, OrdersOnPrice] = ...
    lastRemainBidVolumes: Decimal = ...
    lastRemainAskVolumes: Decimal = ...
    lastDealBidVolumes: Decimal = ...
    lastDealAskVolumes: Decimal = ...
    def updateSymbolCode(self, symbolCode) -> None: ...
    def clear(self) -> None: ...
    @staticmethod
    def getOrderTypeFromTaskData(data): ...
    def isPriceClear(self, price, orderType): ...
    def getAllSeqNoFromAllBids(self): ...
    def getAllSeqNoFromAllAsks(self): ...
    def getAllSeqNoFromBidOnPrice(self, price): ...
    def getAllSeqNoFromAskOnPrice(self, price): ...
    def generateTasks(self, type=...): ...
    def generateBidSumTask(self, orderType=...): ...
    def generateAskSumTask(self, orderType=...): ...
    def generateSumTasks(self, orderType=...): ...
    def initOrdersOnPrice(self, order) -> None: ...
    def addToCache(self, order) -> None: ...
    def getClearBidData(self, price): ...
    def getClearAskData(self, price): ...
    def getCacheBidTask(self, price, type=...): ...
    def getCacheAskTask(self, price, type=...): ...
    def removeFromCache(self, keyNo, type=...): ...
    def __init__(self, symbolCode=..., bids=..., asks=..., lastRemainBidVolumes=..., lastRemainAskVolumes=..., lastDealBidVolumes=..., lastDealAskVolumes=...) -> None: ...

RENDER_MAP: Incomplete
RENDER_CANCEL_ALL_MAP: Incomplete

@dataclass
class BidAskRenderTask:
    price: float = ...
    remainVolume: int = ...
    dealVolume: int = ...
    orderType: str = ...
    data: dict = ...
    def isValidNewRender(self): ...
    def isEmptyData(self): ...
    def setDataClear(self, type=..., buySell=...) -> None: ...
    def updateData(self, type=..., buySell=...) -> None: ...
    def getCancelAllData(self, buySell=..., isClear: bool = False): ...
    def updateOnPrice(self, dataOnPrice: OrdersOnPrice, type=..., buySell=...): ...
    def __init__(self, price=..., remainVolume=..., dealVolume=..., orderType=..., data=...) -> None: ...

@dataclass
class BidAskUpdateData:
    name: str = ...
    bids: dict[str, OrdersOnPrice] = ...
    bidRemainTotal: int = ...
    bidDealTotal: int = ...
    asks: dict[str, OrdersOnPrice] = ...
    askRemainTotal: int = ...
    askDealTotal: int = ...
    def hasOrderRemained(order): ...
    def initOrdersOnPrice(self, order) -> None: ...
    def addToUpdate(self, order) -> None: ...
    def __init__(self, name=..., bids=..., bidRemainTotal=..., bidDealTotal=..., asks=..., askRemainTotal=..., askDealTotal=...) -> None: ...

@dataclass
class BidAskClearData:
    name: str = ...
    bids: dict[str, dict[str, bool]] = ...
    asks: dict[str, dict[str, bool]] = ...
    def addToClear(self, order) -> None: ...
    def __init__(self, name=..., bids=..., asks=...) -> None: ...
