# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/regularize/regularize_callback.ipynb.

# %% auto 0
__all__ = ['RegularizeCallback']

# %% ../../nbs/regularize/regularize_callback.ipynb 3
from fastai.callback.all import *
from fastcore.basics import store_attr
from ..core.criteria import *
from ..core.granularity import *

import torch
import torch.nn as nn
import torch.nn.functional as F

# %% ../../nbs/regularize/regularize_callback.ipynb 4
class RegularizeCallback(Callback):
    "Callback to apply grouped weight decay"
    def __init__(self, g, wd=0.01, layer_type=nn.Conv2d):
        store_attr()

    def after_loss(self):
        reg = self.get_norm()
        self.learn.loss_grad += reg
        self.learn.loss = self.learn.loss_grad.clone()
        
    def get_norm(self):
        return self.wd*torch.stack([large_final.f(m.weight)[None].sum(Granularities.get_dim(m, self.g)).sum() for m in self.learn.modules() if isinstance(m, self.layer_type)]).sum()
