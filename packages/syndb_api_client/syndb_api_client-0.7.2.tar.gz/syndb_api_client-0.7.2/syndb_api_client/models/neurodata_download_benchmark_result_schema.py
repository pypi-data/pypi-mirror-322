# coding: utf-8

"""
    Synapse DB

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.7.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Annotated, Self


class NeurodataDownloadBenchmarkResultSchema(BaseModel):
    """
    NeurodataDownloadBenchmarkResultSchema
    """  # noqa: E501

    creation_datetime: datetime
    payload_byte_size: StrictInt
    speed: StrictInt
    interval: StrictStr
    continent: Optional[StrictStr]
    country_alpha2: Optional[Annotated[str, Field(strict=True)]]
    city: Optional[StrictStr]
    dataset_ids: List[StrictStr]
    __properties: ClassVar[List[str]] = [
        "creation_datetime",
        "payload_byte_size",
        "speed",
        "interval",
        "continent",
        "country_alpha2",
        "city",
        "dataset_ids",
    ]

    @field_validator("country_alpha2")
    def country_alpha2_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\w{2}$", value):
            raise ValueError(r"must validate the regular expression /^\w{2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NeurodataDownloadBenchmarkResultSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if continent (nullable) is None
        # and model_fields_set contains the field
        if self.continent is None and "continent" in self.model_fields_set:
            _dict["continent"] = None

        # set to None if country_alpha2 (nullable) is None
        # and model_fields_set contains the field
        if self.country_alpha2 is None and "country_alpha2" in self.model_fields_set:
            _dict["country_alpha2"] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict["city"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NeurodataDownloadBenchmarkResultSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "creation_datetime": obj.get("creation_datetime"),
                "payload_byte_size": obj.get("payload_byte_size"),
                "speed": obj.get("speed"),
                "interval": obj.get("interval"),
                "continent": obj.get("continent"),
                "country_alpha2": obj.get("country_alpha2"),
                "city": obj.get("city"),
                "dataset_ids": obj.get("dataset_ids"),
            }
        )
        return _obj
