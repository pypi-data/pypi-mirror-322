# coding: utf-8

"""
    API Alegra Proveedor ElectrÃ³nico Colombia

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.create_invoice_request_items_inner import CreateInvoiceRequestItemsInner

class TestCreateInvoiceRequestItemsInner(unittest.TestCase):
    """CreateInvoiceRequestItemsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateInvoiceRequestItemsInner:
        """Test CreateInvoiceRequestItemsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateInvoiceRequestItemsInner`
        """
        model = CreateInvoiceRequestItemsInner()
        if include_optional:
            return CreateInvoiceRequestItemsInner(
                code = '',
                standard_code = openapi_client.models.create_equivalent_document_pos_request_items_inner_code.createEquivalentDocumentPos_request_items_inner_code(
                    identification_id = '', 
                    id = '', ),
                description = '',
                price = 1.337,
                price_reference = openapi_client.models.create_invoice_request_items_inner_all_of_price_reference.createInvoice_request_items_inner_allOf_priceReference(
                    price_amount = 0.01, 
                    price_type_code = '1', ),
                discount = 1.337,
                discount_amount = 1.337,
                quantity = 1.337,
                unit_code = '',
                note = '',
                subtotal = 1.337,
                tax_amount = 1.337,
                taxes = [
                    openapi_client.models.create_invoice_request_items_inner_all_of_taxes_inner.createInvoice_request_items_inner_allOf_taxes_inner(
                        tax_code = '', 
                        tax_amount = 1.337, 
                        tax_percentage = '', 
                        taxable_amount = 1.337, 
                        tax_base_unit_measure = 1.337, 
                        tax_per_unit_amount = 1.337, )
                    ],
                third_party_information = openapi_client.models.create_invoice_request_items_inner_all_of_third_party_information.createInvoice_request_items_inner_allOf_thirdPartyInformation(
                    identification_type = '', 
                    identification_number = '', 
                    dv = '', ),
                withholdings = [
                    openapi_client.models.create_invoice_request_items_inner_all_of_taxes_inner.createInvoice_request_items_inner_allOf_taxes_inner(
                        tax_code = '', 
                        tax_amount = 1.337, 
                        tax_percentage = '', 
                        taxable_amount = 1.337, 
                        tax_base_unit_measure = 1.337, 
                        tax_per_unit_amount = 1.337, )
                    ],
                pack_size = 0,
                brand_name = '',
                model_name = '',
                transport_sector = openapi_client.models.create_invoice_request_items_inner_all_of_transport_sector.createInvoice_request_items_inner_allOf_transportSector(
                    is_registered_in_rndc = True, 
                    number_rndc = 1.337, 
                    number_remesa = '', 
                    freight_amount = 1.337, 
                    quantity_transported = 1.337, 
                    unit_code = '', 
                    invoice_reference = '', )
            )
        else:
            return CreateInvoiceRequestItemsInner(
                description = '',
                price = 1.337,
                quantity = 1.337,
                unit_code = '',
                subtotal = 1.337,
                tax_amount = 1.337,
        )
        """

    def testCreateInvoiceRequestItemsInner(self):
        """Test CreateInvoiceRequestItemsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
