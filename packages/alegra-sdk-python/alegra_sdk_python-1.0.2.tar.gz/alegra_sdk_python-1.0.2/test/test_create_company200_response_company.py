# coding: utf-8

"""
    API Alegra Proveedor ElectrÃ³nico Colombia

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.create_company200_response_company import CreateCompany200ResponseCompany

class TestCreateCompany200ResponseCompany(unittest.TestCase):
    """CreateCompany200ResponseCompany unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateCompany200ResponseCompany:
        """Test CreateCompany200ResponseCompany
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateCompany200ResponseCompany`
        """
        model = CreateCompany200ResponseCompany()
        if include_optional:
            return CreateCompany200ResponseCompany(
                id = '',
                name = '',
                trade_name = '',
                identification = '',
                dv = '0',
                use_alegra_certificate = True,
                government_status = openapi_client.models.get_companies_200_response_companies_inner_government_status.getCompanies_200_response_companies_inner_governmentStatus(
                    payrolls = 'AUTHORIZED', 
                    invoices = 'AUTHORIZED', ),
                certificate = openapi_client.models.get_companies_200_response_companies_inner_certificate.getCompanies_200_response_companies_inner_certificate(
                    name = '', 
                    extension = '', 
                    content = 'YQ==', 
                    password = '', ),
                notification_by_email = openapi_client.models.get_companies_200_response_companies_inner_notification_by_email.getCompanies_200_response_companies_inner_notificationByEmail(
                    enabled = True, 
                    message = '', ),
                webhooks = openapi_client.models.get_companies_200_response_companies_inner_webhooks.getCompanies_200_response_companies_inner_webhooks(
                    general = openapi_client.models.get_companies_200_response_companies_inner_webhooks_general.getCompanies_200_response_companies_inner_webhooks_general(
                        government_status_changed = openapi_client.models.get_companies_200_response_companies_inner_webhooks_general_government_status_changed.getCompanies_200_response_companies_inner_webhooks_general_governmentStatusChanged(
                            url = '', 
                            headers = openapi_client.models.headers.headers(), 
                            status = 'active', ), ), 
                    payrolls = openapi_client.models.get_companies_200_response_companies_inner_webhooks_payrolls.getCompanies_200_response_companies_inner_webhooks_payrolls(
                        emission_finished = openapi_client.models.get_companies_200_response_companies_inner_webhooks_payrolls_emission_finished.getCompanies_200_response_companies_inner_webhooks_payrolls_emissionFinished(
                            url = '', 
                            headers = openapi_client.models.headers.headers(), 
                            status = 'active', ), ), 
                    invoices = openapi_client.models.get_companies_200_response_companies_inner_webhooks_invoices.getCompanies_200_response_companies_inner_webhooks_invoices(
                        emission_finished = openapi_client.models.get_companies_200_response_companies_inner_webhooks_invoices_emission_finished.getCompanies_200_response_companies_inner_webhooks_invoices_emissionFinished(
                            url = '', 
                            headers = openapi_client.models.headers.headers(), 
                            status = 'active', ), ), 
                    credit_notes = openapi_client.models.get_companies_200_response_companies_inner_webhooks_credit_notes.getCompanies_200_response_companies_inner_webhooks_creditNotes(
                        emission_finished = openapi_client.models.get_companies_200_response_companies_inner_webhooks_credit_notes_emission_finished.getCompanies_200_response_companies_inner_webhooks_creditNotes_emissionFinished(
                            url = '', 
                            headers = openapi_client.models.headers.headers(), 
                            status = 'active', ), ), 
                    debit_notes = openapi_client.models.get_companies_200_response_companies_inner_webhooks_debit_notes.getCompanies_200_response_companies_inner_webhooks_debitNotes(
                        emission_finished = openapi_client.models.get_companies_200_response_companies_inner_webhooks_debit_notes_emission_finished.getCompanies_200_response_companies_inner_webhooks_debitNotes_emissionFinished(
                            url = '', 
                            headers = openapi_client.models.headers.headers(), 
                            status = 'active', ), ), 
                    equivalent_documents = openapi_client.models.get_companies_200_response_companies_inner_webhooks_equivalent_documents.getCompanies_200_response_companies_inner_webhooks_equivalentDocuments(), 
                    support_documents = openapi_client.models.get_companies_200_response_companies_inner_webhooks_support_documents.getCompanies_200_response_companies_inner_webhooks_supportDocuments(), ),
                organization_type = 1.337,
                identification_type = '',
                regime_code = '',
                tax_code = openapi_client.models.get_companies_200_response_companies_inner_tax_code.getCompanies_200_response_companies_inner_taxCode(
                    id = '', 
                    name = '', ),
                email = '',
                phone = '',
                address = openapi_client.models.get_companies_200_response_companies_inner_address.getCompanies_200_response_companies_inner_address(
                    address = '', 
                    city = '', 
                    department = '', 
                    country = '', )
            )
        else:
            return CreateCompany200ResponseCompany(
                name = '',
                identification = '',
                dv = '0',
                use_alegra_certificate = True,
        )
        """

    def testCreateCompany200ResponseCompany(self):
        """Test CreateCompany200ResponseCompany"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
