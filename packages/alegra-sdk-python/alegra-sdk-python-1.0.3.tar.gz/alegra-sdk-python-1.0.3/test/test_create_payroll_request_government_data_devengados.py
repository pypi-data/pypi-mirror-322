# coding: utf-8

"""
    API Alegra Proveedor ElectrÃ³nico Colombia

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.create_payroll_request_government_data_devengados import CreatePayrollRequestGovernmentDataDevengados

class TestCreatePayrollRequestGovernmentDataDevengados(unittest.TestCase):
    """CreatePayrollRequestGovernmentDataDevengados unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreatePayrollRequestGovernmentDataDevengados:
        """Test CreatePayrollRequestGovernmentDataDevengados
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreatePayrollRequestGovernmentDataDevengados`
        """
        model = CreatePayrollRequestGovernmentDataDevengados()
        if include_optional:
            return CreatePayrollRequestGovernmentDataDevengados(
                basico = openapi_client.models.create_payroll_request_government_data_devengados_basico.createPayroll_request_governmentData_Devengados_Basico(
                    dias_trabajados = 1.337, 
                    sueldo_trabajado = 1.337, ),
                transporte = [
                    openapi_client.models.create_payroll_request_government_data_devengados_transporte_inner.createPayroll_request_governmentData_Devengados_Transporte_inner(
                        auxilio_transporte = 1.337, 
                        viatico_manu_aloj_s = 1.337, 
                        viatico_manu_aloj_ns = 1.337, )
                    ],
                heds = openapi_client.models.create_payroll_request_government_data_devengados_heds.createPayroll_request_governmentData_Devengados_HEDs(
                    hed = [
                        openapi_client.models.create_payroll_request_government_data_devengados_heds_hed_inner.createPayroll_request_governmentData_Devengados_HEDs_HED_inner(
                            hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            cantidad = 1.337, 
                            porcentaje = '1', 
                            pago = 1.337, )
                        ], ),
                hens = openapi_client.models.create_payroll_request_government_data_devengados_hens.createPayroll_request_governmentData_Devengados_HENs(
                    hen = [
                        openapi_client.models.create_payroll_request_government_data_devengados_hens_hen_inner.createPayroll_request_governmentData_Devengados_HENs_HEN_inner(
                            hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            cantidad = 1.337, 
                            porcentaje = '2', 
                            pago = 1.337, )
                        ], ),
                hrns = openapi_client.models.create_payroll_request_government_data_devengados_hrns.createPayroll_request_governmentData_Devengados_HRNs(
                    hrn = [
                        openapi_client.models.create_payroll_request_government_data_devengados_hrns_hrn_inner.createPayroll_request_governmentData_Devengados_HRNs_HRN_inner(
                            hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            cantidad = 1.337, 
                            porcentaje = '3', 
                            pago = 1.337, )
                        ], ),
                heddfs = openapi_client.models.create_payroll_request_government_data_devengados_heddfs.createPayroll_request_governmentData_Devengados_HEDDFs(
                    heddf = [
                        openapi_client.models.create_payroll_request_government_data_devengados_heddfs_heddf_inner.createPayroll_request_governmentData_Devengados_HEDDFs_HEDDF_inner(
                            hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            cantidad = 1.337, 
                            porcentaje = '4', 
                            pago = 1.337, )
                        ], ),
                hrddfs = openapi_client.models.create_payroll_request_government_data_devengados_hrddfs.createPayroll_request_governmentData_Devengados_HRDDFs(
                    hrddf = [
                        openapi_client.models.create_payroll_request_government_data_devengados_hrddfs_hrddf_inner.createPayroll_request_governmentData_Devengados_HRDDFs_HRDDF_inner(
                            hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            cantidad = 1.337, 
                            porcentaje = '5', 
                            pago = 1.337, )
                        ], ),
                hendfs = openapi_client.models.create_payroll_request_government_data_devengados_hendfs.createPayroll_request_governmentData_Devengados_HENDFs(
                    hendf = [
                        openapi_client.models.create_payroll_request_government_data_devengados_hendfs_hendf_inner.createPayroll_request_governmentData_Devengados_HENDFs_HENDF_inner(
                            hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            cantidad = 1.337, 
                            porcentaje = '6', 
                            pago = 1.337, )
                        ], ),
                hrndfs = openapi_client.models.create_payroll_request_government_data_devengados_hrndfs.createPayroll_request_governmentData_Devengados_HRNDFs(
                    hrndf = [
                        openapi_client.models.create_payroll_request_government_data_devengados_hrndfs_hrndf_inner.createPayroll_request_governmentData_Devengados_HRNDFs_HRNDF_inner(
                            hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            cantidad = 1.337, 
                            porcentaje = '7', 
                            pago = 1.337, )
                        ], ),
                vacaciones = openapi_client.models.create_payroll_request_government_data_devengados_vacaciones.createPayroll_request_governmentData_Devengados_Vacaciones(
                    vacaciones_comunes = [
                        openapi_client.models.create_payroll_request_government_data_devengados_vacaciones_vacaciones_comunes_inner.createPayroll_request_governmentData_Devengados_Vacaciones_VacacionesComunes_inner(
                            fecha_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            fecha_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            cantidad = 1.337, 
                            pago = 1.337, )
                        ], 
                    vacaciones_compensadas = [
                        openapi_client.models.create_payroll_request_government_data_devengados_vacaciones_vacaciones_compensadas_inner.createPayroll_request_governmentData_Devengados_Vacaciones_VacacionesCompensadas_inner(
                            cantidad = 1.337, 
                            pago = 1.337, )
                        ], ),
                primas = openapi_client.models.create_payroll_request_government_data_devengados_primas.createPayroll_request_governmentData_Devengados_Primas(
                    cantidad = 1.337, 
                    pago = 1.337, 
                    pago_ns = 1.337, ),
                cesantias = openapi_client.models.create_payroll_request_government_data_devengados_cesantias.createPayroll_request_governmentData_Devengados_Cesantias(
                    pago = 1.337, 
                    porcentaje = 1.337, 
                    pago_intereses = 1.337, ),
                incapacidades = openapi_client.models.create_payroll_request_government_data_devengados_incapacidades.createPayroll_request_governmentData_Devengados_Incapacidades(
                    incapacidad = [
                        openapi_client.models.create_payroll_request_government_data_devengados_incapacidades_incapacidad_inner.createPayroll_request_governmentData_Devengados_Incapacidades_Incapacidad_inner(
                            fecha_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            fecha_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            cantidad = 1.337, 
                            tipo = 1.337, 
                            pago = 1.337, )
                        ], ),
                licencias = openapi_client.models.create_payroll_request_government_data_devengados_licencias.createPayroll_request_governmentData_Devengados_Licencias(
                    licencia_mp = [
                        openapi_client.models.create_payroll_request_government_data_devengados_licencias_licencia_mp_inner.createPayroll_request_governmentData_Devengados_Licencias_LicenciaMP_inner(
                            fecha_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            fecha_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            cantidad = 1.337, 
                            pago = 1.337, )
                        ], 
                    licencia_r = [
                        openapi_client.models.create_payroll_request_government_data_devengados_licencias_licencia_r_inner.createPayroll_request_governmentData_Devengados_Licencias_LicenciaR_inner(
                            fecha_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            fecha_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            cantidad = 1.337, 
                            pago = 1.337, )
                        ], 
                    licencia_nr = [
                        openapi_client.models.create_payroll_request_government_data_devengados_licencias_licencia_nr_inner.createPayroll_request_governmentData_Devengados_Licencias_LicenciaNR_inner(
                            fecha_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            fecha_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            cantidad = 1.337, )
                        ], ),
                bonificaciones = openapi_client.models.create_payroll_request_government_data_devengados_bonificaciones.createPayroll_request_governmentData_Devengados_Bonificaciones(
                    bonificacion = [
                        openapi_client.models.create_payroll_request_government_data_devengados_bonificaciones_bonificacion_inner.createPayroll_request_governmentData_Devengados_Bonificaciones_Bonificacion_inner(
                            bonificacion_s = 1.337, 
                            bonificacion_ns = 1.337, )
                        ], ),
                auxilios = openapi_client.models.create_payroll_request_government_data_devengados_auxilios.createPayroll_request_governmentData_Devengados_Auxilios(
                    auxilio = [
                        openapi_client.models.create_payroll_request_government_data_devengados_auxilios_auxilio_inner.createPayroll_request_governmentData_Devengados_Auxilios_Auxilio_inner(
                            auxilio_s = 1.337, 
                            auxilio_ns = 1.337, )
                        ], ),
                huelgas_legales = openapi_client.models.create_payroll_request_government_data_devengados_huelgas_legales.createPayroll_request_governmentData_Devengados_HuelgasLegales(
                    huelga_legal = [
                        openapi_client.models.create_payroll_request_government_data_devengados_huelgas_legales_huelga_legal_inner.createPayroll_request_governmentData_Devengados_HuelgasLegales_HuelgaLegal_inner(
                            fecha_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            fecha_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            cantidad = 1.337, )
                        ], ),
                otros_conceptos = openapi_client.models.create_payroll_request_government_data_devengados_otros_conceptos.createPayroll_request_governmentData_Devengados_OtrosConceptos(
                    otro_concepto = [
                        openapi_client.models.create_payroll_request_government_data_devengados_otros_conceptos_otro_concepto_inner.createPayroll_request_governmentData_Devengados_OtrosConceptos_OtroConcepto_inner(
                            descripcion_concepto = '', 
                            concepto_s = 1.337, 
                            concepto_ns = 1.337, )
                        ], ),
                compensaciones = openapi_client.models.create_payroll_request_government_data_devengados_compensaciones.createPayroll_request_governmentData_Devengados_Compensaciones(
                    compensacion = [
                        openapi_client.models.create_payroll_request_government_data_devengados_compensaciones_compensacion_inner.createPayroll_request_governmentData_Devengados_Compensaciones_Compensacion_inner(
                            compensacion_o = 1.337, 
                            compensacion_e = 1.337, )
                        ], ),
                bono_epctvs = openapi_client.models.create_payroll_request_government_data_devengados_bono_epctvs.createPayroll_request_governmentData_Devengados_BonoEPCTVs(
                    bono_epctv = [
                        openapi_client.models.create_payroll_request_government_data_devengados_bono_epctvs_bono_epctv_inner.createPayroll_request_governmentData_Devengados_BonoEPCTVs_BonoEPCTV_inner(
                            pago_s = 1.337, 
                            pago_ns = 1.337, 
                            pago_alimentacion_s = 1.337, 
                            pago_alimentacion_ns = 1.337, )
                        ], ),
                comisiones = openapi_client.models.create_payroll_request_government_data_devengados_comisiones.createPayroll_request_governmentData_Devengados_Comisiones(
                    comision = [
                        1.337
                        ], ),
                pagos_terceros = openapi_client.models.create_payroll_request_government_data_devengados_pagos_terceros.createPayroll_request_governmentData_Devengados_PagosTerceros(
                    pago_tercero = [
                        1.337
                        ], ),
                anticipos = openapi_client.models.create_payroll_request_government_data_devengados_anticipos.createPayroll_request_governmentData_Devengados_Anticipos(
                    anticipo = [
                        1.337
                        ], ),
                dotacion = 1.337,
                apoyo_sost = 1.337,
                teletrabajo = 1.337,
                bonif_retiro = 1.337,
                indemnizacion = 1.337,
                reintegro = 1.337
            )
        else:
            return CreatePayrollRequestGovernmentDataDevengados(
                basico = openapi_client.models.create_payroll_request_government_data_devengados_basico.createPayroll_request_governmentData_Devengados_Basico(
                    dias_trabajados = 1.337, 
                    sueldo_trabajado = 1.337, ),
        )
        """

    def testCreatePayrollRequestGovernmentDataDevengados(self):
        """Test CreatePayrollRequestGovernmentDataDevengados"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
