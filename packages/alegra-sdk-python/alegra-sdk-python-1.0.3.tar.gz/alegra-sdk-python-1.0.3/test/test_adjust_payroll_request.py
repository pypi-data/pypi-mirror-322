# coding: utf-8

"""
    API Alegra Proveedor ElectrÃ³nico Colombia

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.adjust_payroll_request import AdjustPayrollRequest

class TestAdjustPayrollRequest(unittest.TestCase):
    """AdjustPayrollRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdjustPayrollRequest:
        """Test AdjustPayrollRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdjustPayrollRequest`
        """
        model = AdjustPayrollRequest()
        if include_optional:
            return AdjustPayrollRequest(
                prefix = '0',
                number = 1.337,
                government_data = openapi_client.models.create_payroll_request_government_data.createPayroll_request_governmentData(
                    novedad = openapi_client.models.create_payroll_request_government_data_novedad.createPayroll_request_governmentData_Novedad(
                        cune_nov = '', ), 
                    periodo = openapi_client.models.create_payroll_request_government_data_periodo.createPayroll_request_governmentData_Periodo(
                        fecha_ingreso = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        tiempo_laborado = 1.337, 
                        fecha_retiro = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        fecha_liquidacion_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        fecha_liquidacion_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                    lugar_generacion_xml = openapi_client.models.create_payroll_request_government_data_lugar_generacion_xml.createPayroll_request_governmentData_LugarGeneracionXML(
                        pais = '', 
                        municipio_ciudad = '', ), 
                    informacion_general = openapi_client.models.create_payroll_request_government_data_informacion_general.createPayroll_request_governmentData_InformacionGeneral(
                        periodo_nomina = '', 
                        tipo_moneda = '', 
                        trm = 1.337, 
                        notas = '', ), 
                    empleador = openapi_client.models.create_payroll_request_government_data_empleador.createPayroll_request_governmentData_Empleador(
                        razon_social = '', 
                        primer_apellido = '', 
                        segundo_apellido = '', 
                        primer_nombre = '', 
                        otros_nombres = '', 
                        nit = 1.337, 
                        dv = 1.337, 
                        pais = '', 
                        municipio_ciudad = '', 
                        direccion = '', ), 
                    trabajador = openapi_client.models.create_payroll_request_government_data_trabajador.createPayroll_request_governmentData_Trabajador(
                        tipo_trabajador = '', 
                        sub_tipo_trabajador = '', 
                        alto_riesgo_pension = True, 
                        tipo_documento = '', 
                        numero_documento = 1.337, 
                        primer_apellido = '', 
                        segundo_apellido = '', 
                        primer_nombre = '', 
                        otros_nombres = '', 
                        lugar_trabajo_pais = '', 
                        lugar_trabajo_municipio_ciudad = '', 
                        lugar_trabajo_direccion = '', 
                        salario_integral = True, 
                        tipo_contrato = '', 
                        sueldo = 1.337, 
                        codigo_trabajador = '', ), 
                    pago = openapi_client.models.create_payroll_request_government_data_pago.createPayroll_request_governmentData_Pago(
                        forma = '', 
                        metodo = '', 
                        banco = '', 
                        tipo_cuenta = '', 
                        numero_cuenta = '', ), 
                    fechas_pagos = openapi_client.models.create_payroll_request_government_data_fechas_pagos.createPayroll_request_governmentData_FechasPagos(
                        fecha_pago = [
                            datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date()
                            ], ), 
                    devengados = openapi_client.models.create_payroll_request_government_data_devengados.createPayroll_request_governmentData_Devengados(
                        basico = openapi_client.models.create_payroll_request_government_data_devengados_basico.createPayroll_request_governmentData_Devengados_Basico(
                            dias_trabajados = 1.337, 
                            sueldo_trabajado = 1.337, ), 
                        transporte = [
                            openapi_client.models.create_payroll_request_government_data_devengados_transporte_inner.createPayroll_request_governmentData_Devengados_Transporte_inner(
                                auxilio_transporte = 1.337, 
                                viatico_manu_aloj_s = 1.337, 
                                viatico_manu_aloj_ns = 1.337, )
                            ], 
                        heds = openapi_client.models.create_payroll_request_government_data_devengados_heds.createPayroll_request_governmentData_Devengados_HEDs(
                            hed = [
                                openapi_client.models.create_payroll_request_government_data_devengados_heds_hed_inner.createPayroll_request_governmentData_Devengados_HEDs_HED_inner(
                                    hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    cantidad = 1.337, 
                                    porcentaje = '1', 
                                    pago = 1.337, )
                                ], ), 
                        hens = openapi_client.models.create_payroll_request_government_data_devengados_hens.createPayroll_request_governmentData_Devengados_HENs(
                            hen = [
                                openapi_client.models.create_payroll_request_government_data_devengados_hens_hen_inner.createPayroll_request_governmentData_Devengados_HENs_HEN_inner(
                                    hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    cantidad = 1.337, 
                                    porcentaje = '2', 
                                    pago = 1.337, )
                                ], ), 
                        hrns = openapi_client.models.create_payroll_request_government_data_devengados_hrns.createPayroll_request_governmentData_Devengados_HRNs(
                            hrn = [
                                openapi_client.models.create_payroll_request_government_data_devengados_hrns_hrn_inner.createPayroll_request_governmentData_Devengados_HRNs_HRN_inner(
                                    hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    cantidad = 1.337, 
                                    porcentaje = '3', 
                                    pago = 1.337, )
                                ], ), 
                        heddfs = openapi_client.models.create_payroll_request_government_data_devengados_heddfs.createPayroll_request_governmentData_Devengados_HEDDFs(
                            heddf = [
                                openapi_client.models.create_payroll_request_government_data_devengados_heddfs_heddf_inner.createPayroll_request_governmentData_Devengados_HEDDFs_HEDDF_inner(
                                    hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    cantidad = 1.337, 
                                    porcentaje = '4', 
                                    pago = 1.337, )
                                ], ), 
                        hrddfs = openapi_client.models.create_payroll_request_government_data_devengados_hrddfs.createPayroll_request_governmentData_Devengados_HRDDFs(
                            hrddf = [
                                openapi_client.models.create_payroll_request_government_data_devengados_hrddfs_hrddf_inner.createPayroll_request_governmentData_Devengados_HRDDFs_HRDDF_inner(
                                    hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    cantidad = 1.337, 
                                    porcentaje = '5', 
                                    pago = 1.337, )
                                ], ), 
                        hendfs = openapi_client.models.create_payroll_request_government_data_devengados_hendfs.createPayroll_request_governmentData_Devengados_HENDFs(
                            hendf = [
                                openapi_client.models.create_payroll_request_government_data_devengados_hendfs_hendf_inner.createPayroll_request_governmentData_Devengados_HENDFs_HENDF_inner(
                                    hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    cantidad = 1.337, 
                                    porcentaje = '6', 
                                    pago = 1.337, )
                                ], ), 
                        hrndfs = openapi_client.models.create_payroll_request_government_data_devengados_hrndfs.createPayroll_request_governmentData_Devengados_HRNDFs(
                            hrndf = [
                                openapi_client.models.create_payroll_request_government_data_devengados_hrndfs_hrndf_inner.createPayroll_request_governmentData_Devengados_HRNDFs_HRNDF_inner(
                                    hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    cantidad = 1.337, 
                                    porcentaje = '7', 
                                    pago = 1.337, )
                                ], ), 
                        vacaciones = openapi_client.models.create_payroll_request_government_data_devengados_vacaciones.createPayroll_request_governmentData_Devengados_Vacaciones(
                            vacaciones_comunes = [
                                openapi_client.models.create_payroll_request_government_data_devengados_vacaciones_vacaciones_comunes_inner.createPayroll_request_governmentData_Devengados_Vacaciones_VacacionesComunes_inner(
                                    fecha_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    fecha_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    cantidad = 1.337, 
                                    pago = 1.337, )
                                ], 
                            vacaciones_compensadas = [
                                openapi_client.models.create_payroll_request_government_data_devengados_vacaciones_vacaciones_compensadas_inner.createPayroll_request_governmentData_Devengados_Vacaciones_VacacionesCompensadas_inner(
                                    cantidad = 1.337, 
                                    pago = 1.337, )
                                ], ), 
                        primas = openapi_client.models.create_payroll_request_government_data_devengados_primas.createPayroll_request_governmentData_Devengados_Primas(
                            cantidad = 1.337, 
                            pago = 1.337, 
                            pago_ns = 1.337, ), 
                        cesantias = openapi_client.models.create_payroll_request_government_data_devengados_cesantias.createPayroll_request_governmentData_Devengados_Cesantias(
                            pago = 1.337, 
                            porcentaje = 1.337, 
                            pago_intereses = 1.337, ), 
                        incapacidades = openapi_client.models.create_payroll_request_government_data_devengados_incapacidades.createPayroll_request_governmentData_Devengados_Incapacidades(
                            incapacidad = [
                                openapi_client.models.create_payroll_request_government_data_devengados_incapacidades_incapacidad_inner.createPayroll_request_governmentData_Devengados_Incapacidades_Incapacidad_inner(
                                    fecha_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    fecha_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    cantidad = 1.337, 
                                    tipo = 1.337, 
                                    pago = 1.337, )
                                ], ), 
                        licencias = openapi_client.models.create_payroll_request_government_data_devengados_licencias.createPayroll_request_governmentData_Devengados_Licencias(
                            licencia_mp = [
                                openapi_client.models.create_payroll_request_government_data_devengados_licencias_licencia_mp_inner.createPayroll_request_governmentData_Devengados_Licencias_LicenciaMP_inner(
                                    fecha_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    fecha_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    cantidad = 1.337, 
                                    pago = 1.337, )
                                ], 
                            licencia_r = [
                                openapi_client.models.create_payroll_request_government_data_devengados_licencias_licencia_r_inner.createPayroll_request_governmentData_Devengados_Licencias_LicenciaR_inner(
                                    fecha_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    fecha_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    cantidad = 1.337, 
                                    pago = 1.337, )
                                ], 
                            licencia_nr = [
                                openapi_client.models.create_payroll_request_government_data_devengados_licencias_licencia_nr_inner.createPayroll_request_governmentData_Devengados_Licencias_LicenciaNR_inner(
                                    fecha_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    fecha_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    cantidad = 1.337, )
                                ], ), 
                        bonificaciones = openapi_client.models.create_payroll_request_government_data_devengados_bonificaciones.createPayroll_request_governmentData_Devengados_Bonificaciones(
                            bonificacion = [
                                openapi_client.models.create_payroll_request_government_data_devengados_bonificaciones_bonificacion_inner.createPayroll_request_governmentData_Devengados_Bonificaciones_Bonificacion_inner(
                                    bonificacion_s = 1.337, 
                                    bonificacion_ns = 1.337, )
                                ], ), 
                        auxilios = openapi_client.models.create_payroll_request_government_data_devengados_auxilios.createPayroll_request_governmentData_Devengados_Auxilios(
                            auxilio = [
                                openapi_client.models.create_payroll_request_government_data_devengados_auxilios_auxilio_inner.createPayroll_request_governmentData_Devengados_Auxilios_Auxilio_inner(
                                    auxilio_s = 1.337, 
                                    auxilio_ns = 1.337, )
                                ], ), 
                        huelgas_legales = openapi_client.models.create_payroll_request_government_data_devengados_huelgas_legales.createPayroll_request_governmentData_Devengados_HuelgasLegales(
                            huelga_legal = [
                                openapi_client.models.create_payroll_request_government_data_devengados_huelgas_legales_huelga_legal_inner.createPayroll_request_governmentData_Devengados_HuelgasLegales_HuelgaLegal_inner(
                                    fecha_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    fecha_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    cantidad = 1.337, )
                                ], ), 
                        otros_conceptos = openapi_client.models.create_payroll_request_government_data_devengados_otros_conceptos.createPayroll_request_governmentData_Devengados_OtrosConceptos(
                            otro_concepto = [
                                openapi_client.models.create_payroll_request_government_data_devengados_otros_conceptos_otro_concepto_inner.createPayroll_request_governmentData_Devengados_OtrosConceptos_OtroConcepto_inner(
                                    descripcion_concepto = '', 
                                    concepto_s = 1.337, 
                                    concepto_ns = 1.337, )
                                ], ), 
                        compensaciones = openapi_client.models.create_payroll_request_government_data_devengados_compensaciones.createPayroll_request_governmentData_Devengados_Compensaciones(
                            compensacion = [
                                openapi_client.models.create_payroll_request_government_data_devengados_compensaciones_compensacion_inner.createPayroll_request_governmentData_Devengados_Compensaciones_Compensacion_inner(
                                    compensacion_o = 1.337, 
                                    compensacion_e = 1.337, )
                                ], ), 
                        bono_epctvs = openapi_client.models.create_payroll_request_government_data_devengados_bono_epctvs.createPayroll_request_governmentData_Devengados_BonoEPCTVs(
                            bono_epctv = [
                                openapi_client.models.create_payroll_request_government_data_devengados_bono_epctvs_bono_epctv_inner.createPayroll_request_governmentData_Devengados_BonoEPCTVs_BonoEPCTV_inner(
                                    pago_s = 1.337, 
                                    pago_ns = 1.337, 
                                    pago_alimentacion_s = 1.337, 
                                    pago_alimentacion_ns = 1.337, )
                                ], ), 
                        comisiones = openapi_client.models.create_payroll_request_government_data_devengados_comisiones.createPayroll_request_governmentData_Devengados_Comisiones(
                            comision = [
                                1.337
                                ], ), 
                        pagos_terceros = openapi_client.models.create_payroll_request_government_data_devengados_pagos_terceros.createPayroll_request_governmentData_Devengados_PagosTerceros(
                            pago_tercero = [
                                1.337
                                ], ), 
                        anticipos = openapi_client.models.create_payroll_request_government_data_devengados_anticipos.createPayroll_request_governmentData_Devengados_Anticipos(
                            anticipo = [
                                1.337
                                ], ), 
                        dotacion = 1.337, 
                        apoyo_sost = 1.337, 
                        teletrabajo = 1.337, 
                        bonif_retiro = 1.337, 
                        indemnizacion = 1.337, 
                        reintegro = 1.337, ), 
                    deducciones = openapi_client.models.create_payroll_request_government_data_deducciones.createPayroll_request_governmentData_Deducciones(
                        salud = openapi_client.models.create_payroll_request_government_data_deducciones_salud.createPayroll_request_governmentData_Deducciones_Salud(
                            porcentaje = 1.337, 
                            deduccion = 1.337, ), 
                        fondo_pension = openapi_client.models.create_payroll_request_government_data_deducciones_fondo_pension.createPayroll_request_governmentData_Deducciones_FondoPension(
                            porcentaje = 1.337, 
                            deduccion = 1.337, ), 
                        fondo_sp = openapi_client.models.create_payroll_request_government_data_deducciones_fondo_sp.createPayroll_request_governmentData_Deducciones_FondoSP(
                            porcentaje = 1.337, 
                            deduccion_sp = 1.337, 
                            porcentaje_sub = 1.337, 
                            deduccion_sub = 1.337, ), 
                        sindicatos = openapi_client.models.create_payroll_request_government_data_deducciones_sindicatos.createPayroll_request_governmentData_Deducciones_Sindicatos(
                            sindicato = [
                                openapi_client.models.create_payroll_request_government_data_deducciones_sindicatos_sindicato_inner.createPayroll_request_governmentData_Deducciones_Sindicatos_Sindicato_inner(
                                    porcentaje = 1.337, 
                                    deduccion = 1.337, )
                                ], ), 
                        sanciones = openapi_client.models.create_payroll_request_government_data_deducciones_sanciones.createPayroll_request_governmentData_Deducciones_Sanciones(
                            sancion = [
                                openapi_client.models.create_payroll_request_government_data_deducciones_sanciones_sancion_inner.createPayroll_request_governmentData_Deducciones_Sanciones_Sancion_inner(
                                    sancion_public = 1.337, 
                                    sancion_priv = 1.337, )
                                ], ), 
                        libranzas = openapi_client.models.create_payroll_request_government_data_deducciones_libranzas.createPayroll_request_governmentData_Deducciones_Libranzas(
                            libranza = [
                                openapi_client.models.create_payroll_request_government_data_deducciones_libranzas_libranza_inner.createPayroll_request_governmentData_Deducciones_Libranzas_Libranza_inner(
                                    descripcion = '', 
                                    deduccion = 1.337, )
                                ], ), 
                        otras_deducciones = openapi_client.models.create_payroll_request_government_data_deducciones_otras_deducciones.createPayroll_request_governmentData_Deducciones_OtrasDeducciones(
                            otra_deduccion = [
                                1.337
                                ], ), 
                        pension_voluntaria = 1.337, 
                        retencion_fuente = 1.337, 
                        afc = 1.337, 
                        cooperativa = 1.337, 
                        embargo_fiscal = 1.337, 
                        plan_complementarios = 1.337, 
                        educacion = 1.337, 
                        reintegro = 1.337, 
                        deuda = 1.337, ), 
                    redondeo = 1.337, 
                    devengados_total = 1.337, 
                    deducciones_total = 1.337, 
                    comprobante_total = 1.337, )
            )
        else:
            return AdjustPayrollRequest(
                prefix = '0',
                number = 1.337,
                government_data = openapi_client.models.create_payroll_request_government_data.createPayroll_request_governmentData(
                    novedad = openapi_client.models.create_payroll_request_government_data_novedad.createPayroll_request_governmentData_Novedad(
                        cune_nov = '', ), 
                    periodo = openapi_client.models.create_payroll_request_government_data_periodo.createPayroll_request_governmentData_Periodo(
                        fecha_ingreso = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        tiempo_laborado = 1.337, 
                        fecha_retiro = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        fecha_liquidacion_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        fecha_liquidacion_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                    lugar_generacion_xml = openapi_client.models.create_payroll_request_government_data_lugar_generacion_xml.createPayroll_request_governmentData_LugarGeneracionXML(
                        pais = '', 
                        municipio_ciudad = '', ), 
                    informacion_general = openapi_client.models.create_payroll_request_government_data_informacion_general.createPayroll_request_governmentData_InformacionGeneral(
                        periodo_nomina = '', 
                        tipo_moneda = '', 
                        trm = 1.337, 
                        notas = '', ), 
                    empleador = openapi_client.models.create_payroll_request_government_data_empleador.createPayroll_request_governmentData_Empleador(
                        razon_social = '', 
                        primer_apellido = '', 
                        segundo_apellido = '', 
                        primer_nombre = '', 
                        otros_nombres = '', 
                        nit = 1.337, 
                        dv = 1.337, 
                        pais = '', 
                        municipio_ciudad = '', 
                        direccion = '', ), 
                    trabajador = openapi_client.models.create_payroll_request_government_data_trabajador.createPayroll_request_governmentData_Trabajador(
                        tipo_trabajador = '', 
                        sub_tipo_trabajador = '', 
                        alto_riesgo_pension = True, 
                        tipo_documento = '', 
                        numero_documento = 1.337, 
                        primer_apellido = '', 
                        segundo_apellido = '', 
                        primer_nombre = '', 
                        otros_nombres = '', 
                        lugar_trabajo_pais = '', 
                        lugar_trabajo_municipio_ciudad = '', 
                        lugar_trabajo_direccion = '', 
                        salario_integral = True, 
                        tipo_contrato = '', 
                        sueldo = 1.337, 
                        codigo_trabajador = '', ), 
                    pago = openapi_client.models.create_payroll_request_government_data_pago.createPayroll_request_governmentData_Pago(
                        forma = '', 
                        metodo = '', 
                        banco = '', 
                        tipo_cuenta = '', 
                        numero_cuenta = '', ), 
                    fechas_pagos = openapi_client.models.create_payroll_request_government_data_fechas_pagos.createPayroll_request_governmentData_FechasPagos(
                        fecha_pago = [
                            datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date()
                            ], ), 
                    devengados = openapi_client.models.create_payroll_request_government_data_devengados.createPayroll_request_governmentData_Devengados(
                        basico = openapi_client.models.create_payroll_request_government_data_devengados_basico.createPayroll_request_governmentData_Devengados_Basico(
                            dias_trabajados = 1.337, 
                            sueldo_trabajado = 1.337, ), 
                        transporte = [
                            openapi_client.models.create_payroll_request_government_data_devengados_transporte_inner.createPayroll_request_governmentData_Devengados_Transporte_inner(
                                auxilio_transporte = 1.337, 
                                viatico_manu_aloj_s = 1.337, 
                                viatico_manu_aloj_ns = 1.337, )
                            ], 
                        heds = openapi_client.models.create_payroll_request_government_data_devengados_heds.createPayroll_request_governmentData_Devengados_HEDs(
                            hed = [
                                openapi_client.models.create_payroll_request_government_data_devengados_heds_hed_inner.createPayroll_request_governmentData_Devengados_HEDs_HED_inner(
                                    hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    cantidad = 1.337, 
                                    porcentaje = '1', 
                                    pago = 1.337, )
                                ], ), 
                        hens = openapi_client.models.create_payroll_request_government_data_devengados_hens.createPayroll_request_governmentData_Devengados_HENs(
                            hen = [
                                openapi_client.models.create_payroll_request_government_data_devengados_hens_hen_inner.createPayroll_request_governmentData_Devengados_HENs_HEN_inner(
                                    hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    cantidad = 1.337, 
                                    porcentaje = '2', 
                                    pago = 1.337, )
                                ], ), 
                        hrns = openapi_client.models.create_payroll_request_government_data_devengados_hrns.createPayroll_request_governmentData_Devengados_HRNs(
                            hrn = [
                                openapi_client.models.create_payroll_request_government_data_devengados_hrns_hrn_inner.createPayroll_request_governmentData_Devengados_HRNs_HRN_inner(
                                    hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    cantidad = 1.337, 
                                    porcentaje = '3', 
                                    pago = 1.337, )
                                ], ), 
                        heddfs = openapi_client.models.create_payroll_request_government_data_devengados_heddfs.createPayroll_request_governmentData_Devengados_HEDDFs(
                            heddf = [
                                openapi_client.models.create_payroll_request_government_data_devengados_heddfs_heddf_inner.createPayroll_request_governmentData_Devengados_HEDDFs_HEDDF_inner(
                                    hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    cantidad = 1.337, 
                                    porcentaje = '4', 
                                    pago = 1.337, )
                                ], ), 
                        hrddfs = openapi_client.models.create_payroll_request_government_data_devengados_hrddfs.createPayroll_request_governmentData_Devengados_HRDDFs(
                            hrddf = [
                                openapi_client.models.create_payroll_request_government_data_devengados_hrddfs_hrddf_inner.createPayroll_request_governmentData_Devengados_HRDDFs_HRDDF_inner(
                                    hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    cantidad = 1.337, 
                                    porcentaje = '5', 
                                    pago = 1.337, )
                                ], ), 
                        hendfs = openapi_client.models.create_payroll_request_government_data_devengados_hendfs.createPayroll_request_governmentData_Devengados_HENDFs(
                            hendf = [
                                openapi_client.models.create_payroll_request_government_data_devengados_hendfs_hendf_inner.createPayroll_request_governmentData_Devengados_HENDFs_HENDF_inner(
                                    hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    cantidad = 1.337, 
                                    porcentaje = '6', 
                                    pago = 1.337, )
                                ], ), 
                        hrndfs = openapi_client.models.create_payroll_request_government_data_devengados_hrndfs.createPayroll_request_governmentData_Devengados_HRNDFs(
                            hrndf = [
                                openapi_client.models.create_payroll_request_government_data_devengados_hrndfs_hrndf_inner.createPayroll_request_governmentData_Devengados_HRNDFs_HRNDF_inner(
                                    hora_inicio = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    hora_fin = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    cantidad = 1.337, 
                                    porcentaje = '7', 
                                    pago = 1.337, )
                                ], ), 
                        vacaciones = openapi_client.models.create_payroll_request_government_data_devengados_vacaciones.createPayroll_request_governmentData_Devengados_Vacaciones(
                            vacaciones_comunes = [
                                openapi_client.models.create_payroll_request_government_data_devengados_vacaciones_vacaciones_comunes_inner.createPayroll_request_governmentData_Devengados_Vacaciones_VacacionesComunes_inner(
                                    fecha_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    fecha_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    cantidad = 1.337, 
                                    pago = 1.337, )
                                ], 
                            vacaciones_compensadas = [
                                openapi_client.models.create_payroll_request_government_data_devengados_vacaciones_vacaciones_compensadas_inner.createPayroll_request_governmentData_Devengados_Vacaciones_VacacionesCompensadas_inner(
                                    cantidad = 1.337, 
                                    pago = 1.337, )
                                ], ), 
                        primas = openapi_client.models.create_payroll_request_government_data_devengados_primas.createPayroll_request_governmentData_Devengados_Primas(
                            cantidad = 1.337, 
                            pago = 1.337, 
                            pago_ns = 1.337, ), 
                        cesantias = openapi_client.models.create_payroll_request_government_data_devengados_cesantias.createPayroll_request_governmentData_Devengados_Cesantias(
                            pago = 1.337, 
                            porcentaje = 1.337, 
                            pago_intereses = 1.337, ), 
                        incapacidades = openapi_client.models.create_payroll_request_government_data_devengados_incapacidades.createPayroll_request_governmentData_Devengados_Incapacidades(
                            incapacidad = [
                                openapi_client.models.create_payroll_request_government_data_devengados_incapacidades_incapacidad_inner.createPayroll_request_governmentData_Devengados_Incapacidades_Incapacidad_inner(
                                    fecha_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    fecha_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    cantidad = 1.337, 
                                    tipo = 1.337, 
                                    pago = 1.337, )
                                ], ), 
                        licencias = openapi_client.models.create_payroll_request_government_data_devengados_licencias.createPayroll_request_governmentData_Devengados_Licencias(
                            licencia_mp = [
                                openapi_client.models.create_payroll_request_government_data_devengados_licencias_licencia_mp_inner.createPayroll_request_governmentData_Devengados_Licencias_LicenciaMP_inner(
                                    fecha_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    fecha_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    cantidad = 1.337, 
                                    pago = 1.337, )
                                ], 
                            licencia_r = [
                                openapi_client.models.create_payroll_request_government_data_devengados_licencias_licencia_r_inner.createPayroll_request_governmentData_Devengados_Licencias_LicenciaR_inner(
                                    fecha_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    fecha_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    cantidad = 1.337, 
                                    pago = 1.337, )
                                ], 
                            licencia_nr = [
                                openapi_client.models.create_payroll_request_government_data_devengados_licencias_licencia_nr_inner.createPayroll_request_governmentData_Devengados_Licencias_LicenciaNR_inner(
                                    fecha_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    fecha_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    cantidad = 1.337, )
                                ], ), 
                        bonificaciones = openapi_client.models.create_payroll_request_government_data_devengados_bonificaciones.createPayroll_request_governmentData_Devengados_Bonificaciones(
                            bonificacion = [
                                openapi_client.models.create_payroll_request_government_data_devengados_bonificaciones_bonificacion_inner.createPayroll_request_governmentData_Devengados_Bonificaciones_Bonificacion_inner(
                                    bonificacion_s = 1.337, 
                                    bonificacion_ns = 1.337, )
                                ], ), 
                        auxilios = openapi_client.models.create_payroll_request_government_data_devengados_auxilios.createPayroll_request_governmentData_Devengados_Auxilios(
                            auxilio = [
                                openapi_client.models.create_payroll_request_government_data_devengados_auxilios_auxilio_inner.createPayroll_request_governmentData_Devengados_Auxilios_Auxilio_inner(
                                    auxilio_s = 1.337, 
                                    auxilio_ns = 1.337, )
                                ], ), 
                        huelgas_legales = openapi_client.models.create_payroll_request_government_data_devengados_huelgas_legales.createPayroll_request_governmentData_Devengados_HuelgasLegales(
                            huelga_legal = [
                                openapi_client.models.create_payroll_request_government_data_devengados_huelgas_legales_huelga_legal_inner.createPayroll_request_governmentData_Devengados_HuelgasLegales_HuelgaLegal_inner(
                                    fecha_inicio = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    fecha_fin = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    cantidad = 1.337, )
                                ], ), 
                        otros_conceptos = openapi_client.models.create_payroll_request_government_data_devengados_otros_conceptos.createPayroll_request_governmentData_Devengados_OtrosConceptos(
                            otro_concepto = [
                                openapi_client.models.create_payroll_request_government_data_devengados_otros_conceptos_otro_concepto_inner.createPayroll_request_governmentData_Devengados_OtrosConceptos_OtroConcepto_inner(
                                    descripcion_concepto = '', 
                                    concepto_s = 1.337, 
                                    concepto_ns = 1.337, )
                                ], ), 
                        compensaciones = openapi_client.models.create_payroll_request_government_data_devengados_compensaciones.createPayroll_request_governmentData_Devengados_Compensaciones(
                            compensacion = [
                                openapi_client.models.create_payroll_request_government_data_devengados_compensaciones_compensacion_inner.createPayroll_request_governmentData_Devengados_Compensaciones_Compensacion_inner(
                                    compensacion_o = 1.337, 
                                    compensacion_e = 1.337, )
                                ], ), 
                        bono_epctvs = openapi_client.models.create_payroll_request_government_data_devengados_bono_epctvs.createPayroll_request_governmentData_Devengados_BonoEPCTVs(
                            bono_epctv = [
                                openapi_client.models.create_payroll_request_government_data_devengados_bono_epctvs_bono_epctv_inner.createPayroll_request_governmentData_Devengados_BonoEPCTVs_BonoEPCTV_inner(
                                    pago_s = 1.337, 
                                    pago_ns = 1.337, 
                                    pago_alimentacion_s = 1.337, 
                                    pago_alimentacion_ns = 1.337, )
                                ], ), 
                        comisiones = openapi_client.models.create_payroll_request_government_data_devengados_comisiones.createPayroll_request_governmentData_Devengados_Comisiones(
                            comision = [
                                1.337
                                ], ), 
                        pagos_terceros = openapi_client.models.create_payroll_request_government_data_devengados_pagos_terceros.createPayroll_request_governmentData_Devengados_PagosTerceros(
                            pago_tercero = [
                                1.337
                                ], ), 
                        anticipos = openapi_client.models.create_payroll_request_government_data_devengados_anticipos.createPayroll_request_governmentData_Devengados_Anticipos(
                            anticipo = [
                                1.337
                                ], ), 
                        dotacion = 1.337, 
                        apoyo_sost = 1.337, 
                        teletrabajo = 1.337, 
                        bonif_retiro = 1.337, 
                        indemnizacion = 1.337, 
                        reintegro = 1.337, ), 
                    deducciones = openapi_client.models.create_payroll_request_government_data_deducciones.createPayroll_request_governmentData_Deducciones(
                        salud = openapi_client.models.create_payroll_request_government_data_deducciones_salud.createPayroll_request_governmentData_Deducciones_Salud(
                            porcentaje = 1.337, 
                            deduccion = 1.337, ), 
                        fondo_pension = openapi_client.models.create_payroll_request_government_data_deducciones_fondo_pension.createPayroll_request_governmentData_Deducciones_FondoPension(
                            porcentaje = 1.337, 
                            deduccion = 1.337, ), 
                        fondo_sp = openapi_client.models.create_payroll_request_government_data_deducciones_fondo_sp.createPayroll_request_governmentData_Deducciones_FondoSP(
                            porcentaje = 1.337, 
                            deduccion_sp = 1.337, 
                            porcentaje_sub = 1.337, 
                            deduccion_sub = 1.337, ), 
                        sindicatos = openapi_client.models.create_payroll_request_government_data_deducciones_sindicatos.createPayroll_request_governmentData_Deducciones_Sindicatos(
                            sindicato = [
                                openapi_client.models.create_payroll_request_government_data_deducciones_sindicatos_sindicato_inner.createPayroll_request_governmentData_Deducciones_Sindicatos_Sindicato_inner(
                                    porcentaje = 1.337, 
                                    deduccion = 1.337, )
                                ], ), 
                        sanciones = openapi_client.models.create_payroll_request_government_data_deducciones_sanciones.createPayroll_request_governmentData_Deducciones_Sanciones(
                            sancion = [
                                openapi_client.models.create_payroll_request_government_data_deducciones_sanciones_sancion_inner.createPayroll_request_governmentData_Deducciones_Sanciones_Sancion_inner(
                                    sancion_public = 1.337, 
                                    sancion_priv = 1.337, )
                                ], ), 
                        libranzas = openapi_client.models.create_payroll_request_government_data_deducciones_libranzas.createPayroll_request_governmentData_Deducciones_Libranzas(
                            libranza = [
                                openapi_client.models.create_payroll_request_government_data_deducciones_libranzas_libranza_inner.createPayroll_request_governmentData_Deducciones_Libranzas_Libranza_inner(
                                    descripcion = '', 
                                    deduccion = 1.337, )
                                ], ), 
                        otras_deducciones = openapi_client.models.create_payroll_request_government_data_deducciones_otras_deducciones.createPayroll_request_governmentData_Deducciones_OtrasDeducciones(
                            otra_deduccion = [
                                1.337
                                ], ), 
                        pension_voluntaria = 1.337, 
                        retencion_fuente = 1.337, 
                        afc = 1.337, 
                        cooperativa = 1.337, 
                        embargo_fiscal = 1.337, 
                        plan_complementarios = 1.337, 
                        educacion = 1.337, 
                        reintegro = 1.337, 
                        deuda = 1.337, ), 
                    redondeo = 1.337, 
                    devengados_total = 1.337, 
                    deducciones_total = 1.337, 
                    comprobante_total = 1.337, ),
        )
        """

    def testAdjustPayrollRequest(self):
        """Test AdjustPayrollRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
