# coding: utf-8

"""
    API Alegra Proveedor ElectrÃ³nico Colombia

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.create_payroll_request_government_data_deducciones import CreatePayrollRequestGovernmentDataDeducciones

class TestCreatePayrollRequestGovernmentDataDeducciones(unittest.TestCase):
    """CreatePayrollRequestGovernmentDataDeducciones unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreatePayrollRequestGovernmentDataDeducciones:
        """Test CreatePayrollRequestGovernmentDataDeducciones
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreatePayrollRequestGovernmentDataDeducciones`
        """
        model = CreatePayrollRequestGovernmentDataDeducciones()
        if include_optional:
            return CreatePayrollRequestGovernmentDataDeducciones(
                salud = openapi_client.models.create_payroll_request_government_data_deducciones_salud.createPayroll_request_governmentData_Deducciones_Salud(
                    porcentaje = 1.337, 
                    deduccion = 1.337, ),
                fondo_pension = openapi_client.models.create_payroll_request_government_data_deducciones_fondo_pension.createPayroll_request_governmentData_Deducciones_FondoPension(
                    porcentaje = 1.337, 
                    deduccion = 1.337, ),
                fondo_sp = openapi_client.models.create_payroll_request_government_data_deducciones_fondo_sp.createPayroll_request_governmentData_Deducciones_FondoSP(
                    porcentaje = 1.337, 
                    deduccion_sp = 1.337, 
                    porcentaje_sub = 1.337, 
                    deduccion_sub = 1.337, ),
                sindicatos = openapi_client.models.create_payroll_request_government_data_deducciones_sindicatos.createPayroll_request_governmentData_Deducciones_Sindicatos(
                    sindicato = [
                        openapi_client.models.create_payroll_request_government_data_deducciones_sindicatos_sindicato_inner.createPayroll_request_governmentData_Deducciones_Sindicatos_Sindicato_inner(
                            porcentaje = 1.337, 
                            deduccion = 1.337, )
                        ], ),
                sanciones = openapi_client.models.create_payroll_request_government_data_deducciones_sanciones.createPayroll_request_governmentData_Deducciones_Sanciones(
                    sancion = [
                        openapi_client.models.create_payroll_request_government_data_deducciones_sanciones_sancion_inner.createPayroll_request_governmentData_Deducciones_Sanciones_Sancion_inner(
                            sancion_public = 1.337, 
                            sancion_priv = 1.337, )
                        ], ),
                libranzas = openapi_client.models.create_payroll_request_government_data_deducciones_libranzas.createPayroll_request_governmentData_Deducciones_Libranzas(
                    libranza = [
                        openapi_client.models.create_payroll_request_government_data_deducciones_libranzas_libranza_inner.createPayroll_request_governmentData_Deducciones_Libranzas_Libranza_inner(
                            descripcion = '', 
                            deduccion = 1.337, )
                        ], ),
                pagos_terceros = openapi_client.models.create_payroll_request_government_data_deducciones_pagos_terceros.createPayroll_request_governmentData_Deducciones_PagosTerceros(
                    pago_tercero = [
                        1.337
                        ], ),
                anticipos = openapi_client.models.create_payroll_request_government_data_deducciones_anticipos.createPayroll_request_governmentData_Deducciones_Anticipos(
                    anticipo = [
                        1.337
                        ], ),
                otras_deducciones = openapi_client.models.create_payroll_request_government_data_deducciones_otras_deducciones.createPayroll_request_governmentData_Deducciones_OtrasDeducciones(
                    otra_deduccion = [
                        1.337
                        ], ),
                pension_voluntaria = 1.337,
                retencion_fuente = 1.337,
                afc = 1.337,
                cooperativa = 1.337,
                embargo_fiscal = 1.337,
                plan_complementarios = 1.337,
                educacion = 1.337,
                reintegro = 1.337,
                deuda = 1.337
            )
        else:
            return CreatePayrollRequestGovernmentDataDeducciones(
                salud = openapi_client.models.create_payroll_request_government_data_deducciones_salud.createPayroll_request_governmentData_Deducciones_Salud(
                    porcentaje = 1.337, 
                    deduccion = 1.337, ),
                fondo_pension = openapi_client.models.create_payroll_request_government_data_deducciones_fondo_pension.createPayroll_request_governmentData_Deducciones_FondoPension(
                    porcentaje = 1.337, 
                    deduccion = 1.337, ),
        )
        """

    def testCreatePayrollRequestGovernmentDataDeducciones(self):
        """Test CreatePayrollRequestGovernmentDataDeducciones"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
