# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
from .callback_step import CallbackStep
from .create_workflow_block_dto import CreateWorkflowBlockDto
from .create_workflow_dto import CreateWorkflowDto
from .handoff_step import HandoffStep
import typing
from .open_ai_message import OpenAiMessage
import typing_extensions
from ..core.serialization import FieldMetadata
from .create_assistant_dto import CreateAssistantDto
from .assistant_overrides import AssistantOverrides
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from ..core.pydantic_utilities import update_forward_refs


class ChatDto(UniversalBaseModel):
    messages: typing.List[OpenAiMessage]
    assistant_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="assistantId")] = None
    assistant: typing.Optional[CreateAssistantDto] = None
    assistant_overrides: typing_extensions.Annotated[
        typing.Optional[AssistantOverrides], FieldMetadata(alias="assistantOverrides")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(CallbackStep, ChatDto=ChatDto)
update_forward_refs(CreateWorkflowBlockDto, ChatDto=ChatDto)
update_forward_refs(CreateWorkflowDto, ChatDto=ChatDto)
update_forward_refs(HandoffStep, ChatDto=ChatDto)
