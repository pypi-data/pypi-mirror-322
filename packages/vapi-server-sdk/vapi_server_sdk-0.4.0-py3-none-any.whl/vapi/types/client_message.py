# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
from .callback_step import CallbackStep
from .create_workflow_block_dto import CreateWorkflowBlockDto
from .create_workflow_dto import CreateWorkflowDto
from .handoff_step import HandoffStep
from .client_message_message import ClientMessageMessage
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import typing
from ..core.pydantic_utilities import update_forward_refs


class ClientMessage(UniversalBaseModel):
    message: ClientMessageMessage = pydantic.Field()
    """
    These are all the messages that can be sent to the client-side SDKs during the call. Configure the messages you'd like to receive in `assistant.clientMessages`.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(CallbackStep, ClientMessage=ClientMessage)
update_forward_refs(CreateWorkflowBlockDto, ClientMessage=ClientMessage)
update_forward_refs(CreateWorkflowDto, ClientMessage=ClientMessage)
update_forward_refs(HandoffStep, ClientMessage=ClientMessage)
