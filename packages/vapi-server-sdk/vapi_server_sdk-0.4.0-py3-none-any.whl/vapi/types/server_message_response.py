# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
from .callback_step import CallbackStep
from .create_workflow_block_dto import CreateWorkflowBlockDto
from .create_workflow_dto import CreateWorkflowDto
from .handoff_step import HandoffStep
import typing_extensions
from .server_message_response_message_response import ServerMessageResponseMessageResponse
from ..core.serialization import FieldMetadata
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import typing
from ..core.pydantic_utilities import update_forward_refs


class ServerMessageResponse(UniversalBaseModel):
    message_response: typing_extensions.Annotated[
        ServerMessageResponseMessageResponse, FieldMetadata(alias="messageResponse")
    ] = pydantic.Field()
    """
    This is the response that is expected from the server to the message.
    
    Note: Most messages don't expect a response. Only "assistant-request", "tool-calls" and "transfer-destination-request" do.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(CallbackStep, ServerMessageResponse=ServerMessageResponse)
update_forward_refs(CreateWorkflowBlockDto, ServerMessageResponse=ServerMessageResponse)
update_forward_refs(CreateWorkflowDto, ServerMessageResponse=ServerMessageResponse)
update_forward_refs(HandoffStep, ServerMessageResponse=ServerMessageResponse)
