import abc
from threading import Thread
from typing import Any, Callable

__all__ = ['LoopingThread', 'CallbackLoopingThread']

class LoopingThread(Thread, abc.ABC, metaclass=abc.ABCMeta):
    def __init__(self) -> None: ...
    @abc.abstractmethod
    def loop(self) -> None: ...
    def cancel(self) -> None: ...
    def run(self) -> None: ...

class CallbackLoopingThread(LoopingThread):
    def __init__(self, callback: Callable[[], Any]) -> None: ...
    def loop(self) -> None: ...
