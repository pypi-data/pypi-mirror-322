# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pulpcore.client.pulp_deb.api_client import ApiClient
from pulpcore.client.pulp_deb.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ContentSourcePackagesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create(self, deb_source_package,  **kwargs):  # noqa: E501
        """Create a source package  # noqa: E501

        Trigger an asynchronous task to create content,optionally create new repository version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create(deb_source_package, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param DebSourcePackage deb_source_package: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AsyncOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_with_http_info(deb_source_package,  **kwargs)  # noqa: E501

    def create_with_http_info(self, deb_source_package,  **kwargs):  # noqa: E501
        """Create a source package  # noqa: E501

        Trigger an asynchronous task to create content,optionally create new repository version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_with_http_info(deb_source_package, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param DebSourcePackage deb_source_package: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AsyncOperationResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'deb_source_package'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'deb_source_package' is set
        if self.api_client.client_side_validation and ('deb_source_package' not in local_var_params or  # noqa: E501
                                                        local_var_params['deb_source_package'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deb_source_package` when calling `create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'deb_source_package' in local_var_params:
            body_params = local_var_params['deb_source_package']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'cookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pulp/api/v3/content/deb/source_packages/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncOperationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list(self,  **kwargs):  # noqa: E501
        """List source packages  # noqa: E501

        A Debian Source Package file represents a '.dsc' file along with its associated artifacts such as orig.tar.gz, debian.tar.gz...  Associated artifacts: Exactly one '.dsc' file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str architecture: Filter results where architecture matches value
        :param str binary: Filter results where binary matches value
        :param str build_conflicts: Filter results where build_conflicts matches value
        :param str build_conflicts_arch: Filter results where build_conflicts_arch matches value
        :param str build_conflicts_indep: Filter results where build_conflicts_indep matches value
        :param str build_depends: Filter results where build_depends matches value
        :param str build_depends_arch: Filter results where build_depends_arch matches value
        :param str build_depends_indep: Filter results where build_depends_indep matches value
        :param str dgit: Filter results where dgit matches value
        :param str format: Filter results where format matches value
        :param str homepage: Filter results where homepage matches value
        :param int limit: Number of results to return per page.
        :param str maintainer: Filter results where maintainer matches value
        :param int offset: The initial index from which to return the results.
        :param list[str] ordering: Ordering  * `pulp_id` - Pulp id * `-pulp_id` - Pulp id (descending) * `pulp_created` - Pulp created * `-pulp_created` - Pulp created (descending) * `pulp_last_updated` - Pulp last updated * `-pulp_last_updated` - Pulp last updated (descending) * `pulp_type` - Pulp type * `-pulp_type` - Pulp type (descending) * `upstream_id` - Upstream id * `-upstream_id` - Upstream id (descending) * `timestamp_of_interest` - Timestamp of interest * `-timestamp_of_interest` - Timestamp of interest (descending) * `relative_path` - Relative path * `-relative_path` - Relative path (descending) * `format` - Format * `-format` - Format (descending) * `source` - Source * `-source` - Source (descending) * `binary` - Binary * `-binary` - Binary (descending) * `architecture` - Architecture * `-architecture` - Architecture (descending) * `version` - Version * `-version` - Version (descending) * `maintainer` - Maintainer * `-maintainer` - Maintainer (descending) * `uploaders` - Uploaders * `-uploaders` - Uploaders (descending) * `homepage` - Homepage * `-homepage` - Homepage (descending) * `vcs_browser` - Vcs browser * `-vcs_browser` - Vcs browser (descending) * `vcs_arch` - Vcs arch * `-vcs_arch` - Vcs arch (descending) * `vcs_bzr` - Vcs bzr * `-vcs_bzr` - Vcs bzr (descending) * `vcs_cvs` - Vcs cvs * `-vcs_cvs` - Vcs cvs (descending) * `vcs_darcs` - Vcs darcs * `-vcs_darcs` - Vcs darcs (descending) * `vcs_git` - Vcs git * `-vcs_git` - Vcs git (descending) * `vcs_hg` - Vcs hg * `-vcs_hg` - Vcs hg (descending) * `vcs_mtn` - Vcs mtn * `-vcs_mtn` - Vcs mtn (descending) * `vcs_snv` - Vcs snv * `-vcs_snv` - Vcs snv (descending) * `testsuite` - Testsuite * `-testsuite` - Testsuite (descending) * `dgit` - Dgit * `-dgit` - Dgit (descending) * `standards_version` - Standards version * `-standards_version` - Standards version (descending) * `build_depends` - Build depends * `-build_depends` - Build depends (descending) * `build_depends_indep` - Build depends indep * `-build_depends_indep` - Build depends indep (descending) * `build_depends_arch` - Build depends arch * `-build_depends_arch` - Build depends arch (descending) * `build_conflicts` - Build conflicts * `-build_conflicts` - Build conflicts (descending) * `build_conflicts_indep` - Build conflicts indep * `-build_conflicts_indep` - Build conflicts indep (descending) * `build_conflicts_arch` - Build conflicts arch * `-build_conflicts_arch` - Build conflicts arch (descending) * `package_list` - Package list * `-package_list` - Package list (descending) * `pk` - Pk * `-pk` - Pk (descending)
        :param float orphaned_for: Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.
        :param str package_list: Filter results where package_list matches value
        :param list[str] prn__in: Multiple values may be separated by commas.
        :param list[str] pulp_href__in: Multiple values may be separated by commas.
        :param list[str] pulp_id__in: Multiple values may be separated by commas.
        :param str q: Filter results by using NOT, AND and OR operations on other filters
        :param str relative_path: Filter results where relative_path matches value
        :param str release:      Must be a comma-separated string: \"release_href,repository_or_repository_version_href\"     release_href: Filter results where SourcePackage in Release     repository_or_repository_version_href: The RepositoryVersion href to filter by, or Repository         href (assume latest version)     
        :param str release_component:      Must be a comma-separated string: \"release_component_href,repository_or_repository_version_href\"     release_component_href: Filter results where SourcePackage in ReleaseComponent     repository_or_repository_version_href: The RepositoryVersion href to filter by, or Repository         href (assume latest version)     
        :param str repository_version: Repository Version referenced by HREF/PRN
        :param str repository_version_added: Repository Version referenced by HREF/PRN
        :param str repository_version_removed: Repository Version referenced by HREF/PRN
        :param str source: Filter results where source matches value
        :param str standards_version: Filter results where standards_version matches value
        :param str testsuite: Filter results where testsuite matches value
        :param str uploaders: Filter results where uploaders matches value
        :param str vcs_arch: Filter results where vcs_arch matches value
        :param str vcs_browser: Filter results where vcs_browser matches value
        :param str vcs_bzr: Filter results where vcs_bzr matches value
        :param str vcs_cvs: Filter results where vcs_cvs matches value
        :param str vcs_darcs: Filter results where vcs_darcs matches value
        :param str vcs_git: Filter results where vcs_git matches value
        :param str vcs_hg: Filter results where vcs_hg matches value
        :param str vcs_mtn: Filter results where vcs_mtn matches value
        :param str vcs_snv: Filter results where vcs_snv matches value
        :param str version: Filter results where version matches value
        :param list[str] fields: A list of fields to include in the response.
        :param list[str] exclude_fields: A list of fields to exclude from the response.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PaginateddebSourcePackageResponseList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_with_http_info( **kwargs)  # noqa: E501

    def list_with_http_info(self,  **kwargs):  # noqa: E501
        """List source packages  # noqa: E501

        A Debian Source Package file represents a '.dsc' file along with its associated artifacts such as orig.tar.gz, debian.tar.gz...  Associated artifacts: Exactly one '.dsc' file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str architecture: Filter results where architecture matches value
        :param str binary: Filter results where binary matches value
        :param str build_conflicts: Filter results where build_conflicts matches value
        :param str build_conflicts_arch: Filter results where build_conflicts_arch matches value
        :param str build_conflicts_indep: Filter results where build_conflicts_indep matches value
        :param str build_depends: Filter results where build_depends matches value
        :param str build_depends_arch: Filter results where build_depends_arch matches value
        :param str build_depends_indep: Filter results where build_depends_indep matches value
        :param str dgit: Filter results where dgit matches value
        :param str format: Filter results where format matches value
        :param str homepage: Filter results where homepage matches value
        :param int limit: Number of results to return per page.
        :param str maintainer: Filter results where maintainer matches value
        :param int offset: The initial index from which to return the results.
        :param list[str] ordering: Ordering  * `pulp_id` - Pulp id * `-pulp_id` - Pulp id (descending) * `pulp_created` - Pulp created * `-pulp_created` - Pulp created (descending) * `pulp_last_updated` - Pulp last updated * `-pulp_last_updated` - Pulp last updated (descending) * `pulp_type` - Pulp type * `-pulp_type` - Pulp type (descending) * `upstream_id` - Upstream id * `-upstream_id` - Upstream id (descending) * `timestamp_of_interest` - Timestamp of interest * `-timestamp_of_interest` - Timestamp of interest (descending) * `relative_path` - Relative path * `-relative_path` - Relative path (descending) * `format` - Format * `-format` - Format (descending) * `source` - Source * `-source` - Source (descending) * `binary` - Binary * `-binary` - Binary (descending) * `architecture` - Architecture * `-architecture` - Architecture (descending) * `version` - Version * `-version` - Version (descending) * `maintainer` - Maintainer * `-maintainer` - Maintainer (descending) * `uploaders` - Uploaders * `-uploaders` - Uploaders (descending) * `homepage` - Homepage * `-homepage` - Homepage (descending) * `vcs_browser` - Vcs browser * `-vcs_browser` - Vcs browser (descending) * `vcs_arch` - Vcs arch * `-vcs_arch` - Vcs arch (descending) * `vcs_bzr` - Vcs bzr * `-vcs_bzr` - Vcs bzr (descending) * `vcs_cvs` - Vcs cvs * `-vcs_cvs` - Vcs cvs (descending) * `vcs_darcs` - Vcs darcs * `-vcs_darcs` - Vcs darcs (descending) * `vcs_git` - Vcs git * `-vcs_git` - Vcs git (descending) * `vcs_hg` - Vcs hg * `-vcs_hg` - Vcs hg (descending) * `vcs_mtn` - Vcs mtn * `-vcs_mtn` - Vcs mtn (descending) * `vcs_snv` - Vcs snv * `-vcs_snv` - Vcs snv (descending) * `testsuite` - Testsuite * `-testsuite` - Testsuite (descending) * `dgit` - Dgit * `-dgit` - Dgit (descending) * `standards_version` - Standards version * `-standards_version` - Standards version (descending) * `build_depends` - Build depends * `-build_depends` - Build depends (descending) * `build_depends_indep` - Build depends indep * `-build_depends_indep` - Build depends indep (descending) * `build_depends_arch` - Build depends arch * `-build_depends_arch` - Build depends arch (descending) * `build_conflicts` - Build conflicts * `-build_conflicts` - Build conflicts (descending) * `build_conflicts_indep` - Build conflicts indep * `-build_conflicts_indep` - Build conflicts indep (descending) * `build_conflicts_arch` - Build conflicts arch * `-build_conflicts_arch` - Build conflicts arch (descending) * `package_list` - Package list * `-package_list` - Package list (descending) * `pk` - Pk * `-pk` - Pk (descending)
        :param float orphaned_for: Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.
        :param str package_list: Filter results where package_list matches value
        :param list[str] prn__in: Multiple values may be separated by commas.
        :param list[str] pulp_href__in: Multiple values may be separated by commas.
        :param list[str] pulp_id__in: Multiple values may be separated by commas.
        :param str q: Filter results by using NOT, AND and OR operations on other filters
        :param str relative_path: Filter results where relative_path matches value
        :param str release:      Must be a comma-separated string: \"release_href,repository_or_repository_version_href\"     release_href: Filter results where SourcePackage in Release     repository_or_repository_version_href: The RepositoryVersion href to filter by, or Repository         href (assume latest version)     
        :param str release_component:      Must be a comma-separated string: \"release_component_href,repository_or_repository_version_href\"     release_component_href: Filter results where SourcePackage in ReleaseComponent     repository_or_repository_version_href: The RepositoryVersion href to filter by, or Repository         href (assume latest version)     
        :param str repository_version: Repository Version referenced by HREF/PRN
        :param str repository_version_added: Repository Version referenced by HREF/PRN
        :param str repository_version_removed: Repository Version referenced by HREF/PRN
        :param str source: Filter results where source matches value
        :param str standards_version: Filter results where standards_version matches value
        :param str testsuite: Filter results where testsuite matches value
        :param str uploaders: Filter results where uploaders matches value
        :param str vcs_arch: Filter results where vcs_arch matches value
        :param str vcs_browser: Filter results where vcs_browser matches value
        :param str vcs_bzr: Filter results where vcs_bzr matches value
        :param str vcs_cvs: Filter results where vcs_cvs matches value
        :param str vcs_darcs: Filter results where vcs_darcs matches value
        :param str vcs_git: Filter results where vcs_git matches value
        :param str vcs_hg: Filter results where vcs_hg matches value
        :param str vcs_mtn: Filter results where vcs_mtn matches value
        :param str vcs_snv: Filter results where vcs_snv matches value
        :param str version: Filter results where version matches value
        :param list[str] fields: A list of fields to include in the response.
        :param list[str] exclude_fields: A list of fields to exclude from the response.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PaginateddebSourcePackageResponseList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'architecture',
            'binary',
            'build_conflicts',
            'build_conflicts_arch',
            'build_conflicts_indep',
            'build_depends',
            'build_depends_arch',
            'build_depends_indep',
            'dgit',
            'format',
            'homepage',
            'limit',
            'maintainer',
            'offset',
            'ordering',
            'orphaned_for',
            'package_list',
            'prn__in',
            'pulp_href__in',
            'pulp_id__in',
            'q',
            'relative_path',
            'release',
            'release_component',
            'repository_version',
            'repository_version_added',
            'repository_version_removed',
            'source',
            'standards_version',
            'testsuite',
            'uploaders',
            'vcs_arch',
            'vcs_browser',
            'vcs_bzr',
            'vcs_cvs',
            'vcs_darcs',
            'vcs_git',
            'vcs_hg',
            'vcs_mtn',
            'vcs_snv',
            'version',
            'fields',
            'exclude_fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'architecture' in local_var_params and local_var_params['architecture'] is not None:  # noqa: E501
            query_params.append(('architecture', local_var_params['architecture']))  # noqa: E501
        if 'binary' in local_var_params and local_var_params['binary'] is not None:  # noqa: E501
            query_params.append(('binary', local_var_params['binary']))  # noqa: E501
        if 'build_conflicts' in local_var_params and local_var_params['build_conflicts'] is not None:  # noqa: E501
            query_params.append(('build_conflicts', local_var_params['build_conflicts']))  # noqa: E501
        if 'build_conflicts_arch' in local_var_params and local_var_params['build_conflicts_arch'] is not None:  # noqa: E501
            query_params.append(('build_conflicts_arch', local_var_params['build_conflicts_arch']))  # noqa: E501
        if 'build_conflicts_indep' in local_var_params and local_var_params['build_conflicts_indep'] is not None:  # noqa: E501
            query_params.append(('build_conflicts_indep', local_var_params['build_conflicts_indep']))  # noqa: E501
        if 'build_depends' in local_var_params and local_var_params['build_depends'] is not None:  # noqa: E501
            query_params.append(('build_depends', local_var_params['build_depends']))  # noqa: E501
        if 'build_depends_arch' in local_var_params and local_var_params['build_depends_arch'] is not None:  # noqa: E501
            query_params.append(('build_depends_arch', local_var_params['build_depends_arch']))  # noqa: E501
        if 'build_depends_indep' in local_var_params and local_var_params['build_depends_indep'] is not None:  # noqa: E501
            query_params.append(('build_depends_indep', local_var_params['build_depends_indep']))  # noqa: E501
        if 'dgit' in local_var_params and local_var_params['dgit'] is not None:  # noqa: E501
            query_params.append(('dgit', local_var_params['dgit']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'homepage' in local_var_params and local_var_params['homepage'] is not None:  # noqa: E501
            query_params.append(('homepage', local_var_params['homepage']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'maintainer' in local_var_params and local_var_params['maintainer'] is not None:  # noqa: E501
            query_params.append(('maintainer', local_var_params['maintainer']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'ordering' in local_var_params and local_var_params['ordering'] is not None:  # noqa: E501
            query_params.append(('ordering', local_var_params['ordering']))  # noqa: E501
            collection_formats['ordering'] = 'csv'  # noqa: E501
        if 'orphaned_for' in local_var_params and local_var_params['orphaned_for'] is not None:  # noqa: E501
            query_params.append(('orphaned_for', local_var_params['orphaned_for']))  # noqa: E501
        if 'package_list' in local_var_params and local_var_params['package_list'] is not None:  # noqa: E501
            query_params.append(('package_list', local_var_params['package_list']))  # noqa: E501
        if 'prn__in' in local_var_params and local_var_params['prn__in'] is not None:  # noqa: E501
            query_params.append(('prn__in', local_var_params['prn__in']))  # noqa: E501
            collection_formats['prn__in'] = 'csv'  # noqa: E501
        if 'pulp_href__in' in local_var_params and local_var_params['pulp_href__in'] is not None:  # noqa: E501
            query_params.append(('pulp_href__in', local_var_params['pulp_href__in']))  # noqa: E501
            collection_formats['pulp_href__in'] = 'csv'  # noqa: E501
        if 'pulp_id__in' in local_var_params and local_var_params['pulp_id__in'] is not None:  # noqa: E501
            query_params.append(('pulp_id__in', local_var_params['pulp_id__in']))  # noqa: E501
            collection_formats['pulp_id__in'] = 'csv'  # noqa: E501
        if 'q' in local_var_params and local_var_params['q'] is not None:  # noqa: E501
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'relative_path' in local_var_params and local_var_params['relative_path'] is not None:  # noqa: E501
            query_params.append(('relative_path', local_var_params['relative_path']))  # noqa: E501
        if 'release' in local_var_params and local_var_params['release'] is not None:  # noqa: E501
            query_params.append(('release', local_var_params['release']))  # noqa: E501
        if 'release_component' in local_var_params and local_var_params['release_component'] is not None:  # noqa: E501
            query_params.append(('release_component', local_var_params['release_component']))  # noqa: E501
        if 'repository_version' in local_var_params and local_var_params['repository_version'] is not None:  # noqa: E501
            query_params.append(('repository_version', local_var_params['repository_version']))  # noqa: E501
        if 'repository_version_added' in local_var_params and local_var_params['repository_version_added'] is not None:  # noqa: E501
            query_params.append(('repository_version_added', local_var_params['repository_version_added']))  # noqa: E501
        if 'repository_version_removed' in local_var_params and local_var_params['repository_version_removed'] is not None:  # noqa: E501
            query_params.append(('repository_version_removed', local_var_params['repository_version_removed']))  # noqa: E501
        if 'source' in local_var_params and local_var_params['source'] is not None:  # noqa: E501
            query_params.append(('source', local_var_params['source']))  # noqa: E501
        if 'standards_version' in local_var_params and local_var_params['standards_version'] is not None:  # noqa: E501
            query_params.append(('standards_version', local_var_params['standards_version']))  # noqa: E501
        if 'testsuite' in local_var_params and local_var_params['testsuite'] is not None:  # noqa: E501
            query_params.append(('testsuite', local_var_params['testsuite']))  # noqa: E501
        if 'uploaders' in local_var_params and local_var_params['uploaders'] is not None:  # noqa: E501
            query_params.append(('uploaders', local_var_params['uploaders']))  # noqa: E501
        if 'vcs_arch' in local_var_params and local_var_params['vcs_arch'] is not None:  # noqa: E501
            query_params.append(('vcs_arch', local_var_params['vcs_arch']))  # noqa: E501
        if 'vcs_browser' in local_var_params and local_var_params['vcs_browser'] is not None:  # noqa: E501
            query_params.append(('vcs_browser', local_var_params['vcs_browser']))  # noqa: E501
        if 'vcs_bzr' in local_var_params and local_var_params['vcs_bzr'] is not None:  # noqa: E501
            query_params.append(('vcs_bzr', local_var_params['vcs_bzr']))  # noqa: E501
        if 'vcs_cvs' in local_var_params and local_var_params['vcs_cvs'] is not None:  # noqa: E501
            query_params.append(('vcs_cvs', local_var_params['vcs_cvs']))  # noqa: E501
        if 'vcs_darcs' in local_var_params and local_var_params['vcs_darcs'] is not None:  # noqa: E501
            query_params.append(('vcs_darcs', local_var_params['vcs_darcs']))  # noqa: E501
        if 'vcs_git' in local_var_params and local_var_params['vcs_git'] is not None:  # noqa: E501
            query_params.append(('vcs_git', local_var_params['vcs_git']))  # noqa: E501
        if 'vcs_hg' in local_var_params and local_var_params['vcs_hg'] is not None:  # noqa: E501
            query_params.append(('vcs_hg', local_var_params['vcs_hg']))  # noqa: E501
        if 'vcs_mtn' in local_var_params and local_var_params['vcs_mtn'] is not None:  # noqa: E501
            query_params.append(('vcs_mtn', local_var_params['vcs_mtn']))  # noqa: E501
        if 'vcs_snv' in local_var_params and local_var_params['vcs_snv'] is not None:  # noqa: E501
            query_params.append(('vcs_snv', local_var_params['vcs_snv']))  # noqa: E501
        if 'version' in local_var_params and local_var_params['version'] is not None:  # noqa: E501
            query_params.append(('version', local_var_params['version']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'cookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pulp/api/v3/content/deb/source_packages/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginateddebSourcePackageResponseList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read(self, deb_source_package_href,  **kwargs):  # noqa: E501
        """Inspect a source package  # noqa: E501

        A Debian Source Package file represents a '.dsc' file along with its associated artifacts such as orig.tar.gz, debian.tar.gz...  Associated artifacts: Exactly one '.dsc' file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read(deb_source_package_href, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str deb_source_package_href: (required)
        :param list[str] fields: A list of fields to include in the response.
        :param list[str] exclude_fields: A list of fields to exclude from the response.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DebSourcePackageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.read_with_http_info(deb_source_package_href,  **kwargs)  # noqa: E501

    def read_with_http_info(self, deb_source_package_href,  **kwargs):  # noqa: E501
        """Inspect a source package  # noqa: E501

        A Debian Source Package file represents a '.dsc' file along with its associated artifacts such as orig.tar.gz, debian.tar.gz...  Associated artifacts: Exactly one '.dsc' file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_with_http_info(deb_source_package_href, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str deb_source_package_href: (required)
        :param list[str] fields: A list of fields to include in the response.
        :param list[str] exclude_fields: A list of fields to exclude from the response.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DebSourcePackageResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'deb_source_package_href',
            'fields',
            'exclude_fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'deb_source_package_href' is set
        if self.api_client.client_side_validation and ('deb_source_package_href' not in local_var_params or  # noqa: E501
                                                        local_var_params['deb_source_package_href'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deb_source_package_href` when calling `read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deb_source_package_href' in local_var_params:
            path_params['deb_source_package_href'] = local_var_params['deb_source_package_href']  # noqa: E501

        query_params = []
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'cookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '{deb_source_package_href}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DebSourcePackageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
