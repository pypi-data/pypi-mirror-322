# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pulpcore.client.pulp_deb.configuration import Configuration


class PatcheddebAptRepository(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pulp_labels': 'dict(str, str)',
        'name': 'str',
        'description': 'str',
        'retain_repo_versions': 'int',
        'remote': 'str',
        'publish_upstream_release_fields': 'bool',
        'signing_service': 'str',
        'signing_service_release_overrides': 'dict(str, str)'
    }

    attribute_map = {
        'pulp_labels': 'pulp_labels',
        'name': 'name',
        'description': 'description',
        'retain_repo_versions': 'retain_repo_versions',
        'remote': 'remote',
        'publish_upstream_release_fields': 'publish_upstream_release_fields',
        'signing_service': 'signing_service',
        'signing_service_release_overrides': 'signing_service_release_overrides'
    }

    def __init__(self, pulp_labels=None, name=None, description=None, retain_repo_versions=None, remote=None, publish_upstream_release_fields=None, signing_service=None, signing_service_release_overrides=None, local_vars_configuration=None):  # noqa: E501
        """PatcheddebAptRepository - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pulp_labels = None
        self._name = None
        self._description = None
        self._retain_repo_versions = None
        self._remote = None
        self._publish_upstream_release_fields = None
        self._signing_service = None
        self._signing_service_release_overrides = None
        self.discriminator = None

        if pulp_labels is not None:
            self.pulp_labels = pulp_labels
        if name is not None:
            self.name = name
        self.description = description
        self.retain_repo_versions = retain_repo_versions
        self.remote = remote
        if publish_upstream_release_fields is not None:
            self.publish_upstream_release_fields = publish_upstream_release_fields
        self.signing_service = signing_service
        if signing_service_release_overrides is not None:
            self.signing_service_release_overrides = signing_service_release_overrides

    @property
    def pulp_labels(self):
        """Gets the pulp_labels of this PatcheddebAptRepository.  # noqa: E501


        :return: The pulp_labels of this PatcheddebAptRepository.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._pulp_labels

    @pulp_labels.setter
    def pulp_labels(self, pulp_labels):
        """Sets the pulp_labels of this PatcheddebAptRepository.


        :param pulp_labels: The pulp_labels of this PatcheddebAptRepository.  # noqa: E501
        :type: dict(str, str)
        """

        self._pulp_labels = pulp_labels

    @property
    def name(self):
        """Gets the name of this PatcheddebAptRepository.  # noqa: E501

        A unique name for this repository.  # noqa: E501

        :return: The name of this PatcheddebAptRepository.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatcheddebAptRepository.

        A unique name for this repository.  # noqa: E501

        :param name: The name of this PatcheddebAptRepository.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this PatcheddebAptRepository.  # noqa: E501

        An optional description.  # noqa: E501

        :return: The description of this PatcheddebAptRepository.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PatcheddebAptRepository.

        An optional description.  # noqa: E501

        :param description: The description of this PatcheddebAptRepository.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 1):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def retain_repo_versions(self):
        """Gets the retain_repo_versions of this PatcheddebAptRepository.  # noqa: E501

        Retain X versions of the repository. Default is null which retains all versions.  # noqa: E501

        :return: The retain_repo_versions of this PatcheddebAptRepository.  # noqa: E501
        :rtype: int
        """
        return self._retain_repo_versions

    @retain_repo_versions.setter
    def retain_repo_versions(self, retain_repo_versions):
        """Sets the retain_repo_versions of this PatcheddebAptRepository.

        Retain X versions of the repository. Default is null which retains all versions.  # noqa: E501

        :param retain_repo_versions: The retain_repo_versions of this PatcheddebAptRepository.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                retain_repo_versions is not None and retain_repo_versions < 1):  # noqa: E501
            raise ValueError("Invalid value for `retain_repo_versions`, must be a value greater than or equal to `1`")  # noqa: E501

        self._retain_repo_versions = retain_repo_versions

    @property
    def remote(self):
        """Gets the remote of this PatcheddebAptRepository.  # noqa: E501

        An optional remote to use by default when syncing.  # noqa: E501

        :return: The remote of this PatcheddebAptRepository.  # noqa: E501
        :rtype: str
        """
        return self._remote

    @remote.setter
    def remote(self, remote):
        """Sets the remote of this PatcheddebAptRepository.

        An optional remote to use by default when syncing.  # noqa: E501

        :param remote: The remote of this PatcheddebAptRepository.  # noqa: E501
        :type: str
        """

        self._remote = remote

    @property
    def publish_upstream_release_fields(self):
        """Gets the publish_upstream_release_fields of this PatcheddebAptRepository.  # noqa: E501

        Previously, pulp_deb only synced the Release file fields codename and suite, now version, origin, label, and description are also synced. Setting this setting to False will make Pulp revert to the old behaviour of using it's own internal values for the new fields during publish. This is primarily intended to avoid a sudden change in behaviour for existing Pulp repositories, since many Release file field changes need to be accepted by hosts consuming the published repository. The default for new repositories is True.  # noqa: E501

        :return: The publish_upstream_release_fields of this PatcheddebAptRepository.  # noqa: E501
        :rtype: bool
        """
        return self._publish_upstream_release_fields

    @publish_upstream_release_fields.setter
    def publish_upstream_release_fields(self, publish_upstream_release_fields):
        """Sets the publish_upstream_release_fields of this PatcheddebAptRepository.

        Previously, pulp_deb only synced the Release file fields codename and suite, now version, origin, label, and description are also synced. Setting this setting to False will make Pulp revert to the old behaviour of using it's own internal values for the new fields during publish. This is primarily intended to avoid a sudden change in behaviour for existing Pulp repositories, since many Release file field changes need to be accepted by hosts consuming the published repository. The default for new repositories is True.  # noqa: E501

        :param publish_upstream_release_fields: The publish_upstream_release_fields of this PatcheddebAptRepository.  # noqa: E501
        :type: bool
        """

        self._publish_upstream_release_fields = publish_upstream_release_fields

    @property
    def signing_service(self):
        """Gets the signing_service of this PatcheddebAptRepository.  # noqa: E501

        A reference to an associated signing service. Used if AptPublication.signing_service is not set  # noqa: E501

        :return: The signing_service of this PatcheddebAptRepository.  # noqa: E501
        :rtype: str
        """
        return self._signing_service

    @signing_service.setter
    def signing_service(self, signing_service):
        """Sets the signing_service of this PatcheddebAptRepository.

        A reference to an associated signing service. Used if AptPublication.signing_service is not set  # noqa: E501

        :param signing_service: The signing_service of this PatcheddebAptRepository.  # noqa: E501
        :type: str
        """

        self._signing_service = signing_service

    @property
    def signing_service_release_overrides(self):
        """Gets the signing_service_release_overrides of this PatcheddebAptRepository.  # noqa: E501

        A dictionary of Release distributions and the Signing Service URLs they should use.Example: {\"bionic\": \"/pulp/api/v3/signing-services/433a1f70-c589-4413-a803-c50b842ea9b5/\"}  # noqa: E501

        :return: The signing_service_release_overrides of this PatcheddebAptRepository.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._signing_service_release_overrides

    @signing_service_release_overrides.setter
    def signing_service_release_overrides(self, signing_service_release_overrides):
        """Sets the signing_service_release_overrides of this PatcheddebAptRepository.

        A dictionary of Release distributions and the Signing Service URLs they should use.Example: {\"bionic\": \"/pulp/api/v3/signing-services/433a1f70-c589-4413-a803-c50b842ea9b5/\"}  # noqa: E501

        :param signing_service_release_overrides: The signing_service_release_overrides of this PatcheddebAptRepository.  # noqa: E501
        :type: dict(str, str)
        """

        self._signing_service_release_overrides = signing_service_release_overrides

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatcheddebAptRepository):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PatcheddebAptRepository):
            return True

        return self.to_dict() != other.to_dict()
