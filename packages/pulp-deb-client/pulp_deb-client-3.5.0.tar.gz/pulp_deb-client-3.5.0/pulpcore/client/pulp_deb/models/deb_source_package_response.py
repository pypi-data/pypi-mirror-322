# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pulpcore.client.pulp_deb.configuration import Configuration


class DebSourcePackageResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pulp_href': 'str',
        'prn': 'str',
        'pulp_created': 'datetime',
        'pulp_last_updated': 'datetime',
        'artifacts': 'object',
        'relative_path': 'str',
        'sha256': 'str',
        'format': 'str',
        'source': 'str',
        'binary': 'str',
        'architecture': 'str',
        'version': 'str',
        'maintainer': 'str',
        'uploaders': 'str',
        'homepage': 'str',
        'vcs_browser': 'str',
        'vcs_arch': 'str',
        'vcs_bzr': 'str',
        'vcs_cvs': 'str',
        'vcs_darcs': 'str',
        'vcs_git': 'str',
        'vcs_hg': 'str',
        'vcs_mtn': 'str',
        'vcs_snv': 'str',
        'testsuite': 'str',
        'dgit': 'str',
        'standards_version': 'str',
        'build_depends': 'str',
        'build_depends_indep': 'str',
        'build_depends_arch': 'str',
        'build_conflicts': 'str',
        'build_conflicts_indep': 'str',
        'build_conflicts_arch': 'str',
        'package_list': 'str'
    }

    attribute_map = {
        'pulp_href': 'pulp_href',
        'prn': 'prn',
        'pulp_created': 'pulp_created',
        'pulp_last_updated': 'pulp_last_updated',
        'artifacts': 'artifacts',
        'relative_path': 'relative_path',
        'sha256': 'sha256',
        'format': 'format',
        'source': 'source',
        'binary': 'binary',
        'architecture': 'architecture',
        'version': 'version',
        'maintainer': 'maintainer',
        'uploaders': 'uploaders',
        'homepage': 'homepage',
        'vcs_browser': 'vcs_browser',
        'vcs_arch': 'vcs_arch',
        'vcs_bzr': 'vcs_bzr',
        'vcs_cvs': 'vcs_cvs',
        'vcs_darcs': 'vcs_darcs',
        'vcs_git': 'vcs_git',
        'vcs_hg': 'vcs_hg',
        'vcs_mtn': 'vcs_mtn',
        'vcs_snv': 'vcs_snv',
        'testsuite': 'testsuite',
        'dgit': 'dgit',
        'standards_version': 'standards_version',
        'build_depends': 'build_depends',
        'build_depends_indep': 'build_depends_indep',
        'build_depends_arch': 'build_depends_arch',
        'build_conflicts': 'build_conflicts',
        'build_conflicts_indep': 'build_conflicts_indep',
        'build_conflicts_arch': 'build_conflicts_arch',
        'package_list': 'package_list'
    }

    def __init__(self, pulp_href=None, prn=None, pulp_created=None, pulp_last_updated=None, artifacts=None, relative_path=None, sha256=None, format=None, source=None, binary=None, architecture=None, version=None, maintainer=None, uploaders=None, homepage=None, vcs_browser=None, vcs_arch=None, vcs_bzr=None, vcs_cvs=None, vcs_darcs=None, vcs_git=None, vcs_hg=None, vcs_mtn=None, vcs_snv=None, testsuite=None, dgit=None, standards_version=None, build_depends=None, build_depends_indep=None, build_depends_arch=None, build_conflicts=None, build_conflicts_indep=None, build_conflicts_arch=None, package_list=None, local_vars_configuration=None):  # noqa: E501
        """DebSourcePackageResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pulp_href = None
        self._prn = None
        self._pulp_created = None
        self._pulp_last_updated = None
        self._artifacts = None
        self._relative_path = None
        self._sha256 = None
        self._format = None
        self._source = None
        self._binary = None
        self._architecture = None
        self._version = None
        self._maintainer = None
        self._uploaders = None
        self._homepage = None
        self._vcs_browser = None
        self._vcs_arch = None
        self._vcs_bzr = None
        self._vcs_cvs = None
        self._vcs_darcs = None
        self._vcs_git = None
        self._vcs_hg = None
        self._vcs_mtn = None
        self._vcs_snv = None
        self._testsuite = None
        self._dgit = None
        self._standards_version = None
        self._build_depends = None
        self._build_depends_indep = None
        self._build_depends_arch = None
        self._build_conflicts = None
        self._build_conflicts_indep = None
        self._build_conflicts_arch = None
        self._package_list = None
        self.discriminator = None

        if pulp_href is not None:
            self.pulp_href = pulp_href
        if prn is not None:
            self.prn = prn
        if pulp_created is not None:
            self.pulp_created = pulp_created
        if pulp_last_updated is not None:
            self.pulp_last_updated = pulp_last_updated
        self.artifacts = artifacts
        if relative_path is not None:
            self.relative_path = relative_path
        if sha256 is not None:
            self.sha256 = sha256
        if format is not None:
            self.format = format
        if source is not None:
            self.source = source
        if binary is not None:
            self.binary = binary
        if architecture is not None:
            self.architecture = architecture
        if version is not None:
            self.version = version
        if maintainer is not None:
            self.maintainer = maintainer
        if uploaders is not None:
            self.uploaders = uploaders
        if homepage is not None:
            self.homepage = homepage
        if vcs_browser is not None:
            self.vcs_browser = vcs_browser
        if vcs_arch is not None:
            self.vcs_arch = vcs_arch
        if vcs_bzr is not None:
            self.vcs_bzr = vcs_bzr
        if vcs_cvs is not None:
            self.vcs_cvs = vcs_cvs
        if vcs_darcs is not None:
            self.vcs_darcs = vcs_darcs
        if vcs_git is not None:
            self.vcs_git = vcs_git
        if vcs_hg is not None:
            self.vcs_hg = vcs_hg
        if vcs_mtn is not None:
            self.vcs_mtn = vcs_mtn
        if vcs_snv is not None:
            self.vcs_snv = vcs_snv
        if testsuite is not None:
            self.testsuite = testsuite
        if dgit is not None:
            self.dgit = dgit
        if standards_version is not None:
            self.standards_version = standards_version
        if build_depends is not None:
            self.build_depends = build_depends
        if build_depends_indep is not None:
            self.build_depends_indep = build_depends_indep
        if build_depends_arch is not None:
            self.build_depends_arch = build_depends_arch
        if build_conflicts is not None:
            self.build_conflicts = build_conflicts
        if build_conflicts_indep is not None:
            self.build_conflicts_indep = build_conflicts_indep
        if build_conflicts_arch is not None:
            self.build_conflicts_arch = build_conflicts_arch
        if package_list is not None:
            self.package_list = package_list

    @property
    def pulp_href(self):
        """Gets the pulp_href of this DebSourcePackageResponse.  # noqa: E501


        :return: The pulp_href of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._pulp_href

    @pulp_href.setter
    def pulp_href(self, pulp_href):
        """Sets the pulp_href of this DebSourcePackageResponse.


        :param pulp_href: The pulp_href of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._pulp_href = pulp_href

    @property
    def prn(self):
        """Gets the prn of this DebSourcePackageResponse.  # noqa: E501

        The Pulp Resource Name (PRN).  # noqa: E501

        :return: The prn of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._prn

    @prn.setter
    def prn(self, prn):
        """Sets the prn of this DebSourcePackageResponse.

        The Pulp Resource Name (PRN).  # noqa: E501

        :param prn: The prn of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._prn = prn

    @property
    def pulp_created(self):
        """Gets the pulp_created of this DebSourcePackageResponse.  # noqa: E501

        Timestamp of creation.  # noqa: E501

        :return: The pulp_created of this DebSourcePackageResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._pulp_created

    @pulp_created.setter
    def pulp_created(self, pulp_created):
        """Sets the pulp_created of this DebSourcePackageResponse.

        Timestamp of creation.  # noqa: E501

        :param pulp_created: The pulp_created of this DebSourcePackageResponse.  # noqa: E501
        :type: datetime
        """

        self._pulp_created = pulp_created

    @property
    def pulp_last_updated(self):
        """Gets the pulp_last_updated of this DebSourcePackageResponse.  # noqa: E501

        Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.  # noqa: E501

        :return: The pulp_last_updated of this DebSourcePackageResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._pulp_last_updated

    @pulp_last_updated.setter
    def pulp_last_updated(self, pulp_last_updated):
        """Sets the pulp_last_updated of this DebSourcePackageResponse.

        Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.  # noqa: E501

        :param pulp_last_updated: The pulp_last_updated of this DebSourcePackageResponse.  # noqa: E501
        :type: datetime
        """

        self._pulp_last_updated = pulp_last_updated

    @property
    def artifacts(self):
        """Gets the artifacts of this DebSourcePackageResponse.  # noqa: E501

        A dict mapping relative paths inside the Content to the correspondingArtifact URLs. E.g.: {'relative/path': '/artifacts/1/'  # noqa: E501

        :return: The artifacts of this DebSourcePackageResponse.  # noqa: E501
        :rtype: object
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this DebSourcePackageResponse.

        A dict mapping relative paths inside the Content to the correspondingArtifact URLs. E.g.: {'relative/path': '/artifacts/1/'  # noqa: E501

        :param artifacts: The artifacts of this DebSourcePackageResponse.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and artifacts is None:  # noqa: E501
            raise ValueError("Invalid value for `artifacts`, must not be `None`")  # noqa: E501

        self._artifacts = artifacts

    @property
    def relative_path(self):
        """Gets the relative_path of this DebSourcePackageResponse.  # noqa: E501

        Relative path of the Debian Source Control (dsc) file.It is normally advised to let Pulp generate this.  # noqa: E501

        :return: The relative_path of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this DebSourcePackageResponse.

        Relative path of the Debian Source Control (dsc) file.It is normally advised to let Pulp generate this.  # noqa: E501

        :param relative_path: The relative_path of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._relative_path = relative_path

    @property
    def sha256(self):
        """Gets the sha256 of this DebSourcePackageResponse.  # noqa: E501

        sha256 digest of the dsc file.  # noqa: E501

        :return: The sha256 of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._sha256

    @sha256.setter
    def sha256(self, sha256):
        """Sets the sha256 of this DebSourcePackageResponse.

        sha256 digest of the dsc file.  # noqa: E501

        :param sha256: The sha256 of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._sha256 = sha256

    @property
    def format(self):
        """Gets the format of this DebSourcePackageResponse.  # noqa: E501


        :return: The format of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this DebSourcePackageResponse.


        :param format: The format of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def source(self):
        """Gets the source of this DebSourcePackageResponse.  # noqa: E501


        :return: The source of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DebSourcePackageResponse.


        :param source: The source of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def binary(self):
        """Gets the binary of this DebSourcePackageResponse.  # noqa: E501


        :return: The binary of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._binary

    @binary.setter
    def binary(self, binary):
        """Sets the binary of this DebSourcePackageResponse.


        :param binary: The binary of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._binary = binary

    @property
    def architecture(self):
        """Gets the architecture of this DebSourcePackageResponse.  # noqa: E501


        :return: The architecture of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this DebSourcePackageResponse.


        :param architecture: The architecture of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._architecture = architecture

    @property
    def version(self):
        """Gets the version of this DebSourcePackageResponse.  # noqa: E501


        :return: The version of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DebSourcePackageResponse.


        :param version: The version of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def maintainer(self):
        """Gets the maintainer of this DebSourcePackageResponse.  # noqa: E501


        :return: The maintainer of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._maintainer

    @maintainer.setter
    def maintainer(self, maintainer):
        """Sets the maintainer of this DebSourcePackageResponse.


        :param maintainer: The maintainer of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._maintainer = maintainer

    @property
    def uploaders(self):
        """Gets the uploaders of this DebSourcePackageResponse.  # noqa: E501


        :return: The uploaders of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._uploaders

    @uploaders.setter
    def uploaders(self, uploaders):
        """Sets the uploaders of this DebSourcePackageResponse.


        :param uploaders: The uploaders of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._uploaders = uploaders

    @property
    def homepage(self):
        """Gets the homepage of this DebSourcePackageResponse.  # noqa: E501


        :return: The homepage of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this DebSourcePackageResponse.


        :param homepage: The homepage of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._homepage = homepage

    @property
    def vcs_browser(self):
        """Gets the vcs_browser of this DebSourcePackageResponse.  # noqa: E501


        :return: The vcs_browser of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._vcs_browser

    @vcs_browser.setter
    def vcs_browser(self, vcs_browser):
        """Sets the vcs_browser of this DebSourcePackageResponse.


        :param vcs_browser: The vcs_browser of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._vcs_browser = vcs_browser

    @property
    def vcs_arch(self):
        """Gets the vcs_arch of this DebSourcePackageResponse.  # noqa: E501


        :return: The vcs_arch of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._vcs_arch

    @vcs_arch.setter
    def vcs_arch(self, vcs_arch):
        """Sets the vcs_arch of this DebSourcePackageResponse.


        :param vcs_arch: The vcs_arch of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._vcs_arch = vcs_arch

    @property
    def vcs_bzr(self):
        """Gets the vcs_bzr of this DebSourcePackageResponse.  # noqa: E501


        :return: The vcs_bzr of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._vcs_bzr

    @vcs_bzr.setter
    def vcs_bzr(self, vcs_bzr):
        """Sets the vcs_bzr of this DebSourcePackageResponse.


        :param vcs_bzr: The vcs_bzr of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._vcs_bzr = vcs_bzr

    @property
    def vcs_cvs(self):
        """Gets the vcs_cvs of this DebSourcePackageResponse.  # noqa: E501


        :return: The vcs_cvs of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._vcs_cvs

    @vcs_cvs.setter
    def vcs_cvs(self, vcs_cvs):
        """Sets the vcs_cvs of this DebSourcePackageResponse.


        :param vcs_cvs: The vcs_cvs of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._vcs_cvs = vcs_cvs

    @property
    def vcs_darcs(self):
        """Gets the vcs_darcs of this DebSourcePackageResponse.  # noqa: E501


        :return: The vcs_darcs of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._vcs_darcs

    @vcs_darcs.setter
    def vcs_darcs(self, vcs_darcs):
        """Sets the vcs_darcs of this DebSourcePackageResponse.


        :param vcs_darcs: The vcs_darcs of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._vcs_darcs = vcs_darcs

    @property
    def vcs_git(self):
        """Gets the vcs_git of this DebSourcePackageResponse.  # noqa: E501


        :return: The vcs_git of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._vcs_git

    @vcs_git.setter
    def vcs_git(self, vcs_git):
        """Sets the vcs_git of this DebSourcePackageResponse.


        :param vcs_git: The vcs_git of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._vcs_git = vcs_git

    @property
    def vcs_hg(self):
        """Gets the vcs_hg of this DebSourcePackageResponse.  # noqa: E501


        :return: The vcs_hg of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._vcs_hg

    @vcs_hg.setter
    def vcs_hg(self, vcs_hg):
        """Sets the vcs_hg of this DebSourcePackageResponse.


        :param vcs_hg: The vcs_hg of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._vcs_hg = vcs_hg

    @property
    def vcs_mtn(self):
        """Gets the vcs_mtn of this DebSourcePackageResponse.  # noqa: E501


        :return: The vcs_mtn of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._vcs_mtn

    @vcs_mtn.setter
    def vcs_mtn(self, vcs_mtn):
        """Sets the vcs_mtn of this DebSourcePackageResponse.


        :param vcs_mtn: The vcs_mtn of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._vcs_mtn = vcs_mtn

    @property
    def vcs_snv(self):
        """Gets the vcs_snv of this DebSourcePackageResponse.  # noqa: E501


        :return: The vcs_snv of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._vcs_snv

    @vcs_snv.setter
    def vcs_snv(self, vcs_snv):
        """Sets the vcs_snv of this DebSourcePackageResponse.


        :param vcs_snv: The vcs_snv of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._vcs_snv = vcs_snv

    @property
    def testsuite(self):
        """Gets the testsuite of this DebSourcePackageResponse.  # noqa: E501


        :return: The testsuite of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._testsuite

    @testsuite.setter
    def testsuite(self, testsuite):
        """Sets the testsuite of this DebSourcePackageResponse.


        :param testsuite: The testsuite of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._testsuite = testsuite

    @property
    def dgit(self):
        """Gets the dgit of this DebSourcePackageResponse.  # noqa: E501


        :return: The dgit of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._dgit

    @dgit.setter
    def dgit(self, dgit):
        """Sets the dgit of this DebSourcePackageResponse.


        :param dgit: The dgit of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._dgit = dgit

    @property
    def standards_version(self):
        """Gets the standards_version of this DebSourcePackageResponse.  # noqa: E501


        :return: The standards_version of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._standards_version

    @standards_version.setter
    def standards_version(self, standards_version):
        """Sets the standards_version of this DebSourcePackageResponse.


        :param standards_version: The standards_version of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._standards_version = standards_version

    @property
    def build_depends(self):
        """Gets the build_depends of this DebSourcePackageResponse.  # noqa: E501


        :return: The build_depends of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._build_depends

    @build_depends.setter
    def build_depends(self, build_depends):
        """Sets the build_depends of this DebSourcePackageResponse.


        :param build_depends: The build_depends of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._build_depends = build_depends

    @property
    def build_depends_indep(self):
        """Gets the build_depends_indep of this DebSourcePackageResponse.  # noqa: E501


        :return: The build_depends_indep of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._build_depends_indep

    @build_depends_indep.setter
    def build_depends_indep(self, build_depends_indep):
        """Sets the build_depends_indep of this DebSourcePackageResponse.


        :param build_depends_indep: The build_depends_indep of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._build_depends_indep = build_depends_indep

    @property
    def build_depends_arch(self):
        """Gets the build_depends_arch of this DebSourcePackageResponse.  # noqa: E501


        :return: The build_depends_arch of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._build_depends_arch

    @build_depends_arch.setter
    def build_depends_arch(self, build_depends_arch):
        """Sets the build_depends_arch of this DebSourcePackageResponse.


        :param build_depends_arch: The build_depends_arch of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._build_depends_arch = build_depends_arch

    @property
    def build_conflicts(self):
        """Gets the build_conflicts of this DebSourcePackageResponse.  # noqa: E501


        :return: The build_conflicts of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._build_conflicts

    @build_conflicts.setter
    def build_conflicts(self, build_conflicts):
        """Sets the build_conflicts of this DebSourcePackageResponse.


        :param build_conflicts: The build_conflicts of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._build_conflicts = build_conflicts

    @property
    def build_conflicts_indep(self):
        """Gets the build_conflicts_indep of this DebSourcePackageResponse.  # noqa: E501


        :return: The build_conflicts_indep of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._build_conflicts_indep

    @build_conflicts_indep.setter
    def build_conflicts_indep(self, build_conflicts_indep):
        """Sets the build_conflicts_indep of this DebSourcePackageResponse.


        :param build_conflicts_indep: The build_conflicts_indep of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._build_conflicts_indep = build_conflicts_indep

    @property
    def build_conflicts_arch(self):
        """Gets the build_conflicts_arch of this DebSourcePackageResponse.  # noqa: E501


        :return: The build_conflicts_arch of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._build_conflicts_arch

    @build_conflicts_arch.setter
    def build_conflicts_arch(self, build_conflicts_arch):
        """Sets the build_conflicts_arch of this DebSourcePackageResponse.


        :param build_conflicts_arch: The build_conflicts_arch of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._build_conflicts_arch = build_conflicts_arch

    @property
    def package_list(self):
        """Gets the package_list of this DebSourcePackageResponse.  # noqa: E501


        :return: The package_list of this DebSourcePackageResponse.  # noqa: E501
        :rtype: str
        """
        return self._package_list

    @package_list.setter
    def package_list(self, package_list):
        """Sets the package_list of this DebSourcePackageResponse.


        :param package_list: The package_list of this DebSourcePackageResponse.  # noqa: E501
        :type: str
        """

        self._package_list = package_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebSourcePackageResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DebSourcePackageResponse):
            return True

        return self.to_dict() != other.to_dict()
