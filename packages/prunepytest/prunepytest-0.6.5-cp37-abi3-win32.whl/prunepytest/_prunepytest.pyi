# SPDX-FileCopyrightText: Â© 2024 Hugues Bruant <hugues.bruant@gmail.com>

from typing import Mapping, AbstractSet, Optional, Sequence, Tuple, Union, Type, TypeVar

T = TypeVar("T", bound="ModuleGraph")

class ModuleGraph:
    def __new__(
        cls: Type[T],
        source_roots: Mapping[str, str],
        global_prefixes: AbstractSet[str],
        local_prefixes: AbstractSet[str],
        external_prefixes: AbstractSet[str],
        dynamic_deps: Mapping[str, AbstractSet[str]],
        include_typechecking: bool = False,
    ) -> T: ...
    def clone(self) -> "ModuleGraph": ...
    @classmethod
    def from_file(self, filepath: str) -> "ModuleGraph": ...
    def to_file(self, filepath: str) -> None: ...
    def unresolved(self) -> Mapping[str, AbstractSet[str]]: ...
    def add_dynamic_dependencies_at_leaves(
        self,
        per_package: Sequence[Tuple[str, Mapping[str, AbstractSet[str]]]],
    ) -> None: ...
    def file_depends_on(self, filepath: str) -> Optional[AbstractSet[str]]: ...
    def module_depends_on(
        self, module_import_path: str, package_root: Optional[str] = None
    ) -> Optional[AbstractSet[str]]: ...
    def affected_by_files(
        self, files: Union[Sequence[str], AbstractSet[str]]
    ) -> AbstractSet[str]: ...
    def affected_by_modules(
        self, modules: Union[Sequence[str], AbstractSet[str]]
    ) -> AbstractSet[str]: ...
    def local_affected_by_files(
        self, files: Union[Sequence[str], AbstractSet[str]]
    ) -> Mapping[str, AbstractSet[str]]: ...
    def local_affected_by_modules(
        self, modules: Union[Sequence[str], AbstractSet[str]]
    ) -> Mapping[str, AbstractSet[str]]: ...

def configure_logger(file: str, level: str) -> None: ...
def file_looks_like_pkgutil_ns_init(filepath: str) -> bool: ...
