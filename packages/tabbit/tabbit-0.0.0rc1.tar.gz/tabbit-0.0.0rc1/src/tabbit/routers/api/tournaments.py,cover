> from __future__ import annotations
  
> import http
> import logging
  
> from fastapi import APIRouter
> from fastapi import Request
> from fastapi.encoders import jsonable_encoder
> from fastapi.responses import JSONResponse
> from fastapi.responses import Response
  
> from tabbit.database.operations import tournament as crud
> from tabbit.routers.enums import Tags
> from tabbit.routers.util import not_found_response
> from tabbit.schemas.tournament import Tournament
> from tabbit.schemas.tournament import TournamentCreate
> from tabbit.schemas.tournament import TournamentID
> from tabbit.schemas.tournament import TournamentPatch
  
> logger = logging.getLogger(__name__)
  
> tournaments_router = APIRouter(
>     prefix="/tournaments",
>     tags=[Tags.TOURNAMENT],
> )
  
  
> @tournaments_router.post(
>     "/create",
>     response_model=TournamentID,
> )
> async def create_tournament(
>     tournament: TournamentCreate,
>     request: Request,
> ) -> JSONResponse:
>     """Create a tournament.
  
>     Returns the tournament ID upon creation.
>     """
>     sm = request.app.state.session_manager
>     async with sm.sessionmaker.begin() as session:
>         tournament_id = TournamentID(
>             id=await crud.create_tournament(session, tournament)
>         )
  
>     logger.info("Created tournament.", extra={"tournament_id": tournament_id})
>     return JSONResponse(content=jsonable_encoder(tournament_id))
  
  
> @tournaments_router.get(
>     "/{tournament_id}",
>     response_model=Tournament,
>     responses=not_found_response("tournament"),
> )
> async def get_tournament(request: Request, tournament_id: int) -> JSONResponse:
>     """Get a tournament using its ID.
  
>     Returns the tournament if found; otherwise, 404 Not Found.
>     """
>     sm = request.app.state.session_manager
>     async with sm.sessionmaker.begin() as session:
>         tournament = await crud.get_tournament(session, tournament_id)
  
>     if tournament is None:
>         logger.info("Tournament not found.", extra={"tournament_id": tournament_id})
>         return JSONResponse(
>             status_code=http.HTTPStatus.NOT_FOUND,
>             content={"message": "Tournament not found."},
>         )
>     else:
>         logger.info("Got tournament by ID.", extra={"tournament_id": tournament_id})
>         return JSONResponse(content=jsonable_encoder(tournament))
  
  
> @tournaments_router.delete(
>     "/{tournament_id}",
>     status_code=http.HTTPStatus.NO_CONTENT,
>     responses=not_found_response("tournament"),
> )
> async def delete_tournament(request: Request, tournament_id: int) -> Response:
>     """Delete an existing tournament.
  
>     Returns the tournament if found; otherwise, 404 Not Found.
>     """
>     sm = request.app.state.session_manager
>     async with sm.sessionmaker.begin() as session:
>         tournament = await crud.delete_tournament(session, tournament_id)
  
>     if tournament is None:
>         logger.info("Tournament not found.", extra={"tournament_id": tournament_id})
>         return JSONResponse(
>             status_code=http.HTTPStatus.NOT_FOUND,
>             content={"message": "Tournament not found."},
>         )
>     else:
>         logger.info("Deleted tournament by ID.", extra={"tournament_id": tournament_id})
>         return Response(status_code=http.HTTPStatus.NO_CONTENT)
  
  
> @tournaments_router.patch(
>     "/{tournament_id}",
>     response_model=Tournament,
>     responses=not_found_response("tournament"),
> )
> async def patch_tournament(
>     request: Request,
>     tournament_id: int,
>     tournament_patch: TournamentPatch,
> ) -> JSONResponse:
>     """Patch an existing tournament.
  
>     Returns the updated tournament.
>     """
>     sm = request.app.state.session_manager
>     async with sm.sessionmaker.begin() as session:
>         tournament = await crud.patch_tournament(
>             session, tournament_id, tournament_patch
>         )
  
>     if tournament is None:
!         logger.info(
!             "Tournament not found.",
!             extra={"tournament_patch": tournament_patch},
!         )
!         return JSONResponse(
!             status_code=http.HTTPStatus.NOT_FOUND,
!             content={"message": "Tournament not found."},
!         )
>     else:
>         logger.info(
>             "Patched tournament.",
>             extra={"tournament_patch": tournament_patch},
>         )
>         return JSONResponse(content=jsonable_encoder(tournament))
