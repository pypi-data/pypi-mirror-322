import argparse
import sys
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

import requests
from pyvulnerabilitylookup import PyVulnerabilityLookup

from exploitdbsighting import config

# Define the URL and default query parameters
url = "https://www.exploit-db.com/"
params = {
    "columns[0][data]": "date_published",
    "columns[0][name]": "date_published",
    "columns[0][orderable]": "true",
    "order[0][column]": "0",
    "order[0][dir]": "desc",
    "verified": "true",
}

# Define headers for the request
headers = {
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:132.0) Gecko/20100101 Firefox/132.0",
    "Accept": "application/json",
    "Referer": url,
    "X-Requested-With": "XMLHttpRequest",
    "DNT": "1",
    "Connection": "keep-alive",
}


def fetch_data(start=0, length=15):
    """
    Fetches data from Exploit-DB API with pagination support.
    """
    draw = (start + length) / length
    local_params = params.copy()
    local_params.update({"draw": str(draw), "start": str(start), "length": str(length)})

    # Send GET request
    response = requests.get(url, params=local_params, headers=headers)

    # Check response status
    if response.status_code == 200:
        data = response.json()
        return data.get("data", []), data.get("recordsTotal", 0)
    else:
        print(f"Failed to fetch data. Status code: {response.status_code}")
        sys.exit(1)


def process_exploit(entry, since_date):
    """
    Processes a single entry from Exploit-DB and pushes relevant data to Vulnerability Lookup.
    """
    exploit_id = entry.get("id")
    date_published = entry.get("date_published")
    naive_datetime = datetime.strptime(date_published, "%Y-%m-%d")
    utc_datetime = naive_datetime.replace(tzinfo=ZoneInfo("UTC"))

    # Stop processing if the record is older than the since_date
    if since_date and utc_datetime < since_date:
        print(
            f"Encountered record older than specified --since date ({since_date}). Stopping."
        )
        return False  # Signal to stop further processing

    codes = entry.get("code", [])
    if codes:
        for code_entry in codes:
            if code_entry.get("code_type") == "cve" and code_entry.get("code"):
                print(
                    f"CVE-{code_entry['code']}\nhttps://www.exploit-db.com/exploits/{exploit_id}\n{utc_datetime}"
                )
                push_sighting_to_vulnerability_lookup(
                    code_entry["code"], exploit_id, utc_datetime
                )
                print("")
    return True  # Signal to continue processing


def push_sighting_to_vulnerability_lookup(vulnerability_id, exploit_id, date_published):
    """
    Creates a sighting and pushes it to the Vulnerability Lookup instance.
    """
    print("Pushing sighting to Vulnerability-Lookup…")
    vuln_lookup = PyVulnerabilityLookup(
        config.vulnerability_lookup_base_url, token=config.vulnerability_auth_token
    )

    sighting = {
        "type": config.sighting_type,
        "source": f"https://www.exploit-db.com/exploits/{exploit_id}",
        "vulnerability": f"CVE-{vulnerability_id}",
        "creation_timestamp": date_published,
    }

    try:
        response = vuln_lookup.create_sighting(sighting=sighting)
        if "message" in response:
            print(response["message"])
    except Exception as e:
        print(
            f"Error when sending POST request to the Vulnerability Lookup server:\n{e}"
        )


def main():
    parser = argparse.ArgumentParser(
        prog="ExploitDBSighting",
        description="Exploit-DB Query Script",
    )
    parser.add_argument(
        "--since",
        type=str,
        help="Import all verified CVE-tagged exploits since (back until) this date inclusive (yyyy-mm-dd). or specify an integer to represent days in the past.",
    )
    args = parser.parse_args()

    since_date = None
    if args.since:
        try:
            # Check if `--since` is an integer (days in the past)
            if args.since.isdigit():
                since_date = datetime.now(tz=ZoneInfo("UTC")) - timedelta(
                    days=int(args.since)
                )
            else:
                since_date = datetime.strptime(args.since, "%Y-%m-%d").replace(
                    tzinfo=ZoneInfo("UTC")
                )
        except ValueError:
            print(
                "Invalid format for --since. Use yyyy-mm-dd or an integer for days in the past."
            )
            sys.exit(1)

    start = 0
    length = 250 if since_date else 15
    while True:
        print(f"Fetching records starting at {start}…")
        data, total_records = fetch_data(start=start, length=length)

        for entry in data:
            if not process_exploit(entry, since_date):
                return  # Stop if `since_date` condition is met

        start += length
        if total_records is not None and start >= total_records:
            break


if __name__ == "__main__":
    main()
