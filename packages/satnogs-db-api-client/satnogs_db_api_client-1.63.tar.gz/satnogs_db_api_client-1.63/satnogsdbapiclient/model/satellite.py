"""
    SatNOGS DB

    SatNOGS DB is a crowdsourced database of details about orbital                     satellites and data collected from them.  # noqa: E501

    The version of the OpenAPI document: 1.1
    Contact: dev@satnogs.org
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from satnogsdbapiclient.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from satnogsdbapiclient.exceptions import ApiAttributeError



class Satellite(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'sat_id': (str,),  # noqa: E501
            'norad_cat_id': (int,),  # noqa: E501
            'norad_follow_id': (int,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'names': (str,),  # noqa: E501
            'image': (str,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'decayed': (datetime,),  # noqa: E501
            'launched': (datetime,),  # noqa: E501
            'deployed': (datetime,),  # noqa: E501
            'website': (str,),  # noqa: E501
            'operator': (str,),  # noqa: E501
            'countries': (str,),  # noqa: E501
            'telemetries': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'updated': (datetime,),  # noqa: E501
            'citation': (str,),  # noqa: E501
            'is_frequency_violator': (bool,),  # noqa: E501
            'associated_satellites': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'sat_id': 'sat_id',  # noqa: E501
        'norad_cat_id': 'norad_cat_id',  # noqa: E501
        'norad_follow_id': 'norad_follow_id',  # noqa: E501
        'name': 'name',  # noqa: E501
        'names': 'names',  # noqa: E501
        'image': 'image',  # noqa: E501
        'status': 'status',  # noqa: E501
        'decayed': 'decayed',  # noqa: E501
        'launched': 'launched',  # noqa: E501
        'deployed': 'deployed',  # noqa: E501
        'website': 'website',  # noqa: E501
        'operator': 'operator',  # noqa: E501
        'countries': 'countries',  # noqa: E501
        'telemetries': 'telemetries',  # noqa: E501
        'updated': 'updated',  # noqa: E501
        'citation': 'citation',  # noqa: E501
        'is_frequency_violator': 'is_frequency_violator',  # noqa: E501
        'associated_satellites': 'associated_satellites',  # noqa: E501
    }

    read_only_vars = {
        'sat_id',  # noqa: E501
        'norad_cat_id',  # noqa: E501
        'norad_follow_id',  # noqa: E501
        'name',  # noqa: E501
        'names',  # noqa: E501
        'image',  # noqa: E501
        'status',  # noqa: E501
        'decayed',  # noqa: E501
        'launched',  # noqa: E501
        'deployed',  # noqa: E501
        'website',  # noqa: E501
        'operator',  # noqa: E501
        'countries',  # noqa: E501
        'telemetries',  # noqa: E501
        'updated',  # noqa: E501
        'citation',  # noqa: E501
        'is_frequency_violator',  # noqa: E501
        'associated_satellites',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, sat_id, norad_cat_id, norad_follow_id, name, names, image, status, decayed, launched, deployed, website, operator, countries, telemetries, updated, citation, is_frequency_violator, associated_satellites, *args, **kwargs):  # noqa: E501
        """Satellite - a model defined in OpenAPI

        Args:
            sat_id (str): Returns Satellite sat_id
            norad_cat_id (int): Returns Satellite norad_cat_id
            norad_follow_id (int): Returns Satellite norad_follow_id
            name (str): Returns Satellite name
            names (str): Returns Satellite alternative names
            image (str): Returns Satellite image URI
            status (str): Returns Satellite status text
            decayed (datetime): Returns Satellite decayed datetime
            launched (datetime): Returns Satellite launched datetime
            deployed (datetime): Returns Satellite deployed datetime
            website (str): Returns Satellite website
            operator (str): Returns operator text
            countries (str): Returns countires
            telemetries ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Returns telemetries
            updated (datetime): Returns Satellite decayed datetime
            citation (str): Returns Satellite decayed datetime
            is_frequency_violator (bool): Returns if there is a frequency violation
            associated_satellites ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Returns Satellite IDs that are associated with the Satellite

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.sat_id = sat_id
        self.norad_cat_id = norad_cat_id
        self.norad_follow_id = norad_follow_id
        self.name = name
        self.names = names
        self.image = image
        self.status = status
        self.decayed = decayed
        self.launched = launched
        self.deployed = deployed
        self.website = website
        self.operator = operator
        self.countries = countries
        self.telemetries = telemetries
        self.updated = updated
        self.citation = citation
        self.is_frequency_violator = is_frequency_violator
        self.associated_satellites = associated_satellites
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Satellite - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
