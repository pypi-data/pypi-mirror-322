# https://peps.python.org/pep-0517/
[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

# https://hatch.pypa.io/latest/config/metadata/
[tool.hatch.version]
source = "vcs"

# read more about configuring hatch at:
# https://hatch.pypa.io/latest/config/build/
[tool.hatch.build.targets.wheel]
packages = ["src/ngio"]

# https://peps.python.org/pep-0621/
[project]
name = "ngio"
dynamic = ["version"]
description = "Next Generation file format IO"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "BSD-3-Clause" }
authors = [{ name = "Lorenzo Cerrone", email = "lorenzo.cerrone@uzh.ch" }]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
]
# add your package dependencies here
dependencies = [
    "numpy",
    "anndata>=0.8.0",
    "pydantic",
    "pandas>=1.2.0",
    "requests",
    "aiohttp",
    "dask[array]",
]

# https://peps.python.org/pep-0621/#dependencies-optional-dependencies
# "extras" (e.g. for `pip install .[test]`)
[project.optional-dependencies]
# add dependencies used for testing here
core = ["zarr<3", "dask[distributed]", "dask-image"]

test = ["zarr<3", "pytest", "pytest-cov"]

dev2 = [
    "zarr<3",
    "plotly",
    "dask[distributed]",
    "dask-image",
    "napari",
    "pyqt5",
    "scikit-image",
    "matplotlib",
    "ipython",
    "pytest",
    "pytest-cov",
    "notebook",
    "mypy",
    "pdbpp",             # https://github.com/pdbpp/pdbpp
    "pre-commit",
    "rich",              # https://github.com/Textualize/rich
    "ruff",
] # add anything else you like to have in your dev environment here

dev3 = [
    "zarr==v3.0.0-alpha.4",
    "dask[distributed]",
    "dask-image",
    "ipython",
    "pytest",
    "pytest-cov",
    "notebook",
    "mypy",
    "pdbpp",                # https://github.com/pdbpp/pdbpp
    "pre-commit",
    "rich",                 # https://github.com/Textualize/rich
    "ruff",
]

docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings[python]",
    "mkdocs-jupyter",
    "mkdocs-autorefs",
    "mkdocs-git-revision-date-localized-plugin",
    "mkdocs-git-committers-plugin-2",
    "scikit-image",
]


[project.urls]
homepage = "https://github.com/lorenzocerrone/ngio"
repository = "https://github.com/lorenzocerrone/ngio"

# Entry points
# https://peps.python.org/pep-0621/#entry-points
# same as console_scripts entry point
# [project.scripts]
# ngio-cli = "ngio:main_cli"

# [project.entry-points."some.group"]
# tomatoes = "ngio:main_tomatoes"

# https://docs.astral.sh/ruff
[tool.ruff]
line-length = 88
target-version = "py310"
src = ["src"]

# https://docs.astral.sh/ruff/rules
[tool.ruff.lint]
pydocstyle = { convention = "google" }
select = [
    "E",    # style errors
    "W",    # style warnings
    "F",    # flakes
    "D",    # pydocstyle
    "D417", # Missing argument descriptions in Docstrings
    "I",    # isort
    "UP",   # pyupgrade
    "C4",   # flake8-comprehensions
    "B",    # flake8-bugbear
    "A001", # flake8-builtins
    "RUF",  # ruff-specific rules
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
]
ignore = [
    "D401", # First line should be in imperative mood (remove to opt in)
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["D", "S"]

# https://docs.astral.sh/ruff/formatter/
[tool.ruff.format]
docstring-code-format = true
skip-magic-trailing-comma = false # default is false

# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
files = "src/**/"
strict = true
ignore_missing_imports = true
disallow_any_generics = false
disallow_subclassing_any = false
show_error_codes = true
pretty = true

# https://docs.pytest.org/
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::FutureWarning", # TODO remove after zarr-python v3 
]
addopts = [
    "-vv",
    "--color=yes",
    "--cov",
    "--cov-report=term-missing",
    "--cov-report=xml",
]

# https://coverage.readthedocs.io/
[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError",
    "\\.\\.\\.",
    "raise NotImplementedError()",
    "pass",
]

[tool.coverage.run]
source = ["ngio"]

# https://github.com/mgedmin/check-manifest#configuration
# add files that you want check-manifest to explicitly ignore here
# (files that are in the repo but shouldn't go in the package)
[tool.check-manifest]
ignore = [".pre-commit-config.yaml", ".ruff_cache/**/*", "tests/**/*"]

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["osx-arm64", "linux-64", "win-64"]

[tool.pixi.pypi-dependencies]
ngio = { path = ".", editable = true }

[tool.pixi.feature.py310.dependencies]
python = ">=3.10,<3.11"

[tool.pixi.feature.py311.dependencies]
python = ">=3.11,<3.12"

[tool.pixi.feature.py312.dependencies]
python = ">=3.12,<3.13"

[tool.pixi.feature.py313.dependencies]
python = ">=3.13"


[tool.pixi.environments]
default = { solve-group = "default" }
core = { features = ["core"], solve-group = "core" }
dev10 = { features = ["py310", "dev2"], solve-group = "v2_10" }
dev11 = { features = ["py311", "dev2"], solve-group = "v2_11" }
dev12 = { features = ["py312", "dev2"], solve-group = "v2_12" }
dev13 = { features = ["py313", "dev2"], solve-group = "v2_13" }
dev3 = { features = ["dev3"], solve-group = "v3" }
test = { features = ["test"], solve-group = "v2_10" }
docs = { features = ["dev2", "docs"], solve-group = "v2_10" }

[tool.pixi.tasks]
serve_docs = "mkdocs serve"
tests = "pytest"
test_nb = { cmd = "jupyter-execute ./docs/notebooks/*.ipynb", depends-on = [
    "tests",
] }
