Metadata-Version: 2.3
Name: fastapi-agents
Version: 0.1.27
Summary: A FastAPI extension for integrating common AI agent frameworks.
Project-URL: Repository, https://github.com/blairhudson/fastapi-agents
Author-email: Blair Hudson <blairhudson@users.noreply.github.com>
License: MIT License
        
        Copyright (c) 2025 Blair Hudson
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Keywords: agents,ai,fastapi,llama-index,pydantic-ai,smolagents
Classifier: Development Status :: 3 - Alpha
Classifier: Framework :: FastAPI
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.12
Requires-Dist: fastapi>=0.115.6
Provides-Extra: crewai
Requires-Dist: crewai>=0.95.0; extra == 'crewai'
Provides-Extra: llama-index
Requires-Dist: llama-index>=0.12.10; extra == 'llama-index'
Provides-Extra: pydantic-ai
Requires-Dist: pydantic-ai>=0.0.18; extra == 'pydantic-ai'
Provides-Extra: security
Requires-Dist: python-multipart>=0.0.20; extra == 'security'
Provides-Extra: smolagents
Requires-Dist: litellm>=1.57.8; extra == 'smolagents'
Requires-Dist: smolagents>=1.2.2; extra == 'smolagents'
Provides-Extra: uvicorn
Requires-Dist: uvicorn>=0.34.0; extra == 'uvicorn'
Description-Content-Type: text/markdown

# FastAPI Agents

**FastAPI Agents** is the ultimate FastAPI extension for integrating AI agents into your applications. With just a few lines of code, you can create, manage, and secure AI-powered endpoints, enabling you to build smarter, more interactive apps effortlessly. Whether you're a seasoned developer or just exploring AI integrations, FastAPI Agents has you covered! 🎉

## ✨ Features at a Glance

- 🤖 **Easy Agent Management**: Register, organize, and interact with multiple AI agents seamlessly.
- 🔐 **Built-In Security**: Easily add API key, OAuth2, cookie, or OpenID authentication to your endpoints.
- 📚 **Agent Framework Support**: Compatible with agent frameworks like PydanticAI, Llama-Index, HuggingFace Smolagents and CrewAI.
- 🐳 **Pre-Built Containers**: Easily deploy agents in your favourite framework with ready made containers.
- 🔌 **OpenAI Compatibility**: Use your APIs with other AI tooling including the OpenAI SDK itself. (Experimental)
- 🛠️ **Extensibility**: Support additional agent frameworks by extending the `BaseAgent` class.
- 🧩 **Dynamic Dependencies**: Inject and resolve request-specific configurations effortlessly.
- 🚀 **Performance Optimized**: Leverage FastAPI's high performance and scalability for AI agent interactions.
- 📖 **Auto-Generated API Documentation**: OpenAPI integration for your registered agents, out of the box!

See [Releases](https://github.com/blairhudson/fastapi-agents/releases) for the latest updates at and [Roadmap](https://fastapi-agents.blairhudson.com/roadmap/) for what's coming.

## 💖 Sponsors

You can support the ongoing development of FastAPI Agents by becoming a sponsor:

[Sponsor FastAPI Agents](https://github.com/sponsors/blairhudson)

## 📚 Documentation

For further documentation, including detailed API documentation for the available agent frameworks, visit the [FastAPI Agents Documentation](https://fastapi-agents.blairhudson.com/).

## 🚀 Installation

Install `FastAPI Agents` using pip, poetry or uv:

```bash
pip install fastapi-agents
poetry add fastapi-agents
uv add fastapi-agents
```

Install optional extras for your chosen agent frameworks:

```bash
pip install 'fastapi-agents[pydantic-ai]'
poetry add fastapi-agents -E pydantic-ai
uv add fastapi-agents --extra pydantic-ai
```

For available extras, replace `pydantic-ai` with the desired agent framework (e.g. `smolagents` or `llama-index`). See [pyproject.toml](https://github.com/blairhudson/fastapi-agents/blob/main/pyproject.toml) for the full list of extras.

That's it! You're all set to start integrating AI agents into your FastAPI applications. 🎉

## 🏁 Quick Start

### Registering Agents

Here’s how to get started with a basic `PydanticAI` agent:

```python
from fastapi import FastAPI
from fastapi_agents import FastAPIAgents
from fastapi_agents.pydantic_ai import PydanticAIAgent
from pydantic_ai import Agent

app = FastAPI()
agents = FastAPIAgents(path_prefix="/agents")

# Initialize and register the agent
agent = Agent("openai:gpt-4o-mini")
agents.register("pydanticai", PydanticAIAgent(agent))

# Include the router
app.include_router(agents)
```

### Adding Security

Secure your endpoints with API Key authentication in just a few steps:

```python
from fastapi.security import APIKeyHeader
from fastapi_agents import FastAPIAgents

# Define API Key validation
def validate_api_key(api_key: str = Depends(APIKeyHeader(name="X-API-Key"))):
    if api_key != "my-secret-api-key":
        raise HTTPException(status_code=403, detail="Invalid API Key")

# Secure the agents
agents = FastAPIAgents(path_prefix="/agents", security_dependency=validate_api_key)
```

👉 See [Security Examples](https://github.com/blairhudson/fastapi-agents/tree/main/examples/security) for more details.

### Running the Application

Run your FastAPI application with the registered agents:

```bash
uvicorn --reload <module>:app
```

Replace `<module>` with the name of the Python module containing your FastAPI application.

That's it! You're all set to start building smarter, more secure FastAPI applications with AI agents. 🚀

## 🤝 Supported Agents

`FastAPI Agents` supports a variety of agent frameworks, including:

1. **PydanticAI**: AI agents powered by Pydantic AI. [Examples](https://github.com/blairhudson/fastapi-agents/tree/main/examples/pydantic-ai)
2. **Llama Index**: OpenAI agents with Llama Index integration. [Examples](https://github.com/blairhudson/fastapi-agents/tree/main/examples/llama-index)
3. **HuggingFace Smolagents**: Lightweight and efficient AI agents. [Examples](https://github.com/blairhudson/fastapi-agents/tree/main/examples/smolagents)
4. **CrewAI**: Multi-agent Framework to create Crews. [Examples](https://github.com/blairhudson/fastapi-agents/tree/main/examples/crewai)

## 🐳 Using Docker

### Pre-Built Images

The simplest way to containerise your agents!

Pre-built Docker images for `FastAPI Agents` are available on GitHub Container Registry (GHCR):

**Repository**: `ghcr.io/blairhudson/fastapi-agents`

**Tags**:
  - Framework-specific: `pydantic-ai`, `smolagents`, `llama-index`, `crewai`
  - Version-specific: `<framework>-<version>`

To pull a specific image:

```bash
docker pull ghcr.io/blairhudson/fastapi-agents:pydantic-ai
```

See all available images and tags in [Versions](https://github.com/blairhudson/fastapi-agents/pkgs/container/fastapi-agents/versions).

Currently pre-built images support only one agent per container. If you are creating containers that can serve multiple agents, it is recommended to define your own containers.

### Environment Variables

The pre-built images support the following environment variables for customisation:

| Variable           | Example Value      | Description                                                |
|--------------------|--------------------|------------------------------------------------------------|
| `AGENT_FRAMEWORK`  | `pydantic-ai`     | Specifies the agent framework to use.                      |
| `AGENT_MODULE`     | `agent.pydantic_ai` | Path to the agent module.                                  |
| `AGENT_CLASS`      | `agent`           | Class name for the agent.                                  |
| `SECURITY_MODULE`  | `agent.pydantic_ai` | Specifies the security module for the agent. |
| `SECURITY_CLASS` | `validate_token` | Class name for the security depdency. |
| `API_ENDPOINT`     | `pydantic-ai`      | API endpoint path for the agent.                           |
| `API_PREFIX`       | `/agents`         | Prefix for all agent-related API endpoints.                |
| `API_MODE` | `simple` | Changes how endpoints are registered. `openai` changes to OpenAI-compatible endpoints. |
| `PORT`             | `8080`            | Port the application runs on within the container.         |

To customize these values, pass them as `-e` arguments to `docker run` or define them in an `.env` file.

### Volume Mounting

Agents are expected to be volume-mounted at `/app/agent`. You can mount your agent directory as follows:

```bash
docker run -p 8000:8080 \
  -v $(pwd)/agent:/app/agent \
  ghcr.io/blairhudson/fastapi-agents:pydantic-ai
```

If a `requirements.txt` file is present in the mounted directory, it will be automatically installed at container startup.

### Building Custom Containers

For production deployments, it is recommended to build your container with dependencies included. Here’s an example `Dockerfile` starting from one of the pre-built base images:

```dockerfile
FROM ghcr.io/blairhudson/fastapi-agents:pydantic-ai

# Copy your agent source code
COPY ./agent /app/agent

# Install dependencies
RUN pip install --no-cache-dir -r /app/agent/requirements.txt
```

Build and run the custom image:

```bash
docker build -t my-custom-agent .
docker run -p 8000:8080 my-custom-agent
```

This approach ensures all dependencies are baked into the image, improving startup performance and reliability.

## 💡 Examples

Explore real-world examples for implementing `FastAPI Agents` in different scenarios:

- **Agent Frameworks**:
    - [PydanticAI](https://github.com/blairhudson/fastapi-agents/tree/main/examples/pydantic-ai/pydantic_ai.py)
    - [Llama-Index](https://github.com/blairhudson/fastapi-agents/tree/main/examples/llama-index/llama_index.py)
    - [Huggingface SmolAgents](https://github.com/blairhudson/fastapi-agents/tree/main/examples/smolagents/smolagents.py)
- **Advanced Agent Frameworks**:
    - [PydanticAI with Dependencies](https://github.com/blairhudson/fastapi-agents/tree/main/examples/pydantic-ai/pydantic_ai_deps.py)
- **Docker**:
    - [PydanticAI in Docker](https://github.com/blairhudson/fastapi-agents/tree/main/examples/docker)
- **Security Integrations**:
    - [API Key Authentication](https://github.com/blairhudson/fastapi-agents/tree/main/examples/security/security_apikey.py)
    - [Cookie Authentication](https://github.com/blairhudson/fastapi-agents/tree/main/examples/security/security_cookie.py)
    - [OAuth2 Authentication](https://github.com/blairhudson/fastapi-agents/tree/main/examples/security/security_oauth2.py)
    - [OpenID Connect (OIDC)](https://github.com/blairhudson/fastapi-agents/tree/main/examples/security/security_oidc.py)
    - [HTTP Basic Auth](https://github.com/blairhudson/fastapi-agents/tree/main/examples/security/security_httpbasic.py)

## 🤝 Contributing

We welcome contributions! To contribute:

1. Fork the repository.
2. Create a feature branch.
3. Add any new tests and ensure they pass. i.e. `uv run pytest`.
4. Submit a pull request.

For any questions or feature requests including additional agent frameworks, open an issue in the repository.

## 📄 Citation

If you use **FastAPI Agents** in your work, please consider citing it using the metadata in the `CITATION.cff` file:

[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.14635504.svg)](https://doi.org/10.5281/zenodo.14635504)

This DOI represents all versions of the project. For version-specific DOIs, refer to the [Zenodo project page](https://doi.org/10.5281/zenodo.14635504).

Alternatively, you can use the following BibTeX entry:

```bibtex
@software{fastapi_agents,
  author = {Blair Hudson},
  title = {FastAPI Agents},
  year = {2025},
  version = {0.1},
  doi = {10.5281/zenodo.14635504},
  url = {https://github.com/blairhudson/fastapi-agents},
  orcid = {https://orcid.org/0009-0007-4216-4555},
  abstract = {FastAPI Agents is the ultimate FastAPI extension for integrating AI agents into your applications.}
}
```

## 📜 License

This project is licensed under the MIT License. See the `LICENSE` file for more details.
