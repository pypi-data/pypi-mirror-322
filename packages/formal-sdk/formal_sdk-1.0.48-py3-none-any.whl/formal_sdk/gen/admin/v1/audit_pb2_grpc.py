# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import audit_pb2 as admin_dot_v1_dot_audit__pb2


class AuditLogsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLogs = channel.unary_unary(
                '/admin.v1.AuditLogsService/GetLogs',
                request_serializer=admin_dot_v1_dot_audit__pb2.GetLogsRequest.SerializeToString,
                response_deserializer=admin_dot_v1_dot_audit__pb2.GetLogsResponse.FromString,
                _registered_method=True)
        self.GetLogByID = channel.unary_unary(
                '/admin.v1.AuditLogsService/GetLogByID',
                request_serializer=admin_dot_v1_dot_audit__pb2.GetLogByIDRequest.SerializeToString,
                response_deserializer=admin_dot_v1_dot_audit__pb2.GetLogByIDResponse.FromString,
                _registered_method=True)
        self.GetEventBySession = channel.unary_unary(
                '/admin.v1.AuditLogsService/GetEventBySession',
                request_serializer=admin_dot_v1_dot_audit__pb2.GetEventBySessionRequest.SerializeToString,
                response_deserializer=admin_dot_v1_dot_audit__pb2.GetEventBySessionResponse.FromString,
                _registered_method=True)
        self.GetDataBySession = channel.unary_unary(
                '/admin.v1.AuditLogsService/GetDataBySession',
                request_serializer=admin_dot_v1_dot_audit__pb2.GetDataBySessionRequest.SerializeToString,
                response_deserializer=admin_dot_v1_dot_audit__pb2.GetDataBySessionResponse.FromString,
                _registered_method=True)


class AuditLogsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLogByID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEventBySession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataBySession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuditLogsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLogs,
                    request_deserializer=admin_dot_v1_dot_audit__pb2.GetLogsRequest.FromString,
                    response_serializer=admin_dot_v1_dot_audit__pb2.GetLogsResponse.SerializeToString,
            ),
            'GetLogByID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLogByID,
                    request_deserializer=admin_dot_v1_dot_audit__pb2.GetLogByIDRequest.FromString,
                    response_serializer=admin_dot_v1_dot_audit__pb2.GetLogByIDResponse.SerializeToString,
            ),
            'GetEventBySession': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEventBySession,
                    request_deserializer=admin_dot_v1_dot_audit__pb2.GetEventBySessionRequest.FromString,
                    response_serializer=admin_dot_v1_dot_audit__pb2.GetEventBySessionResponse.SerializeToString,
            ),
            'GetDataBySession': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataBySession,
                    request_deserializer=admin_dot_v1_dot_audit__pb2.GetDataBySessionRequest.FromString,
                    response_serializer=admin_dot_v1_dot_audit__pb2.GetDataBySessionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'admin.v1.AuditLogsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('admin.v1.AuditLogsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AuditLogsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/admin.v1.AuditLogsService/GetLogs',
            admin_dot_v1_dot_audit__pb2.GetLogsRequest.SerializeToString,
            admin_dot_v1_dot_audit__pb2.GetLogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLogByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/admin.v1.AuditLogsService/GetLogByID',
            admin_dot_v1_dot_audit__pb2.GetLogByIDRequest.SerializeToString,
            admin_dot_v1_dot_audit__pb2.GetLogByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEventBySession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/admin.v1.AuditLogsService/GetEventBySession',
            admin_dot_v1_dot_audit__pb2.GetEventBySessionRequest.SerializeToString,
            admin_dot_v1_dot_audit__pb2.GetEventBySessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDataBySession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/admin.v1.AuditLogsService/GetDataBySession',
            admin_dot_v1_dot_audit__pb2.GetDataBySessionRequest.SerializeToString,
            admin_dot_v1_dot_audit__pb2.GetDataBySessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
