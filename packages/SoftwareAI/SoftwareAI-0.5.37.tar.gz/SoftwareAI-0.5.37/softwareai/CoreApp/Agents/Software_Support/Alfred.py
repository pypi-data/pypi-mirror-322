

#########################################
# IMPORT SoftwareAI Core
from softwareai.CoreApp._init_core_ import * 
#########################################
# IMPORT SoftwareAI Libs 
from softwareai.CoreApp._init_libs_ import *
#########################################
# IMPORT SoftwareAI All Paths 
from softwareai.CoreApp._init_paths_ import *
#########################################
# IMPORT SoftwareAI Instructions
from softwareai.CoreApp._init_Instructions_ import *
#########################################
# IMPORT SoftwareAI Tools
from softwareai.CoreApp._init_tools_ import *
#########################################
# IMPORT SoftwareAI Functions
from softwareai.CoreApp._init_functions_ import *
#########################################
# IMPORT SoftwareAI Functions Submit Outputs
from softwareai.CoreApp._init_submit_outputs_ import _init_output_

from huggingface_hub import InferenceClient
from huggingface_hub import login
from telegram import Bot

# IMPORT SoftwareAI keys
from softwareai.CoreApp._init_keys_ import *
#########################################

class Alfred:
    """softwareai/Docs/Agents/Alfred.md"""
    def __init__(self,

            ):
        pass

    class MemeinApplicationContext:
        def __init__(self,
                    appfb,
                    client,
                    nameApp,
                    descriptionApp,
                    watermark,
                    Debug=True,
                    lang="pt"


                ):
            self.Debug = Debug
            self.lang = lang
            self.appfb = appfb
            self.client = client
            self.user_threads = {}
            self.key = "AI_MemeinApplicationContext"
            self.nameassistant = "MemeinApplicationContext"
            self.model_select = "gpt-4o-mini-2024-07-18"
            self.nameApp = nameApp
            self.watermark = watermark 
            self.Upload_1_file_in_thread = None
            self.Upload_1_file_in_message = None
            self.Upload_1_image_for_vision_in_thread = None
            self.codeinterpreter = None
            self.vectorstore = None
            self.vectorstore_in_agent = None
            self.instruction = """
            com base no mini dataset de prompt atual crie outro prompt para memes diarios para  os canais de comunicacao do aplicativo adicione uma marca da agua {self.watermark} 
            responda semprem em ingles
            """
            self.descriptionApp = descriptionApp 
            hugfacetoken = hugKeys.hug_1_keys()
            login(hugfacetoken)
            self.InferenceClientMeme  = InferenceClient("prithivMLmods/Flux-Meme-Xd-LoRA", token=hugfacetoken)

        def main(self):


            # Autentica√ß√£o do assistente de IA
            AI, instructionsassistant, nameassistant, model_select = AutenticateAgent.create_or_auth_AI(
                self.appfb,
                self.client,
                self.key,
                self.instruction,
                self.nameassistant,
                self.model_select,
                response_format="json_object"
            )

            if self.Debug:
                if self.lang == "pt":
                    cprint(f"üîê Autentica√ß√£o conclu√≠da. Assistente: {nameassistant}, Modelo: {model_select}", 'cyan')
                else:
                    cprint(f"üîê Authentication completed. Assistant: {nameassistant}, Model: {model_select}", 'cyan')

            prompt = f"""
            com base no mini dataset de prompt atual crie outro prompt para memes diarios para  os canais de comunicacao do aplicativo adicione uma marca da agua {self.watermark} 
            responda semprem em ingles

            aplicativo:
            {self.descriptionApp}

            

            mini dataset:

            meme, A cartoon drawing of a brown cat and a white sheep. The sheep is facing each other and the cat is facing towards the left side of the image. The brown cat has a black nose and a black mouth. The white sheep has a white body and black legs. The background is a light peach color. There is a text bubble above the brown cat that says "If you feel sad I can eat you".

            meme, A medium-sized painting of a white T-rex in the middle of a dark, stormy night. The t-rex is facing towards the left side of the frame, its head turned towards the right. Its mouth is open, revealing its sharp teeth. A rooster is standing in the foreground of the painting, with a red cap on its head. The roosters head is turned to the right, and the word "Remember who you are" is written in white text above it. The background is a deep blue, with dark gray clouds and a crescent moon in the upper left corner of the image. There are mountains in the background, and a few other animals can be seen in the lower right corner.


            meme, A cartoon drawing of two zebras facing each other. The zebra on the left is facing the right. The horse on the right is facing to the left. The zebrab is facing towards the right and has a black mane on its head. The mane is black and white. The sky is light blue and there are birds flying in the sky. There is a text bubble above the zebras head that says "UPGRADE MAN!"

            meme, A cartoon-style illustration showing a hooded hacker sitting in front of a computer with the message "VPN expired" flashing on the screen. In the corner of the image, a stylized safe with the NordVPN logo is being closed automatically. The hacker has a frustrated expression with a speech bubble saying, "No chance today!" At the bottom, the text: "Nord Auto Rotate ‚Äì Changing servers, keeping you safe."
                        
            """

            if self.Debug:
                if self.lang == "pt":
                    cprint(f"üìù Prompt criado : {prompt}", 'cyan')
                else:
                    cprint(f"üìù Prompt created : {prompt}", 'cyan')

            # Instru√ß√£o adicional para resposta em JSON
            self.adxitional_instructions = 'Responda no formato JSON Exemplo: {"newprompt": "..."}'

            # Chamada para gerar a resposta do assistente
            response, total_tokens, prompt_tokens, completion_tokens = ResponseAgent.ResponseAgent_message_with_assistants(
                mensagem=prompt,
                agent_id=AI,
                key=self.key,
                app1=self.appfb,
                client=self.client,
                model_select=model_select,
                aditional_instructions=self.adxitional_instructions
            )

            if self.Debug:
                if self.lang == "pt":
                    cprint(f"üì® Resposta recebida do assistente: {response}", 'cyan')
                else:
                    cprint(f"üì® Response received from assistant: {response}", 'cyan')

            try:
                response_dictload = json.loads(response)
                response_dict = response_dictload['newprompt']

                if self.Debug:
                    if self.lang == "pt":
                        cprint("‚úÖ Resposta convertida para dicion√°rio JSON.", 'green')
                    else:
                        cprint("‚úÖ Response converted to JSON dictionary.", 'green')
            except Exception as e:
                response_dict = response
                if self.Debug:
                    if self.lang == "pt":
                        cprint(f"‚ö†Ô∏è Falha ao converter resposta para JSON: {str(e)}", 'red')
                    else:
                        cprint(f"‚ö†Ô∏è Failed to convert response to JSON: {str(e)}", 'red')

            full_hash = hashlib.sha256(response_dict.encode('utf-8')).hexdigest()
            MemeHash = full_hash[:13]

            tentativas = 15
            espera = 60
            for tentativa in range(tentativas):
                try:
                    if self.lang == "pt":
                        cprint(" Gerando Meme", 'green')
                    else:
                        cprint(" Generating meme.", 'green')
                    image = self.InferenceClientMeme.text_to_image(response_dict)
                    os.makedirs(os.path.join(os.path.dirname(__file__), f"Meme_{self.nameApp}"), exist_ok=True)
                    image_path = os.path.join(os.path.dirname(__file__), f"Meme_{self.nameApp}", f"{MemeHash}.png")
                    image.save(image_path)
                    return image_path
                except Exception as e:
                    print(f"Erro na tentativa {tentativa + 1}: {e}")
                    if tentativa < tentativas - 1:
                        print(f"Tentando novamente em {espera} segundos...")
                        time.sleep(espera)
                    else:
                        print("Falha ap√≥s m√∫ltiplas tentativas. Tente mais tarde.")



    class NordVPN_Auto_Rotate:
        def __init__(self,
                    appfb,
                    client,
                    TOKEN,
                    CHANNEL_ID
                ):
            self.appfb = appfb
            self.client = client
            self.TOKEN = TOKEN
            self.agent = Bot(token=self.TOKEN)
            self.CHANNEL_ID = CHANNEL_ID
            self.user_threads = {}
            self.key = "AI_Alfred"
            self.nameassistantAlfred = "Alfred"
            self.model_selectAlfred = "gpt-4o-mini-2024-07-18"
            self.Upload_1_file_in_thread = None
            self.Upload_1_file_in_message = None
            self.Upload_1_image_for_vision_in_thread = None
            self.codeinterpreter = None
            self.vectorstore = None
            self.vectorstore_in_agent = None
            self.instruction = """

    ## Objetivo
    Oferecer suporte completo aos usu√°rios do **NordVPN Auto Rotate**, garantindo a resolu√ß√£o r√°pida de problemas, registro organizado de tickets, e coleta de feedback para melhoria cont√≠nua.

    ---

    ## Diretrizes de Atendimento

    ### 1. **Boas-vindas e Agradecimento**
    - Agrade√ßa ao cliente por escolher o NordVPN Auto Rotate.
    - Envie a seguinte mensagem padr√£o de boas-vindas:

    **Mensagem de Boas-vindas:**
    "Obrigado por escolher o **NordVPN Auto Rotate**. Aproveite todos os benef√≠cios de seguran√ßa e privacidade que nosso aplicativo oferece.

    üì• **Download do Aplicativo:** [Clique aqui para baixar](https://www.mediafire.com/file/e8803j54knyj23p/Nord_Auto_Rotate.rar/file)

    üì∫ **Tutorial no YouTube:** [Assista ao v√≠deo](https://www.youtube.com/watch?v=E4fbZUVMMEI)

    üìû **Suporte via Telegram:** [Acesse o grupo de suporte](https://t.me/+dpGofyMuGUszY2Rh)"

    ---

    2. Solu√ß√£o de Problemas
      Para garantir uma resolu√ß√£o eficiente, todos os problemas relatados devem ser registrados imediatamente como um Ticket de Suporte no sistema. Isso permite que nossa equipe analise e resolva a quest√£o de forma r√°pida e organizada.

      Procedimento para Solu√ß√£o de Problemas:
      Identifique o Problema Reportado:

      Solicite ao cliente uma descri√ß√£o clara do erro e informa√ß√µes adicionais, como sistema operacional e o serial utilizado, se aplic√°vel.
      Cria√ß√£o de Ticket:

      Use a fun√ß√£o OpenSupportTicketProblem para registrar o problema no banco de dados.
      Par√¢metros necess√°rios:
      user_email: Email do cliente.
      issue_description: Descri√ß√£o detalhada do problema.
      Mensagem ao Cliente Ap√≥s Registro:

      "(emote) Seu problema foi registrado com sucesso e j√° est√° sendo analisado pela nossa equipe. Seu Ticket ID √©: {ticket_id}. Retornaremos com uma solu√ß√£o o mais breve poss√≠vel."
      Encaminhamento Interno:

      Nossa equipe de suporte analisar√° o ticket e trabalhar√° na solu√ß√£o. Assim que resolvido, o cliente ser√° informado.
      Exemplos de Mensagens para Situa√ß√µes Espec√≠ficas:
      Erro: N√£o conecta ao servidor

      Mensagem ao cliente:
      "(emote) Entendemos que est√° enfrentando dificuldades para conectar ao servidor. Vamos analisar e resolver isso rapidamente. Seu problema foi registrado sob o Ticket ID {ticket_id}."
      Erro: Licen√ßa inv√°lida

      Mensagem ao cliente:
      "(emote) Parece que h√° um problema com a licen√ßa. Vamos verificar e corrigir isso para voc√™. O problema foi registrado sob o Ticket ID {ticket_id}."
      Erro: Aplicativo n√£o inicia

      Mensagem ao cliente:
      "(emote) O aplicativo n√£o est√° iniciando corretamente? N√£o se preocupe, vamos ajudar. Registramos seu problema com o Ticket ID {ticket_id}."
      Coleta de Satisfa√ß√£o:

      Ap√≥s a resolu√ß√£o, utilize a fun√ß√£o RecordCSAT para coletar a pontua√ß√£o de satisfa√ß√£o do cliente.
      "(emote) Gostar√≠amos de saber como avalia nosso atendimento! Por favor, forne√ßa uma nota de 1 a 5 para sua experi√™ncia."
      Fechamento do Ticket:

      Ap√≥s coletar o feedback, finalize o processo utilizando a fun√ß√£o CloseSupportTicketProblem.
      Com esse fluxo, garantimos um suporte mais r√°pido e organizado, al√©m de uma melhor experi√™ncia para o cliente.



    ### 3. **Gerenciamento de Tickets**

    #### Abertura de Tickets:
    - Utilize a fun√ß√£o **OpenSupportTicketProblem** para registrar problemas reportados por clientes no banco de dados.
    - **Par√¢metros necess√°rios:**  
    - **user_email**: Email do cliente.  
    - **issue_description**: Descri√ß√£o detalhada do problema relatado.

    - **Mensagem ao cliente:**  
    "Seu problema foi registrado com sucesso. Nosso time de suporte est√° analisando a quest√£o. Seu Ticket ID √©: **{ticket_id}**."

    #### Coleta de Satisfa√ß√£o:
    - Antes de fechar um ticket, utilize a fun√ß√£o **RecordCSAT** para coletar a Pontua√ß√£o de Satisfa√ß√£o do Cliente (CSAT).  
    - **Par√¢metros necess√°rios:**  
    - **ticketid**: ID do ticket em quest√£o.  
    - **csat_score**: Nota de satisfa√ß√£o do cliente (de 1 a 5).  

    - **Mensagem ao cliente:**  
    "Poderia nos informar uma nota de 1 a 5 para avaliar sua experi√™ncia com nosso suporte? Sua opini√£o √© muito importante para n√≥s."

    #### Fechamento de Tickets:
    - Ap√≥s a coleta da CSAT, utilize a fun√ß√£o **CloseSupportTicketProblem** para fechar o ticket no banco de dados.
    - **Par√¢metros necess√°rios:**  
    - **ticketid**: ID do ticket a ser fechado.

    - **Mensagem ao cliente:**  
    "Obrigado por sua avalia√ß√£o. O ticket foi encerrado. Caso precise de mais assist√™ncia, estamos √† disposi√ß√£o!"

    ---

    ### 4. **Informa√ß√µes T√©cnicas**

    - **Licenciamento:**  
    - A licen√ßa permite instala√ß√£o em at√© **2 dispositivos**.  
    - O serial √© gerado automaticamente ap√≥s a compra e vinculado ao hardware (CPU e disco).  
    - A licen√ßa tem validade de **30 dias**.

    - **Funcionalidades Principais:**  
    - Rota√ß√£o autom√°tica de servidores NordVPN.  
    - Configura√ß√£o de intervalos personalizados.  
    - Gera√ß√£o de relat√≥rios de servidores utilizados.

    ---

    ### 5. **Passo a Passo para Uso do Aplicativo**

    1. **Instala√ß√£o:**  
    - Baixe o aplicativo pelo link fornecido.  
    - Execute o instalador e siga as instru√ß√µes.

    2. **Ativa√ß√£o:**  
    - Insira o serial enviado ap√≥s a compra.  
    - O aplicativo validar√° o serial com o hardware.

    3. **Iniciar Rota√ß√£o:**  
    - Clique no bot√£o "Iniciar" para ativar a rota√ß√£o autom√°tica.

    4. **Parar Rota√ß√£o:**  
    - Clique em "Parar" quando desejar encerrar a rota√ß√£o.

    5. **Visualizar Relat√≥rio:**  
    - Acesse o hist√≥rico de servidores clicando em "Visualizar Relat√≥rio".

    ---

    ### 6. **Termos de Servi√ßo**

    - A licen√ßa √© exclusiva e n√£o pode ser compartilhada.  
    - O uso indevido resultar√° no cancelamento da licen√ßa.  
    - A garantia de reebolso √© limitada a 12 horas ap√≥s a compra.

    ---

    ### 7. **Contatos de Suporte**

    - üìß **Email:** blocodesense@gmail.com  
    - üìû **Telegram:** [Grupo de Suporte](https://t.me/+dpGofyMuGUszY2Rh)  
    - üïò **Hor√°rio de Atendimento:** Segunda a Sexta, das 09h √†s 18h

    ---

    ### **Mensagem de Encerramento**
    "Estamos √† disposi√ß√£o para ajud√°-lo a aproveitar ao m√°ximo o **NordVPN Auto Rotate**. Qualquer d√∫vida, entre em contato pelo nosso suporte. Boa navega√ß√£o!"

    ---

    ### **Fun√ß√µes Dispon√≠veis**:

    #### **OpenSupportTicketProblem**  
    - **Objetivo:** Registra um ticket no banco de dados.  
    - **Par√¢metros:**  
    - **user_email**: Email do cliente.  
    - **issue_description**: Descri√ß√£o do problema.  
    - **Retorno:**  
    - Ticket ID gerado.

    #### **CloseSupportTicketProblem**  
    - **Objetivo:** Fecha um ticket existente.  
    - **Par√¢metros:**  
    - **ticketid**: ID do ticket a ser fechado.

    #### **RecordCSAT**  
    - **Objetivo:** Coleta a Pontua√ß√£o de Satisfa√ß√£o do Cliente.  
    - **Par√¢metros:**  
    - **ticketid**: ID do ticket.  
    - **csat_score**: Nota de 1 a 5.

    ---

            """
            
            self.adxitional_instructions_Alfred = ""

        def Alfred(self, mensagem, user_id):
            AlfredID, instructionsassistant, nameassistant, model_select = AutenticateAgent.create_or_auth_AI(
                self.appfb, 
                self.client, 
                self.key, 
                self.instruction, 
                self.nameassistantAlfred, 
                self.model_selectAlfred, 
                tools_Alfred
            )

            response, total_tokens, prompt_tokens, completion_tokens = ResponseAgent.ResponseAgent_message_with_assistants(
                                                                    mensagem=mensagem,
                                                                    agent_id=AlfredID, 
                                                                    key=self.key,
                                                                    user_id=user_id,
                                                                    app1=self.appfb,
                                                                    client=self.client,
                                                                    tools=tools_Alfred,
                                                                    model_select=self.model_selectAlfred,
                                                                    aditional_instructions=self.adxitional_instructions_Alfred,
                                                                    AgentDestilation=False
                                                                    )
                        
            return response, total_tokens, prompt_tokens, completion_tokens


        async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text('Ol√°! Como posso ajudar voc√™ hoje?')

        async def reply_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_message = update.message.text
            user_id = update.message.from_user.id

            Alfred_response, total_tokens, prompt_tokens, completion_tokens = self.Alfred(user_message, user_id)
            await update.message.reply_text(Alfred_response)

        async def handle_channel_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
            """Lida com mensagens enviadas para um canal espec√≠fico."""
            if update.message.chat_id == self.CHANNEL_ID:
                user_message = update.message.text
                user_id = update.message.from_user.id  # Opcional, para rastrear o usu√°rio

                Alfred_response, total_tokens, prompt_tokens, completion_tokens = self.Alfred(user_message, user_id)
                await update.message.reply_text(Alfred_response)

        async def send_image_to_channel(self, image_path, caption=None):
            """
            Envia uma imagem para o canal.
            :param image_path: Caminho ou URL da imagem a ser enviada.
            :param caption: Texto opcional para incluir como legenda.
            """
            try:
                await self.agent.send_photo(
                    chat_id=self.CHANNEL_ID,
                    photo=image_path,
                    caption=caption
                )
                print(f"Imagem enviada para o canal {self.CHANNEL_ID}.")
            except Exception as e:
                print(f"Erro ao enviar imagem para o canal: {e}")

        async def handle_task(self, image_path, caption):
            """
            Exemplo de fun√ß√£o chamadora que envia a imagem.
            """
            await self.send_image_to_channel(image_path, caption)


        def main(self):
            app = Application.builder().token(self.TOKEN).build()
            
            # Handler para o comando /start
            app.add_handler(CommandHandler("start", self.start))

            # Handler para mensagens diretas
            app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.reply_message))

            # Handler para mensagens de canais
            app.add_handler(MessageHandler(filters.TEXT & filters.Chat(self.CHANNEL_ID), self.handle_channel_message))

            app.run_polling()

        def meme(self):
            nameApp = "Nord Auto Rotate"
            DescriptionApp = """
            Nord Auto Rotate is a robust and secure application designed to automate the rotation of NordVPN's VPN servers. With an intuitive interface and advanced features, the app ensures its users maintain privacy and security online by automatically switching between different VPN servers at set intervals.

            https://www.youtube.com/watch?v=E4fbZUVMMEI

            AI-Supported Group:
            https://t.me/+dpGofyMuGUszY2Rh

            Requirements
            NordVPN Subscription: To use Nord Auto Rotate, you must have an active NordVPN subscription. The application only works when the subscription is active, whether for 1 month or 1 year.


            Main Features:

            Automatic Server Rotation: Automatically switch between different NordVPN VPN servers to ensure online security and privacy.
            Custom Configuration: Set custom time intervals for server rotation.
            Monitoring and Reporting: Track VPN performance and view detailed usage reports.
            Integration with NordVPN: You must have an active subscription to NordVPN, either monthly or annually.

            Device Limitation: The Nord Auto Rotate license allows installation and use on up to 2 different computers. This limit is imposed to prevent misuse and unauthorized resale of the application.
            License Validity: The license is linked to the order serial. This serial is generated automatically after purchase.

            Security and Authentication:

            Unique Serial: Each license generates a unique serial that is checked against the CPU and disk serial number of the devices. This serial must be used to register the application on up to two computers.
            Serial Validity: The generated serial is valid for 30 days from the initial registration date. After this period, a license renewal will be required to continue using the application.
            Nord Auto Rotate is the ideal solution for those who want to keep their connection secure and anonymous with NordVPN, ensuring automatic and efficient rotation of VPN servers for continuous protection.


            """
            watemark = "@https://t.me/NVAR_suport"

            MemeinApplicationContext_class = Alfred.MemeinApplicationContext(
                                                                            self.appfb, 
                                                                            self.client,
                                                                            nameApp,
                                                                            DescriptionApp,
                                                                            watemark
                                                                            )
            image_path = MemeinApplicationContext_class.main()
            self.send_image_to_channel(image_path)
            caption=None
            async def main():
                await self.handle_task(image_path, caption)

            asyncio.run(main())