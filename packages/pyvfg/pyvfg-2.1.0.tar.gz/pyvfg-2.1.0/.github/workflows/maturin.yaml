# Some edits to the autogenerated maturin CI have been made, including combining
# all archs into a single matrix. The auto-generated comment below has been left
# for reference purposes.

# This file is autogenerated by maturin v1.5.1
# To update, run
#
#    maturin generate-ci github
#
name: Maturin

on:
  workflow_call:
    inputs:
      publish:
        description: Set to 'true' to publish to pypi
        default: 'false'
        required: false
        type: string
      
      registries:
        description: |
          JSON-formated list of registries to use. Valid values are: `verses`,`pypi`. Defaults to `["verses"]`.
        default: '["verses"]'
        required: false
        type: string

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.platform.runner }}
    continue-on-error: true
    strategy:
      matrix:
        platform:
          # GLib Linux
          - runner: ubuntu-latest
            target: x86_64
            os: linux
            # TODO: Update this back to 2_28 once this issue is resolved:
            # https://github.com/PyO3/maturin-action/issues/249
            manylinux: auto
            # TODO: Remove this when manylinux has proper glibc libraries
            container: 'off'
          - runner: ubuntu-latest
            target: x86
            os: linux
            # TODO: Update this back to 2_28 once this issue is resolved:
            # https://github.com/PyO3/maturin-action/issues/249
            manylinux: auto
          - runner: ubuntu-latest
            target: aarch64
            os: linux
            manylinux: "2_28"
          - runner: ubuntu-latest
            target: armv7
            os: linux
            manylinux: "2_28"
          - runner: ubuntu-latest
            target: s390x
            os: linux
            manylinux: "2_28"
          - runner: ubuntu-latest
            target: ppc64le
            os: linux
            manylinux: "2_28"

          # MUSL Linux
          - runner: ubuntu-latest
            target: x86_64
            os: musllinux
            manylinux: musllinux_1_2
          - runner: ubuntu-latest
            target: x86
            os: musllinux
            manylinux: musllinux_1_2
          - runner: ubuntu-latest
            target: aarch64
            os: musllinux
            manylinux: musllinux_1_2
          - runner: ubuntu-latest
            target: armv7
            os: musllinux
            manylinux: musllinux_1_2

          # Windows
          - runner: windows-latest
            target: x64
            os: windows
          # This does not work due to this issue:
          # https://github.com/PyO3/rust-numpy/issues/448
          # - runner: windows-latest
          #   target: x86
          #   os: windows

          # MacOS
          - runner: macos-14-large
            target: x86_64
            os: macos-14
          - runner: macos-14
            target: aarch64
            os: macos-14
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust
        id: setup-rust
        uses: VersesTech/github-actions/actions/setup-rust@main
        with:
          cargo-registry-auth-github-app-id: ${{ secrets.RELEASE_BOT_APP_ID }}
          cargo-registry-auth-github-app-private-key: ${{ secrets.RELEASE_BOT_PRIVATE_KEY }}
          cargo-registry-auth-github-app-owner: ${{ github.repository_owner }}

      - name: Setup Python
        if: matrix.platform.container == 'off'
        uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.python-version }}'

      # This is needed for private git dependencies
      - uses: de-vri-es/setup-git-credentials@v2
        with:
          credentials: https://x-access-token:${{ steps.setup-rust.outputs.cargo-registry-auth-github-token }}@github.com/

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist -i '${{ matrix.python-version }}'
          sccache: 'true'
          manylinux: ${{ matrix.platform.manylinux }}
          container: ${{ matrix.platform.container }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-py${{ matrix.python-version }}-${{ matrix.platform.os }}-${{ matrix.platform.target }}
          path: dist

      - name: Install dependencies
        if: matrix.platform.container == 'off'
        run: |-
          python -m pip install pytest
          python -m pip install mypy
          python -m pip install dist/*.whl

      - name: Run tests
        if: matrix.platform.container == 'off'
        run: |-
          python -m pytest -rP

      - name: Run type tests
        if: matrix.platform.container == 'off'
        run: |-
          python -m mypy.stubtest pyvfg || echo "Some failures in mypy stub tests"

  sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust
        id: setup-rust
        uses: VersesTech/github-actions/actions/setup-rust@main
        with:
          cargo-registry-auth-github-app-id: ${{ secrets.RELEASE_BOT_APP_ID }}
          cargo-registry-auth-github-app-private-key: ${{ secrets.RELEASE_BOT_PRIVATE_KEY }}
          cargo-registry-auth-github-app-owner: ${{ github.repository_owner }}

      - name: Setup Python
        uses: actions/setup-python@v5

      # This is needed for private git dependencies
      - uses: de-vri-es/setup-git-credentials@v2
        with:
          credentials: https://x-access-token:${{ steps.setup-rust.outputs.cargo-registry-auth-github-token }}@github.com/

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  publish:
    name: Publish
    if: ${{ inputs.publish == 'true' }}
    runs-on: ubuntu-latest
    needs:
      - build
      - sdist
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          path: '${{ github.workspace }}/wheel-artifacts'

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'wheel-artifacts/wheels-*/*'

      - name: Login to AWS CodeArtifact
        id: login-codeartifact
        uses: VersesTech/github-actions/actions/login-codeartifact@main
        with:
          aws-access-key-id: ${{ secrets.ECR_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_KEY }}

      - name: Publish to PyPI (internal)
        if: contains(fromJson(inputs.registries), 'verses')
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing wheel-artifacts/wheels-*/*
        env:
          MATURIN_REPOSITORY_URL: ${{ steps.login-codeartifact.outputs.codeartifact-pypi-repo-url }}
          MATURIN_USERNAME: aws
          MATURIN_PASSWORD: ${{ steps.login-codeartifact.outputs.codeartifact-token }}

      - name: Publish to PyPI (external)=
        if: contains(fromJson(inputs.registries), 'pypi')
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing wheel-artifacts/wheels-*/*
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_PUBLISH_TOKEN }}
