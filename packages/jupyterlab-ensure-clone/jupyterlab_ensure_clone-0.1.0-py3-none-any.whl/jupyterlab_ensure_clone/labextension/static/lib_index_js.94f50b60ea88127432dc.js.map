{"version":3,"file":"lib_index_js.94f50b60ea88127432dc.js","mappings":"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","sources":["webpack://jupyterlab-ensure-clone/./src/handler.ts","webpack://jupyterlab-ensure-clone/./src/index.ts"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\n\nimport { ServerConnection } from '@jupyterlab/services';\n\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI<T>(\n  endPoint = '',\n  init: RequestInit = {}\n): Promise<T> {\n  // Make request to Jupyter API\n  const settings = ServerConnection.makeSettings();\n  const requestUrl = URLExt.join(\n    settings.baseUrl,\n    'jupyterlab-ensure-clone', // API Namespace\n    endPoint\n  );\n\n  let response: Response;\n  try {\n    response = await ServerConnection.makeRequest(requestUrl, init, settings);\n  } catch (error) {\n    throw new ServerConnection.NetworkError(error as any);\n  }\n\n  let data: any = await response.text();\n\n  if (data.length > 0) {\n    try {\n      data = JSON.parse(data);\n    } catch (error) {\n      console.log('Not a JSON response body.', response);\n    }\n  }\n\n  if (!response.ok) {\n    throw new ServerConnection.ResponseError(response, data.message || data);\n  }\n\n  return data;\n}\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\n\nimport { showDialog } from '@jupyterlab/apputils';\n\nimport { Widget } from '@lumino/widgets';\n\nimport { requestAPI } from './handler';\n\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab-ensure-clone:plugin',\n  description: 'Ensure a git repo is cloned on startup.',\n  autoStart: true,\n  requires: [ISettingRegistry],\n  activate: async (app: JupyterFrontEnd, settingsRegistry: ISettingRegistry) => {\n    const settings = (await settingsRegistry.load(plugin.id)).composite.private as any;\n    const form = new LoginForm(settings);\n    let input = settings as any;\n    let errCount = 0;\n    while (true) {\n      try {\n        await requestAPI<any>('', {method: 'POST', body: JSON.stringify(input)});\n        break;\n      } catch (err) {\n        errCount++;\n        // If we're missing credentials and the repo requires them, an initial error is expected.\n        const title = errCount < 2 ? settings.title : 'Error ensuring clone, try again?';\n        input = await showDialog({title: title, body: form});\n        if (!input.button.accept) {\n          break;\n        }\n        input = input.value;\n      }\n    }\n  },\n};\n\nclass LoginForm extends Widget {\n  private repoUrlInput: HTMLInputElement;\n  private targetDirInput: HTMLInputElement;\n  private usernameInput: HTMLInputElement;\n  private passwordInput: HTMLInputElement;\n\n  constructor(settings: any) {\n    super();\n    this.addClass('jp-LoginForm');\n    this.repoUrlInput = this.createInput({placeholder: 'Repo URL'});\n    this.targetDirInput = this.createInput({placeholder: 'Target directory'});\n    this.usernameInput = this.createInput({placeholder: 'Username'});\n    this.passwordInput = this.createInput({placeholder: 'Password'});\n    if (!settings.repoUrl) {\n      this.node.appendChild(this.repoUrlInput);\n    }\n    if (!settings.targetDir) {\n      this.node.appendChild(this.targetDirInput);\n    }\n    if (settings.needCredentials) {\n      this.node.appendChild(this.usernameInput);\n      this.node.appendChild(this.passwordInput);\n    }\n  }\n\n  createInput({placeholder = \"\"}): HTMLInputElement {\n    const input = document.createElement('input');\n    input.placeholder = placeholder;\n    input.className = 'jp-mod-styled jp-Input';\n    return input;\n  }\n\n  getValue(): { repoUrl: string; targetDir: string; username: string; password: string } {\n    return {\n      repoUrl: this.repoUrlInput.value,\n      targetDir: this.targetDirInput.value,\n      username: this.usernameInput.value,\n      password: this.passwordInput.value,\n    };\n  }\n}\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}