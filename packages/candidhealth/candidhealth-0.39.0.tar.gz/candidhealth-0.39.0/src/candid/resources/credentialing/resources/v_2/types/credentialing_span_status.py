# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class CredentialingSpanStatus(str, enum.Enum):
    """
    Stage of a credentialing span in the credentialing workflow.
    """

    WORK_IN_PROGRESS = "work_in_progress"
    PENDING = "pending"
    EFFECTIVE = "effective"
    EXPIRED = "expired"

    def visit(
        self,
        work_in_progress: typing.Callable[[], T_Result],
        pending: typing.Callable[[], T_Result],
        effective: typing.Callable[[], T_Result],
        expired: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is CredentialingSpanStatus.WORK_IN_PROGRESS:
            return work_in_progress()
        if self is CredentialingSpanStatus.PENDING:
            return pending()
        if self is CredentialingSpanStatus.EFFECTIVE:
            return effective()
        if self is CredentialingSpanStatus.EXPIRED:
            return expired()
