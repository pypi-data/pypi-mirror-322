# pyproject.toml
[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "src"}

[project]
name = "tnh-scholar"
version = "0.1.3"
description = "TNH Scholar is an AI-driven project designed to explore, query, and translate the teachings of Thich Nhat Hanh and Plum Village community."
requires-python = "==3.12.4"  # Specify Python version
keywords = ["nlp", "dharma", "processing", "text", "translation", "ai"]  # Add relevant keywords
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3.12",
]
readme = "README.md"
license = { file = "LICENSE" }
authors = [{ name = "Aaron K. Solomon", email = "aaron.kyle.solomon@gmail.com" }]

# using all fixed dependencies for prototyping to ensure clean working environment
dependencies = [
    "click==8.1.8",
    "colorlog==6.9.0",
    "GitPython==3.1.44",
    "Jinja2==3.1.5",
    "langdetect==1.0.9",
    "lxml==5.3.0",
    "numpy==2.0.2",
    "openai==1.58.1",
    "openai_whisper==20240930",
    "packaging==24.2",
    "pycountry==24.6.1",
    "pydantic==2.10.4",
    "pydub==0.25.1",
    "python-dotenv==1.0.1",
    "PyYAML==6.0.2",
    "regex==2024.11.6",
    "Requests==2.32.3",
    "tiktoken==0.8.0",
    "torch==2.5.1",
    "tqdm==4.67.1",
    "transformers==4.47.1",
    "yt_dlp==2025.1.15",
]

[project.optional-dependencies]
gui= [
    "streamlit==1.41.1",
    "langchain_community==0.3.13",
    "langchain_openai==0.2.14",
    "supabase==2.11.0",
]
query = [
    "beautifulsoup4==4.12.3",
    "spacy==3.8.3",
    "EbookLib==0.18"
]
dev = [
    "pytest==8.3.4",
    "pytest-cov==6.0.0",
    "black==24.10.0",
    "mypy==1.14.1",
    "ruff==0.9.2",  
    "mkdocstrings-python==1.13.0",
    "pipreqs==0.5.0",
    "types-PyYAML==6.0.12.20241230",    
    "types-requests==2.32.0.20241016"
]
ocr = [
    "fitz==0.0.1.dev2",
    "Pillow==11.1.0",
    "google-cloud==0.34.0",
    "google-cloud-vision==3.9.0",
    "pdf2image==1.17.0",
]

[project.urls]
"Homepage" = "https://aaronksolomon.github.io/tnh-scholar/"
"Bug Tracker" = "https://github.com/aaronksolomon/tnh-scholar/issues"
"Documentation" = "https://aaronksolomon.github.io/tnh-scholar/"

[project.scripts]
audio-transcribe = "tnh_scholar.cli_tools.audio_transcribe.audio_transcribe:main"
tnh-fab = "tnh_scholar.cli_tools.tnh_fab.tnh_fab:main"
ytt-fetch = "tnh_scholar.cli_tools.ytt_fetch.ytt_fetch:main"
nfmt = "tnh_scholar.cli_tools.nfmt.nfmt:main"
token-count = "tnh_scholar.cli_tools.token_count.token_count:main"
tnh-setup = "tnh_scholar.cli_tools.tnh_setup.tnh_setup:main"
tnh-tree = "tnh_scholar.dev_tools.generate_tree:generate_tree"

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-ra -q"
pythonpath = ["src"]

[tool.mypy]
python_version = "3.12"
# Disable strict mode during prototyping
strict = false

# Core type checking
disallow_untyped_defs = false      # Allow functions without type annotations
check_untyped_defs = false         # Don't type check functions without annotations
ignore_missing_imports = true       # Ignore missing stubs for external packages

# Disable stricter optional checks during development
strict_optional = false            # More permissive handling of Optional types

# Keep basic error reporting
warn_return_any = true             # Still warn about returning Any
warn_unused_configs = true         # Warn about unused mypy configs

# Plugin support
plugins = ["pydantic.mypy"]        # Keep pydantic plugin for model validation

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false      # Keep tests relaxed

# gradually enable these as codebase matures:
#strict_optional = true
#disallow_untyped_defs = true
#check_untyped_defs = true
#disallow_any_expr = true
#disallow_any_decorated = true
#disallow_any_explicit = true
#disallow_subclassing_any = true
#disallow_untyped_decorators = true
#no_implicit_optional = true
#warn_redundant_casts = true
#warn_unused_ignores = true
#warn_no_return = true
#warn_unreachable = true

[tool.coverage.run]
source = ["tnh_scholar"]
omit = ["tests/*", "**/__init__.py"]

[tool.ruff]
line-length = 88  # Match black
target-version = "py312"
lint.select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass"
]