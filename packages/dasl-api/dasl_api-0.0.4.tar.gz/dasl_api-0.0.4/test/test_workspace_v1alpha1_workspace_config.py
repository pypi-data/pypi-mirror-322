# coding: utf-8

"""
    Antimatter Security Lakehouse Public API

    Interact with the Antimatter ASL API

    The version of the OpenAPI document: 0.0.4
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dasl_api.models.workspace_v1alpha1_workspace_config import WorkspaceV1alpha1WorkspaceConfig

class TestWorkspaceV1alpha1WorkspaceConfig(unittest.TestCase):
    """WorkspaceV1alpha1WorkspaceConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WorkspaceV1alpha1WorkspaceConfig:
        """Test WorkspaceV1alpha1WorkspaceConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WorkspaceV1alpha1WorkspaceConfig`
        """
        model = WorkspaceV1alpha1WorkspaceConfig()
        if include_optional:
            return WorkspaceV1alpha1WorkspaceConfig(
                api_version = '',
                kind = '',
                metadata = dasl_api.models.common/v1alpha1/object_meta.common.v1alpha1.ObjectMeta(
                    name = '', 
                    workspace = '', 
                    comment = '', 
                    annotations = {
                        'key' : ''
                        }, 
                    created_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_by = '', 
                    modified_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    modified_by = '', 
                    uid = '', 
                    version = 56, 
                    deleted = True, 
                    resource_status = 'none', ),
                spec = dasl_api.models.workspace/v1alpha1/workspace_config_spec.workspace.v1alpha1.WorkspaceConfigSpec(
                    system_tables_config = dasl_api.models.workspace_v1alpha1_workspace_config_spec_system_tables_config.workspace_v1alpha1_WorkspaceConfigSpec_systemTablesConfig(
                        catalog_name = '', 
                        schema = '', ), 
                    detection_rule_metadata = dasl_api.models.workspace_v1alpha1_workspace_config_spec_detection_rule_metadata.workspace_v1alpha1_WorkspaceConfigSpec_detectionRuleMetadata(
                        detection_categories = [
                            ''
                            ], ), 
                    notable_export = dasl_api.models.workspace/v1alpha1/export_config.workspace.v1alpha1.ExportConfig(
                        destination = 'webhook', 
                        export_open_only = True, 
                        webhook_config = dasl_api.models.workspace_v1alpha1_export_config_webhook_config.workspace_v1alpha1_ExportConfig_webhookConfig(
                            destination = dasl_api.models.workspace_v1alpha1_export_config_webhook_config_destination.workspace_v1alpha1_ExportConfig_webhookConfig_destination(
                                value = '', 
                                scope = '', 
                                key = '', ), ), 
                        slack_config = dasl_api.models.workspace_v1alpha1_export_config_slack_config.workspace_v1alpha1_ExportConfig_slackConfig(
                            token = dasl_api.models.workspace_v1alpha1_export_config_webhook_config_destination.workspace_v1alpha1_ExportConfig_webhookConfig_destination(
                                value = '', 
                                scope = '', 
                                key = '', ), 
                            channel = '', 
                            message = '', ), ), 
                    operational_alert_export = dasl_api.models.workspace/v1alpha1/export_config.workspace.v1alpha1.ExportConfig(
                        export_open_only = True, ), 
                    observables = dasl_api.models.workspace_v1alpha1_workspace_config_spec_observables.workspace_v1alpha1_WorkspaceConfigSpec_observables(
                        kinds = [
                            dasl_api.models.workspace_v1alpha1_workspace_config_spec_observables_kinds_inner.workspace_v1alpha1_WorkspaceConfigSpec_observables_kinds_inner(
                                name = '', 
                                sql_type = '', )
                            ], 
                        relationships = [
                            ''
                            ], ), 
                    compute_group_limits = [
                        dasl_api.models.workspace_v1alpha1_workspace_config_spec_compute_group_limits_inner.workspace_v1alpha1_WorkspaceConfigSpec_computeGroupLimits_inner(
                            group_name = '', 
                            limit = 56, )
                        ], 
                    dasl_storage_path = '', 
                    default_config = dasl_api.models.workspace_v1alpha1_workspace_config_spec_default_config.workspace_v1alpha1_WorkspaceConfigSpec_defaultConfig(
                        datasources = dasl_api.models.workspace/v1alpha1/default_config.workspace.v1alpha1.DefaultConfig(
                            notebook_location = '', 
                            bronze_schema = '', 
                            silver_schema = '', 
                            gold_schema = '', 
                            catalog_name = '', 
                            default_max_resources_per_job = 56, 
                            checkpoint_location = '', 
                            compute_group_overrides = {
                                'key' : dasl_api.models.workspace_v1alpha1_default_config_compute_group_overrides_value.workspace_v1alpha1_DefaultConfig_computeGroupOverrides_value(
                                    max_resources_per_job = 56, )
                                }, ), 
                        transforms = dasl_api.models.workspace/v1alpha1/default_config.workspace.v1alpha1.DefaultConfig(
                            notebook_location = '', 
                            bronze_schema = '', 
                            silver_schema = '', 
                            gold_schema = '', 
                            catalog_name = '', 
                            default_max_resources_per_job = 56, 
                            checkpoint_location = '', ), 
                        rules = , 
                        global = , ), 
                    managed_retention = [
                        dasl_api.models.workspace_v1alpha1_workspace_config_spec_managed_retention_inner.workspace_v1alpha1_WorkspaceConfigSpec_managedRetention_inner(
                            catalog = '', 
                            schema = '', 
                            column = 'time_dt', 
                            duration = '', 
                            overrides = [
                                dasl_api.models.workspace_v1alpha1_workspace_config_spec_managed_retention_inner_overrides_inner.workspace_v1alpha1_WorkspaceConfigSpec_managedRetention_inner_overrides_inner(
                                    table = '', 
                                    column = 'time_dt', 
                                    duration = '', )
                                ], )
                        ], ),
                status = dasl_api.models.core/v1alpha1/resource_status.core.v1alpha1.ResourceStatus(
                    job_id = 56, 
                    job_name = '', 
                    enabled = True, 
                    notebook_path = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    job_status = 'unscheduled', 
                    events = [
                        null
                        ], )
            )
        else:
            return WorkspaceV1alpha1WorkspaceConfig(
                spec = dasl_api.models.workspace/v1alpha1/workspace_config_spec.workspace.v1alpha1.WorkspaceConfigSpec(
                    system_tables_config = dasl_api.models.workspace_v1alpha1_workspace_config_spec_system_tables_config.workspace_v1alpha1_WorkspaceConfigSpec_systemTablesConfig(
                        catalog_name = '', 
                        schema = '', ), 
                    detection_rule_metadata = dasl_api.models.workspace_v1alpha1_workspace_config_spec_detection_rule_metadata.workspace_v1alpha1_WorkspaceConfigSpec_detectionRuleMetadata(
                        detection_categories = [
                            ''
                            ], ), 
                    notable_export = dasl_api.models.workspace/v1alpha1/export_config.workspace.v1alpha1.ExportConfig(
                        destination = 'webhook', 
                        export_open_only = True, 
                        webhook_config = dasl_api.models.workspace_v1alpha1_export_config_webhook_config.workspace_v1alpha1_ExportConfig_webhookConfig(
                            destination = dasl_api.models.workspace_v1alpha1_export_config_webhook_config_destination.workspace_v1alpha1_ExportConfig_webhookConfig_destination(
                                value = '', 
                                scope = '', 
                                key = '', ), ), 
                        slack_config = dasl_api.models.workspace_v1alpha1_export_config_slack_config.workspace_v1alpha1_ExportConfig_slackConfig(
                            token = dasl_api.models.workspace_v1alpha1_export_config_webhook_config_destination.workspace_v1alpha1_ExportConfig_webhookConfig_destination(
                                value = '', 
                                scope = '', 
                                key = '', ), 
                            channel = '', 
                            message = '', ), ), 
                    operational_alert_export = dasl_api.models.workspace/v1alpha1/export_config.workspace.v1alpha1.ExportConfig(
                        export_open_only = True, ), 
                    observables = dasl_api.models.workspace_v1alpha1_workspace_config_spec_observables.workspace_v1alpha1_WorkspaceConfigSpec_observables(
                        kinds = [
                            dasl_api.models.workspace_v1alpha1_workspace_config_spec_observables_kinds_inner.workspace_v1alpha1_WorkspaceConfigSpec_observables_kinds_inner(
                                name = '', 
                                sql_type = '', )
                            ], 
                        relationships = [
                            ''
                            ], ), 
                    compute_group_limits = [
                        dasl_api.models.workspace_v1alpha1_workspace_config_spec_compute_group_limits_inner.workspace_v1alpha1_WorkspaceConfigSpec_computeGroupLimits_inner(
                            group_name = '', 
                            limit = 56, )
                        ], 
                    dasl_storage_path = '', 
                    default_config = dasl_api.models.workspace_v1alpha1_workspace_config_spec_default_config.workspace_v1alpha1_WorkspaceConfigSpec_defaultConfig(
                        datasources = dasl_api.models.workspace/v1alpha1/default_config.workspace.v1alpha1.DefaultConfig(
                            notebook_location = '', 
                            bronze_schema = '', 
                            silver_schema = '', 
                            gold_schema = '', 
                            catalog_name = '', 
                            default_max_resources_per_job = 56, 
                            checkpoint_location = '', 
                            compute_group_overrides = {
                                'key' : dasl_api.models.workspace_v1alpha1_default_config_compute_group_overrides_value.workspace_v1alpha1_DefaultConfig_computeGroupOverrides_value(
                                    max_resources_per_job = 56, )
                                }, ), 
                        transforms = dasl_api.models.workspace/v1alpha1/default_config.workspace.v1alpha1.DefaultConfig(
                            notebook_location = '', 
                            bronze_schema = '', 
                            silver_schema = '', 
                            gold_schema = '', 
                            catalog_name = '', 
                            default_max_resources_per_job = 56, 
                            checkpoint_location = '', ), 
                        rules = , 
                        global = , ), 
                    managed_retention = [
                        dasl_api.models.workspace_v1alpha1_workspace_config_spec_managed_retention_inner.workspace_v1alpha1_WorkspaceConfigSpec_managedRetention_inner(
                            catalog = '', 
                            schema = '', 
                            column = 'time_dt', 
                            duration = '', 
                            overrides = [
                                dasl_api.models.workspace_v1alpha1_workspace_config_spec_managed_retention_inner_overrides_inner.workspace_v1alpha1_WorkspaceConfigSpec_managedRetention_inner_overrides_inner(
                                    table = '', 
                                    column = 'time_dt', 
                                    duration = '', )
                                ], )
                        ], ),
        )
        """

    def testWorkspaceV1alpha1WorkspaceConfig(self):
        """Test WorkspaceV1alpha1WorkspaceConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
