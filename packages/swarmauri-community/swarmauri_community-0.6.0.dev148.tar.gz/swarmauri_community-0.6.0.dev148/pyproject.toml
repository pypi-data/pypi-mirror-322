[tool.poetry]
name = "swarmauri-community"
version = "0.6.0.dev148"
description = "This repository includes Swarmauri community components."
authors = ["Jacob Stewart <jacob@swarmauri.com>"]
license = "Apache-2.0"
readme = "README.md"
repository = "http://github.com/swarmauri/swarmauri-sdk"
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12"
]

[tool.poetry.dependencies]
python = ">=3.10,<3.13"

# Swarmauri
swarmauri_core = { version = "^0.6.0.dev148" }
swarmauri_base = { version = "^0.6.0.dev148" }

# We should remove and only rely on httpx
requests = "^2.32.3"

captcha = "^0.6.0"

#chromadb = { version = "^0.5.17", optional = true }
#duckdb = { version = "^1.1.1", optional = true }
#folium = { version = "^0.18.0", optional = true }
#gensim = { version = "^4.3.3", optional = true }
#gradio = { version = "^5.4.0", optional = true }
#leptonai = { version = "^0.22.0", optional = true }

neo4j = { version = "^5.25.0", optional = true }
#nltk = { version = "^3.9.1", optional = true }

#neo4j = { version = "^5.25.0", optional = true }

pandas = "^2.2.3"
#psutil = { version = "^6.1.0", optional = true }
#pygithub = { version = "^2.4.0", optional = true }
qrcode = { version = "^8.0", optional = true }
#redis = { version = "^4.0", optional = true }
textstat = { version = "^0.7.4", optional = true }
transformers = { version = ">=4.45.0", optional = true }
typing_extensions = "^4.12.2"
#tiktoken = { version = "^0.8.0", optional = true }
PyMuPDF = { version = "^1.24.12", optional = true }
#qdrant-client = { version = "^1.12.0", optional = true }
#pinecone-client = { version = "^5.0.1", optional = true, extras = ["grpc"] }
pypdf = { version = "^5.0.1", optional = true }
pypdftk = { version = "^0.5", optional = true }
weaviate-client = { version = "^4.9.2", optional = true }
#textblob = { version = "^0.18.0", optional = true }
#torch = { version = "^2.4.1", optional = true}
#scikit-learn = { version = "^1.5.2", optional = true }
#protobuf = { version = "^3.20.0", optional = true }

[tool.poetry.extras]
# Grouped optional dependencies
nlp = ["nltk", "gensim", "textstat", "textblob", "torch", "scikit-learn"]
ml_toolkits = ["transformers", "annoy"]
visualization = ["folium"]
storage = ["redis", "duckdb", "neo4j", "chromadb", "qdrant-client", "weaviate-client", "pinecone-client"]
document_processing = ["pypdf", "PyMuPDF", "pypdftk"]
cloud_integration = ["psutil", "qrcode", "pygithub"]
#gradio = ["gradio"]
model_clients = ["leptonai"]
tiktoken = ["tiktoken"]

# Full installation
full = [
    "nltk", "gensim", "textstat", "textblob", "torch", "scikit-learn",
    "transformers", "annoy",
    "folium",
    "redis", "duckdb", "neo4j", "chromadb", "qdrant-client", "weaviate-client", "pinecone-client",
    "pypdf", "PyMuPDF", "pypdftk",
    "psutil", "qrcode", "pygithub",
    #"gradio",
    "leptonai",
    "tiktoken"
]

[tool.poetry.group.dev.dependencies]
flake8 = "^7.0"
pytest = "^8.0"
pytest-asyncio = ">=0.24.0"
pytest-xdist = "^3.6.1"
pytest-json-report = "^1.5.0"
python-dotenv = "*"
requests = "^2.32.3"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
norecursedirs = ["combined", "scripts"]

markers = [
    "test: standard test",
    "unit: Unit tests",
    "integration: Integration tests",
    "acceptance: Acceptance tests",
    "experimental: Experimental tests"
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
asyncio_default_fixture_loop_scope = "function"
