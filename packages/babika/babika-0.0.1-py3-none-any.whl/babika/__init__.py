class a:
    def b(task=''):
        #1
        sklad = {
            '1':'x = np.array([-0.616, -0.238, 0.173, -0.255, 0.531, 0.718, -0.161, 0.371, -1.014, -0.413, -1.571, 0.485,\n\
              0.486, 0.688, -0.944, 0.155, 0.003, 0.111, 0.752, 0.783, -0.102, -0.74, -2.097, 1.349, -0.044,\n\
              -0.617, -0.782, -0.873, -0.995, -1.256, -0.596])\n\
y = np.array([-1.34, -0.25, 0.101, -0.626, -0.088, 0.539, -0.451, 0.233, -1.186, -0.423, -1.329, 0.231,\n\
              0.209, 0.638, -0.274, -0.491, -0.319, 0.294, 0.895, 1.164, -0.57, -1.078, -1.526, 1.491, 0.182,\n\
              -0.31, -1.001, -0.969, -0.918, -0.904, -0.595])\n\
gamma = 0.93 \n\
\n\
#x = np.array([-1.598, 1.067, 0.789, 0.546, -2.166, -2.004, 0.489, 0.113, -0.902, -0.776, -0.164, -0.541, 0.71,\n\
#               0.082, -0.737, 0.655, 0.656, 0.498, -0.527, -0.185, 1.383, -0.283, -2.518, 0.688, 1.379, -0.254,\n\
#               0.886, 0.221, -0.905, 1.209, 0.128, -0.949, 1.046, 1.272, -1.226, -0.964, -0.72])\n\
#y = np.array([-2.102, 1.429, 1.516, 0.266, -1.612, -1.665, 1.203, 0.413, -0.96, -0.431, -0.575, -0.045, 0.654,\n\
#               0.773, -0.584, 0.857, 0.668, 0.751, -0.605, -0.594, 1.547, -0.045, -2.164, 1.106, 1.206, 0.388,\n\
#               0.577, -0.027, -1.309, 1.045, 0.85, -0.916, 1.362, 0.694, -1.108, -0.845, -0.963])\n\
#gamma = 0.77\n\
\n\
n = len(x)\n\
Z = norm(0, 1)\n\
ro_hat = np.cov(x, y, ddof=0)[0, 1] / x.std() / y.std()\n\
ro_hat\n\
u_left = np.arctanh(ro_hat) - 1 / np.sqrt(n - 3) * Z.isf((1 - gamma) / 2)\n\
u_right = np.arctanh(ro_hat) + 1 / np.sqrt(n - 3) * Z.isf((1 - gamma) / 2)\n\
\n\
print(np.tanh(u_left))\n\
print(np.tanh(u_right))#u_right- Верхняя граница доверенного интервала\n\
print(ro_hat) #ro_hat-выборочный коэффицент корреляции'
            ,
            '2':'q = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0,\n\
     1, 1, 3, 4, 4, 5, 4, 6, 6, 11, 9, 19, 23, 25, 33, 36, 36, 46, 46, 49, 58, 90, 76, 66, 69, 75, 68,\n\
     44, 39, 21, 16, 5, 2, 1, 0, 0, 0]\n\
quantil = 0.2\n\
\n\
# q = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\
#      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 2, 1, 1, 0, 2, 1, 3, 5, 5, 3, 6, 3, 5,\n\
#      8, 7, 6, 4, 7, 17, 15, 15, 13, 13, 12, 21, 24, 17, 26, 21, 27, 34, 29, 19, 22, 22, 22, 16, 13, 9, 11,\n\
#      5, 2, 3, 0, 0, 0, 0, 0]\n\
# quantil = 0.2\n\
\n\
sample = []\n\
for i in range(len(q)):\n\
    temp = [i] * q[i]\n\
    sample.extend(temp)\n\
sample = np.array(sample) / 100\n\
\n\
def f(x, a, b):\n\
    return a * b * x ** (a - 1) * (1 - x ** a) ** (b - 1)\n\
def lnL(p, data):\n\
    n = len(data)\n\
    a, b = p\n\
    return n * np.log(a * b) + (a - 1) * np.sum(np.log(data)) + (b - 1) * np.sum(np.log(1 - data ** a))\n\
res = minimize(fun=lambda p, data: -lnL(p, data), x0=np.array([0.1, 0.1]), args=(sample,), method="BFGS")\n\
a_hat, b_hat = res.x\n\
\n\
a_hat, b_hat, round(a_hat), round(b_hat) #a_hat-занчение А, b_hat-знчаение В\n\
--------------------------------------------------------------------------\n\
class distr(rv_continuous):\n\
    def _pdf(self, x):\n\
        if 0 <= x <= 1:\n\
            return round(a_hat) * round(b_hat) * x ** (round(a_hat) - 1) * (1 - x ** round(a_hat)) ** (round(b_hat) - 1)\n\
        return 0\n\
X = distr()\n\
plt.figure(figsize=(15, 5))\n\
plt.xlim(0, 1)\n\
plt.hist(sample, density=True, bins=50)\n\
xx = np.linspace(0, 1, 1000)\n\
pdf = [X.pdf(i) for i in xx]\n\
plt.plot(xx, pdf, c='r', linewidth=5)\n\
plt.grid(c="lightblu", linestyle="--", alpha=0.5)\n\
plt.show()\n\
-------------------------------------------------------------------------\n\
integrate.quad(lambda x: x * f(x, round(a_hat), round(b_hat)), 0, 1) # первое занчение - мат.ожидание\n\
-------------------------------------------------------------------------\n\
current = 0\n\
prec = 15\n\
p = 0\n\
d = 1\n\
while p < prec:\n\
    if X.cdf(current) <= quantil:\n\
        current += d\n\
    else:\n\
        current -= d\n\
        d /= 10\n\
        p += 1\n\
\n\
current #Квавнтиль'
            }
        print(sklad[task])



