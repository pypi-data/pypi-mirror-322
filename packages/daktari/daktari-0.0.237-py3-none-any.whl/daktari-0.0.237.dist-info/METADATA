Metadata-Version: 2.1
Name: daktari
Version: 0.0.237
Summary: Assist in setting up and maintaining developer environments
Home-page: https://github.com/sonocent/daktari
Author: Matt Russell
Author-email: matthew.russell@sonocent.com
License: MIT
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: PyYAML ==5.3.1
Requires-Dist: ansicolors ==1.1.8
Requires-Dist: distro ==1.9.0
Requires-Dist: dpath ==2.2.0
Requires-Dist: importlib-resources ==6.5.2
Requires-Dist: packaging ==20.9
Requires-Dist: pyOpenSSL ==25.0.0
Requires-Dist: pyclip ==0.7.0
Requires-Dist: pyfiglet ==0.8.post1
Requires-Dist: python-hosts ==1.0.7
Requires-Dist: requests-unixsocket ==0.3.0
Requires-Dist: requests ==2.32.3
Requires-Dist: responses ==0.25.6
Requires-Dist: semver ==3.0.2
Requires-Dist: setuptools ==70.3.0
Requires-Dist: tabulate ==0.9.0
Requires-Dist: types-PyYAML ==6.0.12.20241230
Requires-Dist: types-pyOpenSSL ==24.1.0.20240722
Requires-Dist: types-tabulate ==0.9.0.20241207
Requires-Dist: urllib3 <1.27
Requires-Dist: dataclasses ==0.8 ; python_version < "3.7"
Requires-Dist: types-dataclasses ==0.1.5 ; python_version < "3.7"
Requires-Dist: pyobjc-core ==11.0 ; sys_platform == "darwin"
Requires-Dist: pyobjc-framework-Cocoa ==11.0 ; sys_platform == "darwin"

**Daktari** is a tool to help the initial setup and ongoing maintenance of developer environments. It runs a series of checks (for example, that required software is installed) and provides suggestions on how to fix the issue if the check fails.

## Configuration

In the root of the project repository, create a `.daktari.py` configuration file listing the checks you want run. For example,

```python
from daktari.checks.git import *

version = "0.0.237"
title = "My Project"

checks = [
    GitInstalled(),
    GitLfsInstalled(),
    GitLfsSetUpForUser(),
    GitLfsFilesDownloaded(),
    GitCryptInstalled(),
]
```

Then run `daktari` to diagnose your environment:

```
$ daktari
✅ [git.installed] Git is installed
✅ [git.lfs.installed] Git LFS is installed
✅ [git.lfs.setUpForUser] Git LFS is set up for the current user
✅ [git.lfs.filesDownloaded] Git LFS files have been downloaded
❌ [git.crypt.installed] git-crypt is not installed
┌─💡 Suggestion ─────────┐
│ brew install git-crypt │
└────────────────────────┘
```

## Custom Check

You can write a custom check as a Python class within `.daktari.py`, and include it in your list of checks. Example of a check implementation:

```python
class GitCryptInstalled(Check):
    name = "git.crypt.installed"
    depends_on = [GitInstalled]

    suggestions = {
        OS.OS_X: "<cmd>brew install git-crypt</cmd>",
        OS.UBUNTU: "<cmd>sudo apt install git-crypt</cmd>",
        OS.GENERIC: "Install git-crypt (https://www.agwa.name/projects/git-crypt/)",
    }

    def check(self):
        return self.verify(can_run_command("git crypt version"), "git-crypt is <not/> installed")
```

## Testing Daktari changes locally

Having cloned the repo into `~/daktari`, you can make use of PYTHONPATH to run daktari using your local changes.

To do this, navigate into a directory that has a `.daktari.py` (e.g. another repository intending to use your change) and run:

```bash
PYTHONPATH=~/daktari python3 -m daktari --debug
```

## Release instructions

Daktari is continuously deployed via a github action - see [release.yaml](.github/workflows/release.yaml). 
In case of a need to manually release, the steps are:

```
bumpversion --verbose patch
python setup.py sdist bdist_wheel
twine check dist/*
twine upload dist/*
```
