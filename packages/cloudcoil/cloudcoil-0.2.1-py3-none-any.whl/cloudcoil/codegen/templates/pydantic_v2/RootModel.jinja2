{%- macro get_type_hint(_fields) -%}
{%- if _fields -%}
{#There will only ever be a single field for RootModel#}
{{- _fields[0].type_hint}}
{%- endif -%}
{%- endmacro -%}


{% for decorator in decorators -%}
{{ decorator }}
{% endfor -%}

class {{ class_name }}({{ base_class }}{%- if fields -%}[{{get_type_hint(fields)}}]{%- endif -%}):{% if comment is defined %}  # {{ comment }}{% endif %}
{%- if description %}
    """
    {{ description | indent(4) }}
    """
{%- endif %}

{%- if config %}
{%- filter indent(4) %}
{% include 'ConfigDict.jinja2' %}
{%- endfilter %}
{%- endif %}
{%- if not fields and not description %}
    class Builder(BaseModel):
        @property
        def base_class(self) -> Type["{{ class_name }}"]:
            return {{ class_name }}
        def build(self) -> "{{ class_name }}":
            return {{ class_name }}()
{%- else %}
    {%- set field = fields[0] %}
    class Builder(BaseModel):
        _value: {{ field.type_hint }} | None = None
        @property
        def base_class(self) -> Type["{{ class_name }}"]:
            return {{ class_name }}
        def root(self, value: {{ field.type_hint }}) -> Self:
            self._value = value
            return self

        def __call__(self, value: {{ field.type_hint }}) -> Self:
            self._value = value
            return self

        def build(self) -> "{{ class_name }}":
            value = cast({{ field.type_hint }}, self._value)
            return {{ class_name }}(value)
    {%- if not field.annotated and field.field %}
    root: {{ field.type_hint }} = {{ field.field }}
    {%- else %}
    {%- if field.annotated %}
    root: {{ field.annotated }}
    {%- else %}
    root: {{ field.type_hint }}
    {%- endif %}
    {%- if not (field.required or (field.represented_default == 'None' and field.strip_default_none))
            %} = {{ field.represented_default }}
    {%- endif -%}
    {%- endif %}
    {%- if field.docstring %}
    """
    {{ field.docstring | indent(4) }}
    """
    {%- endif %}
{%- endif %}

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["{{class_name}}", Builder]):
        def __init__(self):
            raise NotImplementedError("This class is not meant to be instantiated. Use {{ class_name }}.list_builder() instead.")

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

