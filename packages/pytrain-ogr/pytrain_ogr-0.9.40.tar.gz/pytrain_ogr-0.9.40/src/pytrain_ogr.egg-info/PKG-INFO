Metadata-Version: 2.2
Name: pytrain-ogr
Version: 0.9.40
Summary: Control Lionel TMCC/Legacy engines, switches, and accesseries from a Raspberry Pi
Author-email: Dave Swindell <pytraininfo@gmail.com>
License:                    GNU LESSER GENERAL PUBLIC LICENSE
                               Version 3, 29 June 2007
        
         Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
         Everyone is permitted to copy and distribute verbatim copies
         of this license document, but changing it is not allowed.
        
        
          This version of the GNU Lesser General Public License incorporates
        the terms and conditions of version 3 of the GNU General Public
        License, supplemented by the additional permissions listed below.
        
          0. Additional Definitions.
        
          As used herein, "this License" refers to version 3 of the GNU Lesser
        General Public License, and the "GNU GPL" refers to version 3 of the GNU
        General Public License.
        
          "The Library" refers to a covered work governed by this License,
        other than an Application or a Combined Work as defined below.
        
          An "Application" is any work that makes use of an interface provided
        by the Library, but which is not otherwise based on the Library.
        Defining a subclass of a class defined by the Library is deemed a mode
        of using an interface provided by the Library.
        
          A "Combined Work" is a work produced by combining or linking an
        Application with the Library.  The particular version of the Library
        with which the Combined Work was made is also called the "Linked
        Version".
        
          The "Minimal Corresponding Source" for a Combined Work means the
        Corresponding Source for the Combined Work, excluding any source code
        for portions of the Combined Work that, considered in isolation, are
        based on the Application, and not on the Linked Version.
        
          The "Corresponding Application Code" for a Combined Work means the
        object code and/or source code for the Application, including any data
        and utility programs needed for reproducing the Combined Work from the
        Application, but excluding the System Libraries of the Combined Work.
        
          1. Exception to Section 3 of the GNU GPL.
        
          You may convey a covered work under sections 3 and 4 of this License
        without being bound by section 3 of the GNU GPL.
        
          2. Conveying Modified Versions.
        
          If you modify a copy of the Library, and, in your modifications, a
        facility refers to a function or data to be supplied by an Application
        that uses the facility (other than as an argument passed when the
        facility is invoked), then you may convey a copy of the modified
        version:
        
           a) under this License, provided that you make a good faith effort to
           ensure that, in the event an Application does not supply the
           function or data, the facility still operates, and performs
           whatever part of its purpose remains meaningful, or
        
           b) under the GNU GPL, with none of the additional permissions of
           this License applicable to that copy.
        
          3. Object Code Incorporating Material from Library Header Files.
        
          The object code form of an Application may incorporate material from
        a header file that is part of the Library.  You may convey such object
        code under terms of your choice, provided that, if the incorporated
        material is not limited to numerical parameters, data structure
        layouts and accessors, or small macros, inline functions and templates
        (ten or fewer lines in length), you do both of the following:
        
           a) Give prominent notice with each copy of the object code that the
           Library is used in it and that the Library and its use are
           covered by this License.
        
           b) Accompany the object code with a copy of the GNU GPL and this license
           document.
        
          4. Combined Works.
        
          You may convey a Combined Work under terms of your choice that,
        taken together, effectively do not restrict modification of the
        portions of the Library contained in the Combined Work and reverse
        engineering for debugging such modifications, if you also do each of
        the following:
        
           a) Give prominent notice with each copy of the Combined Work that
           the Library is used in it and that the Library and its use are
           covered by this License.
        
           b) Accompany the Combined Work with a copy of the GNU GPL and this license
           document.
        
           c) For a Combined Work that displays copyright notices during
           execution, include the copyright notice for the Library among
           these notices, as well as a reference directing the user to the
           copies of the GNU GPL and this license document.
        
           d) Do one of the following:
        
               0) Convey the Minimal Corresponding Source under the terms of this
               License, and the Corresponding Application Code in a form
               suitable for, and under terms that permit, the user to
               recombine or relink the Application with a modified version of
               the Linked Version to produce a modified Combined Work, in the
               manner specified by section 6 of the GNU GPL for conveying
               Corresponding Source.
        
               1) Use a suitable shared library mechanism for linking with the
               Library.  A suitable mechanism is one that (a) uses at run time
               a copy of the Library already present on the user's computer
               system, and (b) will operate properly with a modified version
               of the Library that is interface-compatible with the Linked
               Version.
        
           e) Provide Installation Information, but only if you would otherwise
           be required to provide such information under section 6 of the
           GNU GPL, and only to the extent that such information is
           necessary to install and execute a modified version of the
           Combined Work produced by recombining or relinking the
           Application with a modified version of the Linked Version. (If
           you use option 4d0, the Installation Information must accompany
           the Minimal Corresponding Source and Corresponding Application
           Code. If you use option 4d1, you must provide the Installation
           Information in the manner specified by section 6 of the GNU GPL
           for conveying Corresponding Source.)
        
          5. Combined Libraries.
        
          You may place library facilities that are a work based on the
        Library side by side in a single library together with other library
        facilities that are not Applications and are not covered by this
        License, and convey such a combined library under terms of your
        choice, if you do both of the following:
        
           a) Accompany the combined library with a copy of the same work based
           on the Library, uncombined with any other library facilities,
           conveyed under the terms of this License.
        
           b) Give prominent notice with the combined library that part of it
           is a work based on the Library, and explaining where to find the
           accompanying uncombined form of the same work.
        
          6. Revised Versions of the GNU Lesser General Public License.
        
          The Free Software Foundation may publish revised and/or new versions
        of the GNU Lesser General Public License from time to time. Such new
        versions will be similar in spirit to the present version, but may
        differ in detail to address new problems or concerns.
        
          Each version is given a distinguishing version number. If the
        Library as you received it specifies that a certain numbered version
        of the GNU Lesser General Public License "or any later version"
        applies to it, you have the option of following the terms and
        conditions either of that published version or of any later version
        published by the Free Software Foundation. If the Library as you
        received it does not specify a version number of the GNU Lesser
        General Public License, you may choose any version of the GNU Lesser
        General Public License ever published by the Free Software Foundation.
        
          If the Library as you received it specifies that a proxy can decide
        whether future versions of the GNU Lesser General Public License shall
        apply, that proxy's public statement of acceptance of any version is
        permanent authorization for you to choose that version for the
        Library.
        
Project-URL: Homepage, https://github.com/cdswindell/PyLegacy
Project-URL: Source, https://github.com/cdswindell/PyLegacy
Project-URL: Issues, https://github.com/cdswindell/PyLegacy/issues
Keywords: automation,interactive,control,legacy,lionel,o-gauge,raspberry pi,tmcc,trains
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Other Audience
Classifier: License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)
Classifier: Natural Language :: English
Classifier: Operating System :: POSIX :: Linux
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: AUTHORS
Requires-Dist: RPLCD>=1.3.1
Requires-Dist: colorzero>=2.0
Requires-Dist: gpiozero>=2.0.1
Requires-Dist: pyserial>=3.5
Requires-Dist: range-key-dict>=1.1
Requires-Dist: setuptools>=75.6.0
Requires-Dist: setuptools_scm>=8.1
Requires-Dist: smbus2>=0.5.0
Requires-Dist: zeroconf>=0.140.1
Requires-Dist: lgpio>=0.2.2.0; platform_system == "linux"
Requires-Dist: typing_extensions; python_version < "3.11"

# PyLegacy

This project contains software to operate and control trains and other equipment that utilize 
Lionel's [TMCC and Legacy serial command protocol](https://ogrforum.com/fileSendAction/fcType/0/fcOid/156701992259624343/filePointer/156701992265497355/fodoid/156701992265497351/LCS-LEGACY-Protocol-Spec-v1.21.pdf).
Most Lionel engines produced after 2000 support either TMCC or Legacy, and all engines produced after 2010 do.
Additionally, Lionel produces track switches, operating accessories, as well as electronic modules to control your
layout that support Legacy commands (see [Lionel Layout Control System: LCS](https://control.lionel.com/docs/lionel-layout-control-system-lcs/)).

PyLegacy is developed in pure Python and can be run on Windows, Macintosh (Intel and M-series) as well as 
inexpensive Raspberry Pi systems. My goal is to capture physical button presses on a Pi and trigger specific
Legacy commands in response. This will facilitate the construction of operating control panels I will place
on my layout to fire routes, turn on and off power districts, operate accessories, and run trains.

Initial development focuses on the development of command-line tools (CLI) to operate engines
and trains, throw switches, operate accessories, and fire custom routes. This will be followed by 
developing code to translate physical button presses on a Raspberry Pi to Legacy and TMCC command 
actions, allowing the development of physical control panels to operate trains.

<div style="font-size: 16px; ">

<!-- TOC -->
* [PyLegacy](#pylegacy)
  * [Audience](#audience)
    * [Model Railroad Enthusiasts](#model-railroad-enthusiasts)
      * [Simple Panel](#simple-panel-)
      * [Raspberry Pi GPIO Pins](#raspberry-pi-gpio-pins)
    * [Lionel Legacy Gantry Crane and Yard](#lionel-legacy-gantry-crane-and-yard)
    * [Developers](#developers)
  * [Installing PyLegacy](#installing-pylegacy)
  * [Raspberry Pi Configuration](#raspberry-pi-configuration)
  * [Command-line Tools](#command-line-tools)
    * [PyTrain](#pytrain)
    * [PiConfig](#piconfig)
  * [Contributing](#contributing)
  * [Development](#development)
    * [Requirements](#requirements)
      * [Macintosh:](#macintosh)
      * [Raspberry Pi and Pi Zero W 2](#raspberry-pi-and-pi-zero-w-2)
    * [Installation and one time setup](#installation-and-one-time-setup)
  * [Future Enhancements](#future-enhancements)
  * [License](#license)
<!-- TOC -->

</div>

## Audience

The PyLegacy project is intended for two primary audiences:

* Model railroad enthusiasts running Lionel TMCC and/or Legacy layouts that
want to add physical control panels to operate their layout, including:
  * operating accessories
  * switches (turnouts)
  * power districts
  * routes
  * layout segments (e.g., yards, stations)
  * engines, trains, and operating cars equipped with TMCC or Legacy technology
  * control and recieve information from Lionel LCS Sensor Tracks
  * LCS devices, including the ASC2, STM2, and BPC2
* Developers interested in:
  * automated train control
  * adding elements of randomness into their layouts (lights on & off, sounding horn or bell effects, etc.)
  * building sequence commands that start up, ramp an engine to speed, then stop and shut down an engine
  * integration with smart speakers and intelligent assistants (e.g., Alexa, Ok Google)
  * console control of a layout via [ssh](https://www.raspberrypi.com/documentation/computers/remote-access.html#ssh)
  * integrating model railroading and computer science
  * learning the Lionel TMCC/Legacy command protocol
  * continuing to develop software post retirement :smirk:

### Model Railroad Enthusiasts

For the first audience, model railroad enthusiasts, PyLegacy allows you to build
full functionality control panels that use physical switches, dials, and keypads to control
your layout and get real-time feedback on LEDs and multi-line LCD screens. The software,
called **_PyTrain_**, runs on small, low-cost [Raspberry Pis](https://www.raspberrypi.com). These are
relatively inexpensive, (< $100), small (size of a deck of playing cards) single-board computers
that feature pin connections to which you can attach physical controls (toggle switches, push buttons,
keypads, speed-control dials and levers, etc.), as well as LEDs and LCD screens. An entire 
world of inexpensive control hardware is available from Amazon and other online suppliers. 

Rather than running wires from each control panel to the component(s) you want to control, you simply wire your 
buttons, switches, LEDs, etc. to the Pi itself that you mount within your panel. The Raspberry Pi communicates with
your layout via Wi-Fi to a Lionel Base 3 or LCS Wi-Fi module. The only wire you need to connect to your panel 
is power for the Pi itself!

What if you want multiple control panels situated near the layout elements you want to control? Simple!
Use multiple Raspberry Pis, mounting one in each control panel. The Pis can each communicate directly to a Base 
3 (or LCS Wi-Fi module), or, you designate one of your Pi's as a _**server**_. This Pi will handle all 
communication to and from your layout, and all the Pis that drive your other panels, the clients,
communicate directly with the server over Wi-Fi.

PyTrain provides many tools that let you operate specific switches, routes, accessories, and even engines
right out of the box. All you need is to specify the TMCC ID of the component you want to operate and the 
[pin(s)](https://gpiozero.readthedocs.io/en/latest/recipes.html#pin-numbering) on the Pi that your 
physical buttons, LEDs, etc. connect to. PyTrain does the rest. 

Let's say you want to control Lionel Turnout 12 (TMCC ID is 12).
The turnout can be a TMCC Command Controlled model or one that is wired to an LCS ASC2.
In this example, our panel would consist of a momentary (on)-off-(on) toggle switch and 2 bi-color red/green 
LEDs. The LEDs show the current path a train would take when traversing the turnout from right to left. In the 
panel below, the _through_ position is set, so the _through_ LED is green, and the _out_ LED is red. If we pull
down and release the toggle switch, the turnout would change to the _out_ position, and its LED would light green, 
and the _through_ path would turn red. We would also want the LEDs to reflect the actual turnout state, should it be 
controlled from a Cab-2, Cab-3, or from the auto-derail prevention feature of FasTrack turnouts.
 

<div align="center">

![switch-example.png](https://github.com/cdswindell/PyLegacy/raw/master/doc/images/switch-example.png)

#### Simple Panel 
</div>

To construct this panel, we would need to connect toggle switch and LEDs to pins on the Raspberry Pi. Below is a 
schematic of a Pi pinout, taken from the [GPIO Zero](https://gpiozero.readthedocs.io/en/latest/index.html) 
project, which is used by PyTrain:

<div align="center">

![pin_layout.png](https://gpiozero.readthedocs.io/en/latest/_images/pin_layout.svg)

#### Raspberry Pi GPIO Pins
</div>

To control and show the state of our turnout, we would connect the center terminal of out toggle switch and 
the common cathode lead of our Bi-Color LEDs to a GND pin on the Pi (any will do). We next need to decide 
which pins we will connect the other two terminals of the toggle (up for _through_ and down for _out_), and 
the 4 leads of the 2 LEDs. We can use any of the pins colored green above, as well as GPIO pins 7, 8, 9, 10, 11, 
14, and 15. Pins GPIO 2 and GPIO 3 are reserved to communicate with expander boards that provide 
additional GPIO pins, as are pins ID SD and ID SC.

Let's say we make the following connections:

| Pin | Component     | Function   |
|:---:|---------------|------------|
|  7  | Toggle  (Up)  | Through    |
|  8  | Toggle (Down) | Out        |
|  9  | Thru LED      | Green Lead |
| 10  | Thru LED      | Red Lead   |
| 10  | Out LED       | Green Lead |
|  9  | Out LED       | Red Lead   |

Here is the Python code to control the turnout:

```
from pytrain import GpioHandler

GpioHandler.switch(
    address = 12,     # TMCC ID of the turnout to control
    thru_pin = 7,      
    out_pin = 8,       
    thru_led_pin = 9,
    out_led_pin = 10
)
```
Note that the pins driving the 2 LEDs, 9 & 10 are connected to _both_ LEDs. 
Because the LEDs in our example are bi-color, when power is applied to pin 9, 
it simultaneously lights the green element in the _through_ LED and the red
element in the _out_ LED. 

When we pull _down_ on the toggle switch, pin 8 is connected to GND. The python code responds by
sending the TMCC command to your Base 3 or LCS Wi-Fi to set the turnout to the _out_ position. It
also turns off the power to pin 9 and turns on the power to pin 10, causing the red element in
the "through" led to shine red, and the green element in the _out_ led to shine green. The PyTrain 
software can send _**all**_ the defined TMCC and Legacy commands, including almost all the 
functionality available on the Cab 2 and Cab 3 controllers, including control of engine smoke, lights,
engine sounds, speed, momentum, volume, dialog, whistle and bell sounds, and much more. 
It can also fire routes, control momentary and on/off accessories, rotate gantry cranes, etc. 

Below is another control panel to operate a Lionel Command Control Gantry. This panel uses a 2-axis joystick 
to move the gantry back and forth on the special GarGraves 5-rail track, as well as to lift the magnet
up and down. A Rotary Encoder is used to rotate the crane cab. The encoder I use has a push button 
built in that I use to turn the magnet on and off. A yellow LED is lit when the magnet is energized. 
The panel also allows control of the two track power blocks in this part of my layout, as well
as the turnout to the two track segments.

<div align="center">

![gantry.jpg](https://github.com/cdswindell/PyLegacy/raw/master/doc/images/gantry.jpg)

### Lionel Legacy Gantry Crane and Yard
</div>

### Developers

For developers...

## Installing PyLegacy

## Raspberry Pi Configuration


## Command-line Tools

PyLegacy includes several command-line tools you
The `cli` directory contains a number of Python command line scripts allowing 
you to operate engines, control switches and accessories, and fire custom routes.

### PyTrain

### PiConfig

## Contributing

## Development

### Requirements

#### Macintosh:

- Brew:

`/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"`

- Python 3.12.6 (your version may be newer; Note: Python 3.13 is _**not**_ supported:

`brew install python@3.12`

- gh:

`brew install gh`

- git (if you plan to modify the code and issue pull requests):

`brew install git`

#### Raspberry Pi and Pi Zero W 2

- Python 3.11, gh, and git:

```
sudo apt update
sudo apt upgrade

sudo apt install python3
sudo apt install gh
sudo apt install git
```

For the Raspberry Pi Zero W (**NOT** the 2 W):

```
sudo apt-get install swig
```

**Note**: some or all of this software may already be installed on your pi

### Installation and one time setup

```
cd /where/you/like/your/source

# Make sure this says 3.11. or greater; don't keep going in these directions until it does
python3 --version

# authenticate gh/git:
gh auth login

# establish a virtual Python environment
# see: https://docs.python.org/3/library/venv.html
python3 -m venv PyLegacyEnv
cd PyLegacyEnv
gh repo clone cdswindell/PyLegacy
cd PyLegacy

# Activate virtual environment
source ../bin/activate; export PYTHONPATH=.

# Install 3rd-party dependencies
pip3 install -r requirements.txt

```

You will need to activate this local python environment every time you open a
new shell, after changing your working directory to the `PyLegacy` local directory by typing:

```
source ../bin/activate
export PYTHONPATH=.
```

You may wish to create a macro or alias to issue these commands for you.

## Future Enhancements

## License

This software and its use are governed by the GNU Lesser General Public License (LPGL).
