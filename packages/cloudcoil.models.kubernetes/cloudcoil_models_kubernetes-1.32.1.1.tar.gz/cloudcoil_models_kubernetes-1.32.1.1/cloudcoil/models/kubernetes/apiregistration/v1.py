# Generated by cloudcoil-model-codegen v0.2.0
# DO NOT EDIT

from __future__ import annotations

from typing import Annotated, Callable, List, Literal, Optional, Type, Union

from pydantic import Field

from cloudcoil import apimachinery
from cloudcoil.pydantic import BaseBuilder, BaseModel, GenericListBuilder, Self
from cloudcoil.resources import Resource, ResourceList


class APIServiceCondition(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["APIServiceCondition"]:
            return APIServiceCondition

        def build(self) -> "APIServiceCondition":
            return APIServiceCondition(**self._attrs)

        """  """

        def last_transition_time(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Time],
                Callable[[apimachinery.Time.Builder], apimachinery.Time.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Time.builder()).build()
            return self._set("last_transition_time", value)

        def message(self, value: Optional[str]) -> Self:
            return self._set("message", value)

        def reason(self, value: Optional[str]) -> Self:
            return self._set("reason", value)

        def status(self, value: str) -> Self:
            return self._set("status", value)

        def type(self, value: str) -> Self:
            return self._set("type", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["APIServiceCondition", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use APIServiceCondition.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    last_transition_time: Annotated[
        Optional[apimachinery.Time],
        Field(
            alias="lastTransitionTime",
            description="Last time the condition transitioned from one status to another.",
        ),
    ] = None
    message: Annotated[
        Optional[str],
        Field(description="Human-readable message indicating details about last transition."),
    ] = None
    reason: Annotated[
        Optional[str],
        Field(
            description="Unique, one-word, CamelCase reason for the condition's last transition."
        ),
    ] = None
    status: Annotated[
        str,
        Field(description="Status is the status of the condition. Can be True, False, Unknown."),
    ]
    type: Annotated[str, Field(description="Type is the type of the condition.")]


class APIServiceStatus(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["APIServiceStatus"]:
            return APIServiceStatus

        def build(self) -> "APIServiceStatus":
            return APIServiceStatus(**self._attrs)

        """  """

        def conditions(
            self,
            value_or_callback: Union[
                Optional[List[APIServiceCondition]],
                Callable[
                    [GenericListBuilder[APIServiceCondition, APIServiceCondition.Builder]],
                    GenericListBuilder[APIServiceCondition, APIServiceCondition.Builder],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(APIServiceCondition.list_builder()).build()
            return self._set("conditions", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["APIServiceStatus", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use APIServiceStatus.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    conditions: Annotated[
        Optional[List[APIServiceCondition]],
        Field(description="Current service state of apiService."),
    ] = None


class ServiceReference(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["ServiceReference"]:
            return ServiceReference

        def build(self) -> "ServiceReference":
            return ServiceReference(**self._attrs)

        def name(self, value: Optional[str]) -> Self:
            return self._set("name", value)

        def namespace(self, value: Optional[str]) -> Self:
            return self._set("namespace", value)

        def port(self, value: Optional[int]) -> Self:
            return self._set("port", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["ServiceReference", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ServiceReference.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: Annotated[Optional[str], Field(description="Name is the name of the service")] = None
    namespace: Annotated[
        Optional[str], Field(description="Namespace is the namespace of the service")
    ] = None
    port: Annotated[
        Optional[int],
        Field(
            description="If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive)."
        ),
    ] = None


class APIServiceSpec(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["APIServiceSpec"]:
            return APIServiceSpec

        def build(self) -> "APIServiceSpec":
            return APIServiceSpec(**self._attrs)

        def ca_bundle(self, value: Optional[str]) -> Self:
            return self._set("ca_bundle", value)

        def group(self, value: Optional[str]) -> Self:
            return self._set("group", value)

        def group_priority_minimum(self, value: int) -> Self:
            return self._set("group_priority_minimum", value)

        def insecure_skip_tls_verify(self, value: Optional[bool]) -> Self:
            return self._set("insecure_skip_tls_verify", value)

        """  """

        def service(
            self,
            value_or_callback: Union[
                Optional[ServiceReference],
                Callable[[ServiceReference.Builder], ServiceReference.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ServiceReference.builder()).build()
            return self._set("service", value)

        def version(self, value: Optional[str]) -> Self:
            return self._set("version", value)

        def version_priority(self, value: int) -> Self:
            return self._set("version_priority", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["APIServiceSpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use APIServiceSpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    ca_bundle: Annotated[
        Optional[str],
        Field(
            alias="caBundle",
            description="CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.",
        ),
    ] = None
    group: Annotated[
        Optional[str],
        Field(description="Group is the API group name this server hosts"),
    ] = None
    group_priority_minimum: Annotated[
        int,
        Field(
            alias="groupPriorityMinimum",
            description="GroupPriorityMinimum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMinimum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s",
        ),
    ]
    insecure_skip_tls_verify: Annotated[
        Optional[bool],
        Field(
            alias="insecureSkipTLSVerify",
            description="InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.",
        ),
    ] = None
    service: Annotated[
        Optional[ServiceReference],
        Field(
            description="Service is a reference to the service for this API server.  It must communicate on port 443. If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled."
        ),
    ] = None
    version: Annotated[
        Optional[str],
        Field(description='Version is the API version this server hosts.  For example, "v1"'),
    ] = None
    version_priority: Annotated[
        int,
        Field(
            alias="versionPriority",
            description='VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it\'s inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.',
        ),
    ]


class APIService(Resource):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["APIService"]:
            return APIService

        def build(self) -> "APIService":
            return APIService(**self._attrs)

        def api_version(self, value: Optional[Literal["apiregistration.k8s.io/v1"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["APIService"]]) -> Self:
            return self._set("kind", value)

        """  """

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[apimachinery.ObjectMeta.Builder], apimachinery.ObjectMeta.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta.builder()).build()
            return self._set("metadata", value)

        """  """

        def spec(
            self,
            value_or_callback: Union[
                Optional[APIServiceSpec],
                Callable[[APIServiceSpec.Builder], APIServiceSpec.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(APIServiceSpec.builder()).build()
            return self._set("spec", value)

        """  """

        def status(
            self,
            value_or_callback: Union[
                Optional[APIServiceStatus],
                Callable[[APIServiceStatus.Builder], APIServiceStatus.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(APIServiceStatus.builder()).build()
            return self._set("status", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["APIService", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use APIService.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[
        Optional[Literal["apiregistration.k8s.io/v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "apiregistration.k8s.io/v1"
    kind: Annotated[
        Optional[Literal["APIService"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "APIService"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    spec: Annotated[
        Optional[APIServiceSpec],
        Field(description="Spec contains information for locating and communicating with a server"),
    ] = None
    status: Annotated[
        Optional[APIServiceStatus],
        Field(description="Status contains derived information about an API server"),
    ] = None


APIServiceList = ResourceList["APIService"]
