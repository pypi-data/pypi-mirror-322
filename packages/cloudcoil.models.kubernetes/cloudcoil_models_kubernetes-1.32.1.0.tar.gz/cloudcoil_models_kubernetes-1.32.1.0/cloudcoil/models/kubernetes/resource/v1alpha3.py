# Generated by cloudcoil-model-codegen v0.1.1
# DO NOT EDIT

from __future__ import annotations

from typing import Annotated, Callable, Dict, List, Literal, Optional, Type, Union

from pydantic import Field

from cloudcoil import apimachinery
from cloudcoil.pydantic import BaseBuilder, BaseModel, ListBuilder, Self
from cloudcoil.resources import Resource, ResourceList

from ..core import v1


class CELDeviceSelector(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "CELDeviceSelector":
            return CELDeviceSelector(**self._attrs)

        def expression(self, value: str) -> Self:
            return self._set("expression", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    expression: Annotated[
        str,
        Field(
            description='Expression is a CEL expression which evaluates a single device. It must evaluate to true when the device under consideration satisfies the desired criteria, and false when it does not. Any other result is an error and causes allocation of devices to abort.\n\nThe expression\'s input is an object named "device", which carries the following properties:\n - driver (string): the name of the driver which defines this device.\n - attributes (map[string]object): the device\'s attributes, grouped by prefix\n   (e.g. device.attributes["dra.example.com"] evaluates to an object with all\n   of the attributes which were prefixed by "dra.example.com".\n - capacity (map[string]object): the device\'s capacities, grouped by prefix.\n\nExample: Consider a device with driver="dra.example.com", which exposes two attributes named "model" and "ext.example.com/family" and which exposes one capacity named "modules". This input to this expression would have the following fields:\n\n    device.driver\n    device.attributes["dra.example.com"].model\n    device.attributes["ext.example.com"].family\n    device.capacity["dra.example.com"].modules\n\nThe device.driver field can be used to check for a specific driver, either as a high-level precondition (i.e. you only want to consider devices from this driver) or as part of a multi-clause expression that is meant to consider devices from different drivers.\n\nThe value type of each attribute is defined by the device definition, and users who write these expressions must consult the documentation for their specific drivers. The value type of each capacity is Quantity.\n\nIf an unknown prefix is used as a lookup in either device.attributes or device.capacity, an empty map will be returned. Any reference to an unknown field will cause an evaluation error and allocation to abort.\n\nA robust expression should check for the existence of attributes before referencing them.\n\nFor ease of use, the cel.bind() function is enabled, and can be used to simplify expressions that access multiple attributes with the same domain. For example:\n\n    cel.bind(dra, device.attributes["dra.example.com"], dra.someBool && dra.anotherBool)\n\nThe length of the expression must be smaller or equal to 10 Ki. The cost of evaluating it is also limited based on the estimated number of logical steps.'
        ),
    ]


class DeviceAttribute(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "DeviceAttribute":
            return DeviceAttribute(**self._attrs)

        def bool(self, value: Optional[bool]) -> Self:
            return self._set("bool", value)

        def int(self, value: Optional[int]) -> Self:
            return self._set("int", value)

        def string(self, value: Optional[str]) -> Self:
            return self._set("string", value)

        def version(self, value: Optional[str]) -> Self:
            return self._set("version", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    bool: Annotated[Optional[bool], Field(description="BoolValue is a true/false value.")] = None
    int: Annotated[Optional[int], Field(description="IntValue is a number.")] = None
    string: Annotated[
        Optional[str],
        Field(description="StringValue is a string. Must not be longer than 64 characters."),
    ] = None
    version: Annotated[
        Optional[str],
        Field(
            description="VersionValue is a semantic version according to semver.org spec 2.0.0. Must not be longer than 64 characters."
        ),
    ] = None


class DeviceConstraint(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "DeviceConstraint":
            return DeviceConstraint(**self._attrs)

        def match_attribute(self, value: Optional[str]) -> Self:
            return self._set("match_attribute", value)

        def requests(self, value: Optional[List[str]]) -> Self:
            return self._set("requests", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    match_attribute: Annotated[
        Optional[str],
        Field(
            alias="matchAttribute",
            description='MatchAttribute requires that all devices in question have this attribute and that its type and value are the same across those devices.\n\nFor example, if you specified "dra.example.com/numa" (a hypothetical example!), then only devices in the same NUMA node will be chosen. A device which does not have that attribute will not be chosen. All devices should use a value of the same type for this attribute because that is part of its specification, but if one device doesn\'t, then it also will not be chosen.\n\nMust include the domain qualifier.',
        ),
    ] = None
    requests: Annotated[
        Optional[List[str]],
        Field(
            description="Requests is a list of the one or more requests in this claim which must co-satisfy this constraint. If a request is fulfilled by multiple devices, then all of the devices must satisfy the constraint. If this is not specified, this constraint applies to all requests in this claim."
        ),
    ] = None


class DeviceRequestAllocationResult(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "DeviceRequestAllocationResult":
            return DeviceRequestAllocationResult(**self._attrs)

        def admin_access(self, value: Optional[bool]) -> Self:
            return self._set("admin_access", value)

        def device(self, value: str) -> Self:
            return self._set("device", value)

        def driver(self, value: str) -> Self:
            return self._set("driver", value)

        def pool(self, value: str) -> Self:
            return self._set("pool", value)

        def request(self, value: str) -> Self:
            return self._set("request", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    admin_access: Annotated[
        Optional[bool],
        Field(
            alias="adminAccess",
            description="AdminAccess indicates that this device was allocated for administrative access. See the corresponding request field for a definition of mode.\n\nThis is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled.",
        ),
    ] = None
    device: Annotated[
        str,
        Field(
            description="Device references one device instance via its name in the driver's resource pool. It must be a DNS label."
        ),
    ]
    driver: Annotated[
        str,
        Field(
            description="Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver."
        ),
    ]
    pool: Annotated[
        str,
        Field(
            description="This name together with the driver name and the device name field identify which device was allocated (`<driver name>/<pool name>/<device name>`).\n\nMust not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes."
        ),
    ]
    request: Annotated[
        str,
        Field(
            description="Request is the name of the request in the claim which caused this device to be allocated. Multiple devices may have been allocated per request."
        ),
    ]


class DeviceSelector(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "DeviceSelector":
            return DeviceSelector(**self._attrs)

        def cel(
            self,
            value_or_callback: Union[
                Optional[CELDeviceSelector],
                Callable[[Type[CELDeviceSelector]], CELDeviceSelector],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(CELDeviceSelector)
            return self._set("cel", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    cel: Annotated[
        Optional[CELDeviceSelector],
        Field(description="CEL contains a CEL expression for selecting a device."),
    ] = None


class NetworkDeviceData(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NetworkDeviceData":
            return NetworkDeviceData(**self._attrs)

        def hardware_address(self, value: Optional[str]) -> Self:
            return self._set("hardware_address", value)

        def interface_name(self, value: Optional[str]) -> Self:
            return self._set("interface_name", value)

        def ips(self, value: Optional[List[str]]) -> Self:
            return self._set("ips", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    hardware_address: Annotated[
        Optional[str],
        Field(
            alias="hardwareAddress",
            description="HardwareAddress represents the hardware address (e.g. MAC Address) of the device's network interface.\n\nMust not be longer than 128 characters.",
        ),
    ] = None
    interface_name: Annotated[
        Optional[str],
        Field(
            alias="interfaceName",
            description="InterfaceName specifies the name of the network interface associated with the allocated device. This might be the name of a physical or virtual network interface being configured in the pod.\n\nMust not be longer than 256 characters.",
        ),
    ] = None
    ips: Annotated[
        Optional[List[str]],
        Field(
            description='IPs lists the network addresses assigned to the device\'s network interface. This can include both IPv4 and IPv6 addresses. The IPs are in the CIDR notation, which includes both the address and the associated subnet mask. e.g.: "192.0.2.5/24" for IPv4 and "2001:db8::5/64" for IPv6.'
        ),
    ] = None


class ResourceClaimConsumerReference(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ResourceClaimConsumerReference":
            return ResourceClaimConsumerReference(**self._attrs)

        def api_group(self, value: Optional[str]) -> Self:
            return self._set("api_group", value)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def resource(self, value: str) -> Self:
            return self._set("resource", value)

        def uid(self, value: str) -> Self:
            return self._set("uid", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_group: Annotated[
        Optional[str],
        Field(
            alias="apiGroup",
            description="APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.",
        ),
    ] = None
    name: Annotated[str, Field(description="Name is the name of resource being referenced.")]
    resource: Annotated[
        str,
        Field(description='Resource is the type of resource being referenced, for example "pods".'),
    ]
    uid: Annotated[
        str,
        Field(description="UID identifies exactly one incarnation of the resource."),
    ]


class ResourcePool(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ResourcePool":
            return ResourcePool(**self._attrs)

        def generation(self, value: int) -> Self:
            return self._set("generation", value)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def resource_slice_count(self, value: int) -> Self:
            return self._set("resource_slice_count", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    generation: Annotated[
        int,
        Field(
            description="Generation tracks the change in a pool over time. Whenever a driver changes something about one or more of the resources in a pool, it must change the generation in all ResourceSlices which are part of that pool. Consumers of ResourceSlices should only consider resources from the pool with the highest generation number. The generation may be reset by drivers, which should be fine for consumers, assuming that all ResourceSlices in a pool are updated to match or deleted.\n\nCombined with ResourceSliceCount, this mechanism enables consumers to detect pools which are comprised of multiple ResourceSlices and are in an incomplete state."
        ),
    ]
    name: Annotated[
        str,
        Field(
            description="Name is used to identify the pool. For node-local devices, this is often the node name, but this is not required.\n\nIt must not be longer than 253 characters and must consist of one or more DNS sub-domains separated by slashes. This field is immutable."
        ),
    ]
    resource_slice_count: Annotated[
        int,
        Field(
            alias="resourceSliceCount",
            description="ResourceSliceCount is the total number of ResourceSlices in the pool at this generation number. Must be greater than zero.\n\nConsumers can use this to check whether they have seen all ResourceSlices belonging to the same pool.",
        ),
    ]


class BasicDevice(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "BasicDevice":
            return BasicDevice(**self._attrs)

        def attributes(self, value: Optional[Dict[str, DeviceAttribute]]) -> Self:
            return self._set("attributes", value)

        def capacity(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("capacity", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    attributes: Annotated[
        Optional[Dict[str, DeviceAttribute]],
        Field(
            description="Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.\n\nThe maximum number of attributes and capacities combined is 32."
        ),
    ] = None
    capacity: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(
            description="Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.\n\nThe maximum number of attributes and capacities combined is 32."
        ),
    ] = None


class Device(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "Device":
            return Device(**self._attrs)

        def basic(
            self,
            value_or_callback: Union[
                Optional[BasicDevice], Callable[[Type[BasicDevice]], BasicDevice]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(BasicDevice)
            return self._set("basic", value)

        def name(self, value: str) -> Self:
            return self._set("name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    basic: Annotated[
        Optional[BasicDevice], Field(description="Basic defines one device instance.")
    ] = None
    name: Annotated[
        str,
        Field(
            description="Name is unique identifier among all devices managed by the driver in the pool. It must be a DNS label."
        ),
    ]


class DeviceRequest(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "DeviceRequest":
            return DeviceRequest(**self._attrs)

        def admin_access(self, value: Optional[bool]) -> Self:
            return self._set("admin_access", value)

        def allocation_mode(self, value: Optional[str]) -> Self:
            return self._set("allocation_mode", value)

        def count(self, value: Optional[int]) -> Self:
            return self._set("count", value)

        def device_class_name(self, value: str) -> Self:
            return self._set("device_class_name", value)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def selectors(
            self,
            value_or_callback: Union[
                Optional[List[DeviceSelector]],
                Callable[[Type[DeviceSelector]], List[DeviceSelector]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(DeviceSelector)
            return self._set("selectors", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    admin_access: Annotated[
        Optional[bool],
        Field(
            alias="adminAccess",
            description="AdminAccess indicates that this is a claim for administrative access to the device(s). Claims with AdminAccess are expected to be used for monitoring or other management services for a device.  They ignore all ordinary claims to the device with respect to access modes and any resource allocations.\n\nThis is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled.",
        ),
    ] = None
    allocation_mode: Annotated[
        Optional[str],
        Field(
            alias="allocationMode",
            description="AllocationMode and its related fields define how devices are allocated to satisfy this request. Supported values are:\n\n- ExactCount: This request is for a specific number of devices.\n  This is the default. The exact number is provided in the\n  count field.\n\n- All: This request is for all of the matching devices in a pool.\n  Allocation will fail if some devices are already allocated,\n  unless adminAccess is requested.\n\nIf AlloctionMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other requests must specify this field.\n\nMore modes may get added in the future. Clients must refuse to handle requests with unknown modes.",
        ),
    ] = None
    count: Annotated[
        Optional[int],
        Field(
            description='Count is used only when the count mode is "ExactCount". Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.'
        ),
    ] = None
    device_class_name: Annotated[
        str,
        Field(
            alias="deviceClassName",
            description="DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this request.\n\nA class is required. Which classes are available depends on the cluster.\n\nAdministrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference.",
        ),
    ]
    name: Annotated[
        str,
        Field(
            description="Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.\n\nMust be a DNS label."
        ),
    ]
    selectors: Annotated[
        Optional[List[DeviceSelector]],
        Field(
            description="Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this request. All selectors must be satisfied for a device to be considered."
        ),
    ] = None


class OpaqueDeviceConfiguration(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "OpaqueDeviceConfiguration":
            return OpaqueDeviceConfiguration(**self._attrs)

        def driver(self, value: str) -> Self:
            return self._set("driver", value)

        def parameters(
            self,
            value_or_callback: Union[
                apimachinery.RawExtension,
                Callable[[Type[apimachinery.RawExtension]], apimachinery.RawExtension],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.RawExtension)
            return self._set("parameters", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    driver: Annotated[
        str,
        Field(
            description="Driver is used to determine which kubelet plugin needs to be passed these configuration parameters.\n\nAn admission policy provided by the driver developer could use this to decide whether it needs to validate them.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver."
        ),
    ]
    parameters: Annotated[
        apimachinery.RawExtension,
        Field(
            description='Parameters can contain arbitrary data. It is the responsibility of the driver developer to handle validation and versioning. Typically this includes self-identification and a version ("kind" + "apiVersion" for Kubernetes types), with conversion between different versions.\n\nThe length of the raw data must be smaller or equal to 10 Ki.'
        ),
    ]


class ResourceSliceSpec(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ResourceSliceSpec":
            return ResourceSliceSpec(**self._attrs)

        def all_nodes(self, value: Optional[bool]) -> Self:
            return self._set("all_nodes", value)

        def devices(
            self,
            value_or_callback: Union[
                Optional[List[Device]], Callable[[Type[Device]], List[Device]]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Device)
            return self._set("devices", value)

        def driver(self, value: str) -> Self:
            return self._set("driver", value)

        def node_name(self, value: Optional[str]) -> Self:
            return self._set("node_name", value)

        def node_selector(
            self,
            value_or_callback: Union[
                Optional[v1.NodeSelector],
                Callable[[Type[v1.NodeSelector]], v1.NodeSelector],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(v1.NodeSelector)
            return self._set("node_selector", value)

        def pool(
            self,
            value_or_callback: Union[ResourcePool, Callable[[Type[ResourcePool]], ResourcePool]],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ResourcePool)
            return self._set("pool", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    all_nodes: Annotated[
        Optional[bool],
        Field(
            alias="allNodes",
            description="AllNodes indicates that all nodes have access to the resources in the pool.\n\nExactly one of NodeName, NodeSelector and AllNodes must be set.",
        ),
    ] = None
    devices: Annotated[
        Optional[List[Device]],
        Field(
            description="Devices lists some or all of the devices in this pool.\n\nMust not have more than 128 entries."
        ),
    ] = None
    driver: Annotated[
        str,
        Field(
            description="Driver identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver. This field is immutable."
        ),
    ]
    node_name: Annotated[
        Optional[str],
        Field(
            alias="nodeName",
            description="NodeName identifies the node which provides the resources in this pool. A field selector can be used to list only ResourceSlice objects belonging to a certain node.\n\nThis field can be used to limit access from nodes to ResourceSlices with the same node name. It also indicates to autoscalers that adding new nodes of the same type as some old node might also make new resources available.\n\nExactly one of NodeName, NodeSelector and AllNodes must be set. This field is immutable.",
        ),
    ] = None
    node_selector: Annotated[
        Optional[v1.NodeSelector],
        Field(
            alias="nodeSelector",
            description="NodeSelector defines which nodes have access to the resources in the pool, when that pool is not limited to a single node.\n\nMust use exactly one term.\n\nExactly one of NodeName, NodeSelector and AllNodes must be set.",
        ),
    ] = None
    pool: Annotated[
        ResourcePool,
        Field(description="Pool describes the pool that this ResourceSlice belongs to."),
    ]


class AllocatedDeviceStatus(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "AllocatedDeviceStatus":
            return AllocatedDeviceStatus(**self._attrs)

        def conditions(
            self,
            value_or_callback: Union[
                Optional[List[apimachinery.Condition]],
                Callable[[Type[apimachinery.Condition]], List[apimachinery.Condition]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Condition)
            return self._set("conditions", value)

        def data(
            self,
            value_or_callback: Union[
                Optional[apimachinery.RawExtension],
                Callable[[Type[apimachinery.RawExtension]], apimachinery.RawExtension],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.RawExtension)
            return self._set("data", value)

        def device(self, value: str) -> Self:
            return self._set("device", value)

        def driver(self, value: str) -> Self:
            return self._set("driver", value)

        def network_data(
            self,
            value_or_callback: Union[
                Optional[NetworkDeviceData],
                Callable[[Type[NetworkDeviceData]], NetworkDeviceData],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NetworkDeviceData)
            return self._set("network_data", value)

        def pool(self, value: str) -> Self:
            return self._set("pool", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    conditions: Annotated[
        Optional[List[apimachinery.Condition]],
        Field(
            description="Conditions contains the latest observation of the device's state. If the device has been configured according to the class and claim config references, the `Ready` condition should be True."
        ),
    ] = None
    data: Annotated[
        Optional[apimachinery.RawExtension],
        Field(
            description="Data contains arbitrary driver-specific data.\n\nThe length of the raw data must be smaller or equal to 10 Ki."
        ),
    ] = None
    device: Annotated[
        str,
        Field(
            description="Device references one device instance via its name in the driver's resource pool. It must be a DNS label."
        ),
    ]
    driver: Annotated[
        str,
        Field(
            description="Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver."
        ),
    ]
    network_data: Annotated[
        Optional[NetworkDeviceData],
        Field(
            alias="networkData",
            description="NetworkData contains network-related information specific to the device.",
        ),
    ] = None
    pool: Annotated[
        str,
        Field(
            description="This name together with the driver name and the device name field identify which device was allocated (`<driver name>/<pool name>/<device name>`).\n\nMust not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes."
        ),
    ]


class DeviceAllocationConfiguration(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "DeviceAllocationConfiguration":
            return DeviceAllocationConfiguration(**self._attrs)

        def opaque(
            self,
            value_or_callback: Union[
                Optional[OpaqueDeviceConfiguration],
                Callable[[Type[OpaqueDeviceConfiguration]], OpaqueDeviceConfiguration],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(OpaqueDeviceConfiguration)
            return self._set("opaque", value)

        def requests(self, value: Optional[List[str]]) -> Self:
            return self._set("requests", value)

        def source(self, value: str) -> Self:
            return self._set("source", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    opaque: Annotated[
        Optional[OpaqueDeviceConfiguration],
        Field(description="Opaque provides driver-specific configuration parameters."),
    ] = None
    requests: Annotated[
        Optional[List[str]],
        Field(
            description="Requests lists the names of requests where the configuration applies. If empty, its applies to all requests."
        ),
    ] = None
    source: Annotated[
        str,
        Field(
            description="Source records whether the configuration comes from a class and thus is not something that a normal user would have been able to set or from a claim."
        ),
    ]


class DeviceAllocationResult(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "DeviceAllocationResult":
            return DeviceAllocationResult(**self._attrs)

        def config(
            self,
            value_or_callback: Union[
                Optional[List[DeviceAllocationConfiguration]],
                Callable[
                    [Type[DeviceAllocationConfiguration]],
                    List[DeviceAllocationConfiguration],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(DeviceAllocationConfiguration)
            return self._set("config", value)

        def results(
            self,
            value_or_callback: Union[
                Optional[List[DeviceRequestAllocationResult]],
                Callable[
                    [Type[DeviceRequestAllocationResult]],
                    List[DeviceRequestAllocationResult],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(DeviceRequestAllocationResult)
            return self._set("results", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    config: Annotated[
        Optional[List[DeviceAllocationConfiguration]],
        Field(
            description="This field is a combination of all the claim and class configuration parameters. Drivers can distinguish between those based on a flag.\n\nThis includes configuration parameters for drivers which have no allocated devices in the result because it is up to the drivers which configuration parameters they support. They can silently ignore unknown configuration parameters."
        ),
    ] = None
    results: Annotated[
        Optional[List[DeviceRequestAllocationResult]],
        Field(description="Results lists all allocated devices."),
    ] = None


class DeviceClaimConfiguration(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "DeviceClaimConfiguration":
            return DeviceClaimConfiguration(**self._attrs)

        def opaque(
            self,
            value_or_callback: Union[
                Optional[OpaqueDeviceConfiguration],
                Callable[[Type[OpaqueDeviceConfiguration]], OpaqueDeviceConfiguration],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(OpaqueDeviceConfiguration)
            return self._set("opaque", value)

        def requests(self, value: Optional[List[str]]) -> Self:
            return self._set("requests", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    opaque: Annotated[
        Optional[OpaqueDeviceConfiguration],
        Field(description="Opaque provides driver-specific configuration parameters."),
    ] = None
    requests: Annotated[
        Optional[List[str]],
        Field(
            description="Requests lists the names of requests where the configuration applies. If empty, it applies to all requests."
        ),
    ] = None


class DeviceClassConfiguration(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "DeviceClassConfiguration":
            return DeviceClassConfiguration(**self._attrs)

        def opaque(
            self,
            value_or_callback: Union[
                Optional[OpaqueDeviceConfiguration],
                Callable[[Type[OpaqueDeviceConfiguration]], OpaqueDeviceConfiguration],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(OpaqueDeviceConfiguration)
            return self._set("opaque", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    opaque: Annotated[
        Optional[OpaqueDeviceConfiguration],
        Field(description="Opaque provides driver-specific configuration parameters."),
    ] = None


class DeviceClassSpec(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "DeviceClassSpec":
            return DeviceClassSpec(**self._attrs)

        def config(
            self,
            value_or_callback: Union[
                Optional[List[DeviceClassConfiguration]],
                Callable[[Type[DeviceClassConfiguration]], List[DeviceClassConfiguration]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(DeviceClassConfiguration)
            return self._set("config", value)

        def selectors(
            self,
            value_or_callback: Union[
                Optional[List[DeviceSelector]],
                Callable[[Type[DeviceSelector]], List[DeviceSelector]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(DeviceSelector)
            return self._set("selectors", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    config: Annotated[
        Optional[List[DeviceClassConfiguration]],
        Field(
            description="Config defines configuration parameters that apply to each device that is claimed via this class. Some classses may potentially be satisfied by multiple drivers, so each instance of a vendor configuration applies to exactly one driver.\n\nThey are passed to the driver, but are not considered while allocating the claim."
        ),
    ] = None
    selectors: Annotated[
        Optional[List[DeviceSelector]],
        Field(
            description="Each selector must be satisfied by a device which is claimed via this class."
        ),
    ] = None


class ResourceSlice(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "ResourceSlice":
            return ResourceSlice(**self._attrs)

        def api_version(self, value: Optional[Literal["resource.k8s.io/v1alpha3"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["ResourceSlice"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[
                ResourceSliceSpec,
                Callable[[Type[ResourceSliceSpec]], ResourceSliceSpec],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ResourceSliceSpec)
            return self._set("spec", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["resource.k8s.io/v1alpha3"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "resource.k8s.io/v1alpha3"
    kind: Annotated[
        Optional[Literal["ResourceSlice"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "ResourceSlice"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta], Field(description="Standard object metadata")
    ] = None
    spec: Annotated[
        ResourceSliceSpec,
        Field(
            description="Contains the information published by the driver.\n\nChanging the spec automatically increments the metadata.generation number."
        ),
    ]


ResourceSliceList = ResourceList["ResourceSlice"]


class AllocationResult(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "AllocationResult":
            return AllocationResult(**self._attrs)

        def devices(
            self,
            value_or_callback: Union[
                Optional[DeviceAllocationResult],
                Callable[[Type[DeviceAllocationResult]], DeviceAllocationResult],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(DeviceAllocationResult)
            return self._set("devices", value)

        def node_selector(
            self,
            value_or_callback: Union[
                Optional[v1.NodeSelector],
                Callable[[Type[v1.NodeSelector]], v1.NodeSelector],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(v1.NodeSelector)
            return self._set("node_selector", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    devices: Annotated[
        Optional[DeviceAllocationResult],
        Field(description="Devices is the result of allocating devices."),
    ] = None
    node_selector: Annotated[
        Optional[v1.NodeSelector],
        Field(
            alias="nodeSelector",
            description="NodeSelector defines where the allocated resources are available. If unset, they are available everywhere.",
        ),
    ] = None


class DeviceClaim(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "DeviceClaim":
            return DeviceClaim(**self._attrs)

        def config(
            self,
            value_or_callback: Union[
                Optional[List[DeviceClaimConfiguration]],
                Callable[[Type[DeviceClaimConfiguration]], List[DeviceClaimConfiguration]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(DeviceClaimConfiguration)
            return self._set("config", value)

        def constraints(
            self,
            value_or_callback: Union[
                Optional[List[DeviceConstraint]],
                Callable[[Type[DeviceConstraint]], List[DeviceConstraint]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(DeviceConstraint)
            return self._set("constraints", value)

        def requests(
            self,
            value_or_callback: Union[
                Optional[List[DeviceRequest]],
                Callable[[Type[DeviceRequest]], List[DeviceRequest]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(DeviceRequest)
            return self._set("requests", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    config: Annotated[
        Optional[List[DeviceClaimConfiguration]],
        Field(
            description="This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim."
        ),
    ] = None
    constraints: Annotated[
        Optional[List[DeviceConstraint]],
        Field(
            description="These constraints must be satisfied by the set of devices that get allocated for the claim."
        ),
    ] = None
    requests: Annotated[
        Optional[List[DeviceRequest]],
        Field(
            description="Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated."
        ),
    ] = None


class DeviceClass(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "DeviceClass":
            return DeviceClass(**self._attrs)

        def api_version(self, value: Optional[Literal["resource.k8s.io/v1alpha3"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["DeviceClass"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[
                DeviceClassSpec, Callable[[Type[DeviceClassSpec]], DeviceClassSpec]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(DeviceClassSpec)
            return self._set("spec", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["resource.k8s.io/v1alpha3"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "resource.k8s.io/v1alpha3"
    kind: Annotated[
        Optional[Literal["DeviceClass"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "DeviceClass"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta], Field(description="Standard object metadata")
    ] = None
    spec: Annotated[
        DeviceClassSpec,
        Field(
            description="Spec defines what can be allocated and how to configure it.\n\nThis is mutable. Consumers have to be prepared for classes changing at any time, either because they get updated or replaced. Claim allocations are done once based on whatever was set in classes at the time of allocation.\n\nChanging the spec automatically increments the metadata.generation number."
        ),
    ]


DeviceClassList = ResourceList["DeviceClass"]


class ResourceClaimSpec(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ResourceClaimSpec":
            return ResourceClaimSpec(**self._attrs)

        def devices(
            self,
            value_or_callback: Union[
                Optional[DeviceClaim], Callable[[Type[DeviceClaim]], DeviceClaim]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(DeviceClaim)
            return self._set("devices", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    devices: Annotated[
        Optional[DeviceClaim],
        Field(description="Devices defines how to request devices."),
    ] = None


class ResourceClaimStatus(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ResourceClaimStatus":
            return ResourceClaimStatus(**self._attrs)

        def allocation(
            self,
            value_or_callback: Union[
                Optional[AllocationResult],
                Callable[[Type[AllocationResult]], AllocationResult],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(AllocationResult)
            return self._set("allocation", value)

        def devices(
            self,
            value_or_callback: Union[
                Optional[List[AllocatedDeviceStatus]],
                Callable[[Type[AllocatedDeviceStatus]], List[AllocatedDeviceStatus]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(AllocatedDeviceStatus)
            return self._set("devices", value)

        def reserved_for(
            self,
            value_or_callback: Union[
                Optional[List[ResourceClaimConsumerReference]],
                Callable[
                    [Type[ResourceClaimConsumerReference]],
                    List[ResourceClaimConsumerReference],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ResourceClaimConsumerReference)
            return self._set("reserved_for", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    allocation: Annotated[
        Optional[AllocationResult],
        Field(description="Allocation is set once the claim has been allocated successfully."),
    ] = None
    devices: Annotated[
        Optional[List[AllocatedDeviceStatus]],
        Field(
            description="Devices contains the status of each device allocated for this claim, as reported by the driver. This can include driver-specific information. Entries are owned by their respective drivers."
        ),
    ] = None
    reserved_for: Annotated[
        Optional[List[ResourceClaimConsumerReference]],
        Field(
            alias="reservedFor",
            description="ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started. A claim that is in use or might be in use because it has been reserved must not get deallocated.\n\nIn a cluster with multiple scheduler instances, two pods might get scheduled concurrently by different schedulers. When they reference the same ResourceClaim which already has reached its maximum number of consumers, only one pod can be scheduled.\n\nBoth schedulers try to add their pod to the claim.status.reservedFor field, but only the update that reaches the API server first gets stored. The other one fails with an error and the scheduler which issued it knows that it must put the pod back into the queue, waiting for the ResourceClaim to become usable again.\n\nThere can be at most 256 such reservations. This may get increased in the future, but not reduced.",
        ),
    ] = None


class ResourceClaimTemplateSpec(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ResourceClaimTemplateSpec":
            return ResourceClaimTemplateSpec(**self._attrs)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[
                ResourceClaimSpec,
                Callable[[Type[ResourceClaimSpec]], ResourceClaimSpec],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ResourceClaimSpec)
            return self._set("spec", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="ObjectMeta may contain labels and annotations that will be copied into the ResourceClaim when creating it. No other fields are allowed and will be rejected during validation."
        ),
    ] = None
    spec: Annotated[
        ResourceClaimSpec,
        Field(
            description="Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here."
        ),
    ]


class ResourceClaim(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "ResourceClaim":
            return ResourceClaim(**self._attrs)

        def api_version(self, value: Optional[Literal["resource.k8s.io/v1alpha3"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["ResourceClaim"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[
                ResourceClaimSpec,
                Callable[[Type[ResourceClaimSpec]], ResourceClaimSpec],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ResourceClaimSpec)
            return self._set("spec", value)

        def status(
            self,
            value_or_callback: Union[
                Optional[ResourceClaimStatus],
                Callable[[Type[ResourceClaimStatus]], ResourceClaimStatus],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ResourceClaimStatus)
            return self._set("status", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["resource.k8s.io/v1alpha3"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "resource.k8s.io/v1alpha3"
    kind: Annotated[
        Optional[Literal["ResourceClaim"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "ResourceClaim"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta], Field(description="Standard object metadata")
    ] = None
    spec: Annotated[
        ResourceClaimSpec,
        Field(
            description="Spec describes what is being requested and how to configure it. The spec is immutable."
        ),
    ]
    status: Annotated[
        Optional[ResourceClaimStatus],
        Field(
            description="Status describes whether the claim is ready to use and what has been allocated."
        ),
    ] = None


ResourceClaimList = ResourceList["ResourceClaim"]


class ResourceClaimTemplate(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "ResourceClaimTemplate":
            return ResourceClaimTemplate(**self._attrs)

        def api_version(self, value: Optional[Literal["resource.k8s.io/v1alpha3"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["ResourceClaimTemplate"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[
                ResourceClaimTemplateSpec,
                Callable[[Type[ResourceClaimTemplateSpec]], ResourceClaimTemplateSpec],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ResourceClaimTemplateSpec)
            return self._set("spec", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["resource.k8s.io/v1alpha3"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "resource.k8s.io/v1alpha3"
    kind: Annotated[
        Optional[Literal["ResourceClaimTemplate"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "ResourceClaimTemplate"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta], Field(description="Standard object metadata")
    ] = None
    spec: Annotated[
        ResourceClaimTemplateSpec,
        Field(
            description="Describes the ResourceClaim that is to be generated.\n\nThis field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore."
        ),
    ]


ResourceClaimTemplateList = ResourceList["ResourceClaimTemplate"]
