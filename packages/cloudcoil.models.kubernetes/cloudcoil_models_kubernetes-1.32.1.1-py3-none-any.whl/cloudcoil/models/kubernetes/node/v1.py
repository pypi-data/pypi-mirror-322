# Generated by cloudcoil-model-codegen v0.2.0
# DO NOT EDIT

from __future__ import annotations

from typing import Annotated, Callable, Dict, List, Literal, Optional, Type, Union

from pydantic import Field

from cloudcoil import apimachinery
from cloudcoil.pydantic import BaseBuilder, BaseModel, GenericListBuilder, Self
from cloudcoil.resources import Resource, ResourceList

from ..core import v1


class Scheduling(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["Scheduling"]:
            return Scheduling

        def build(self) -> "Scheduling":
            return Scheduling(**self._attrs)

        def node_selector(self, value: Optional[Dict[str, str]]) -> Self:
            return self._set("node_selector", value)

        """  """

        def tolerations(
            self,
            value_or_callback: Union[
                Optional[List[v1.Toleration]],
                Callable[
                    [GenericListBuilder[v1.Toleration, v1.Toleration.Builder]],
                    GenericListBuilder[v1.Toleration, v1.Toleration.Builder],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(v1.Toleration.list_builder()).build()
            return self._set("tolerations", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["Scheduling", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Scheduling.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    node_selector: Annotated[
        Optional[Dict[str, str]],
        Field(
            alias="nodeSelector",
            description="nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.",
        ),
    ] = None
    tolerations: Annotated[
        Optional[List[v1.Toleration]],
        Field(
            description="tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass."
        ),
    ] = None


class Overhead(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["Overhead"]:
            return Overhead

        def build(self) -> "Overhead":
            return Overhead(**self._attrs)

        def pod_fixed(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("pod_fixed", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["Overhead", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Overhead.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    pod_fixed: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(
            alias="podFixed",
            description="podFixed represents the fixed resource overhead associated with running a pod.",
        ),
    ] = None


class RuntimeClass(Resource):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["RuntimeClass"]:
            return RuntimeClass

        def build(self) -> "RuntimeClass":
            return RuntimeClass(**self._attrs)

        def api_version(self, value: Optional[Literal["node.k8s.io/v1"]]) -> Self:
            return self._set("api_version", value)

        def handler(self, value: str) -> Self:
            return self._set("handler", value)

        def kind(self, value: Optional[Literal["RuntimeClass"]]) -> Self:
            return self._set("kind", value)

        """  """

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[apimachinery.ObjectMeta.Builder], apimachinery.ObjectMeta.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta.builder()).build()
            return self._set("metadata", value)

        """  """

        def overhead(
            self,
            value_or_callback: Union[
                Optional[Overhead], Callable[[Overhead.Builder], Overhead.Builder]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Overhead.builder()).build()
            return self._set("overhead", value)

        """  """

        def scheduling(
            self,
            value_or_callback: Union[
                Optional[Scheduling], Callable[[Scheduling.Builder], Scheduling.Builder]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Scheduling.builder()).build()
            return self._set("scheduling", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["RuntimeClass", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use RuntimeClass.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[
        Optional[Literal["node.k8s.io/v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "node.k8s.io/v1"
    handler: Annotated[
        str,
        Field(
            description='handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called "runc" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The Handler must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.'
        ),
    ]
    kind: Annotated[
        Optional[Literal["RuntimeClass"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "RuntimeClass"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    overhead: Annotated[
        Optional[Overhead],
        Field(
            description="overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see\n https://kubernetes.io/docs/concepts/scheduling-eviction/pod-overhead/"
        ),
    ] = None
    scheduling: Annotated[
        Optional[Scheduling],
        Field(
            description="scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes."
        ),
    ] = None


RuntimeClassList = ResourceList["RuntimeClass"]
