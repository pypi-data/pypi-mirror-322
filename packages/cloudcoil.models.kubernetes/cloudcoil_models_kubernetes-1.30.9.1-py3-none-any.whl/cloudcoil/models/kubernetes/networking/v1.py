# Generated by cloudcoil-model-codegen v0.2.0
# DO NOT EDIT

from __future__ import annotations

from typing import Annotated, Callable, List, Literal, Optional, Type, Union

from pydantic import Field

from cloudcoil import apimachinery
from cloudcoil.pydantic import BaseBuilder, BaseModel, GenericListBuilder, Self
from cloudcoil.resources import Resource, ResourceList

from ..core import v1


class IPBlock(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["IPBlock"]:
            return IPBlock

        def build(self) -> "IPBlock":
            return IPBlock(**self._attrs)

        def cidr(self, value: str) -> Self:
            return self._set("cidr", value)

        def except_(self, value: Optional[List[str]]) -> Self:
            return self._set("except_", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["IPBlock", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IPBlock.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    cidr: Annotated[
        str,
        Field(
            description='cidr is a string representing the IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64"'
        ),
    ]
    except_: Annotated[
        Optional[List[str]],
        Field(
            alias="except",
            description='except is a slice of CIDRs that should not be included within an IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64" Except values will be rejected if they are outside the cidr range',
        ),
    ] = None


class IngressClassParametersReference(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["IngressClassParametersReference"]:
            return IngressClassParametersReference

        def build(self) -> "IngressClassParametersReference":
            return IngressClassParametersReference(**self._attrs)

        def api_group(self, value: Optional[str]) -> Self:
            return self._set("api_group", value)

        def kind(self, value: str) -> Self:
            return self._set("kind", value)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def namespace(self, value: Optional[str]) -> Self:
            return self._set("namespace", value)

        def scope(self, value: Optional[str]) -> Self:
            return self._set("scope", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["IngressClassParametersReference", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IngressClassParametersReference.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_group: Annotated[
        Optional[str],
        Field(
            alias="apiGroup",
            description="apiGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
        ),
    ] = None
    kind: Annotated[str, Field(description="kind is the type of resource being referenced.")]
    name: Annotated[str, Field(description="name is the name of resource being referenced.")]
    namespace: Annotated[
        Optional[str],
        Field(
            description='namespace is the namespace of the resource being referenced. This field is required when scope is set to "Namespace" and must be unset when scope is set to "Cluster".'
        ),
    ] = None
    scope: Annotated[
        Optional[str],
        Field(
            description='scope represents if this refers to a cluster or namespace scoped resource. This may be set to "Cluster" (default) or "Namespace".'
        ),
    ] = None


class IngressClassSpec(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["IngressClassSpec"]:
            return IngressClassSpec

        def build(self) -> "IngressClassSpec":
            return IngressClassSpec(**self._attrs)

        def controller(self, value: Optional[str]) -> Self:
            return self._set("controller", value)

        """  """

        def parameters(
            self,
            value_or_callback: Union[
                Optional[IngressClassParametersReference],
                Callable[
                    [IngressClassParametersReference.Builder],
                    IngressClassParametersReference.Builder,
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(IngressClassParametersReference.builder()).build()
            return self._set("parameters", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["IngressClassSpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IngressClassSpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    controller: Annotated[
        Optional[str],
        Field(
            description='controller refers to the name of the controller that should handle this class. This allows for different "flavors" that are controlled by the same controller. For example, you may have different parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller". This field is immutable.'
        ),
    ] = None
    parameters: Annotated[
        Optional[IngressClassParametersReference],
        Field(
            description="parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters."
        ),
    ] = None


class IngressPortStatus(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["IngressPortStatus"]:
            return IngressPortStatus

        def build(self) -> "IngressPortStatus":
            return IngressPortStatus(**self._attrs)

        def error(self, value: Optional[str]) -> Self:
            return self._set("error", value)

        def port(self, value: int) -> Self:
            return self._set("port", value)

        def protocol(self, value: str) -> Self:
            return self._set("protocol", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["IngressPortStatus", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IngressPortStatus.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    error: Annotated[
        Optional[str],
        Field(
            description="error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase."
        ),
    ] = None
    port: Annotated[int, Field(description="port is the port number of the ingress port.")]
    protocol: Annotated[
        str,
        Field(
            description='protocol is the protocol of the ingress port. The supported values are: "TCP", "UDP", "SCTP"'
        ),
    ]


class IngressTLS(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["IngressTLS"]:
            return IngressTLS

        def build(self) -> "IngressTLS":
            return IngressTLS(**self._attrs)

        def hosts(self, value: Optional[List[str]]) -> Self:
            return self._set("hosts", value)

        def secret_name(self, value: Optional[str]) -> Self:
            return self._set("secret_name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["IngressTLS", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IngressTLS.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    hosts: Annotated[
        Optional[List[str]],
        Field(
            description="hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified."
        ),
    ] = None
    secret_name: Annotated[
        Optional[str],
        Field(
            alias="secretName",
            description='secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the "Host" header is used for routing.',
        ),
    ] = None


class ServiceBackendPort(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["ServiceBackendPort"]:
            return ServiceBackendPort

        def build(self) -> "ServiceBackendPort":
            return ServiceBackendPort(**self._attrs)

        def name(self, value: Optional[str]) -> Self:
            return self._set("name", value)

        def number(self, value: Optional[int]) -> Self:
            return self._set("number", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["ServiceBackendPort", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ServiceBackendPort.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: Annotated[
        Optional[str],
        Field(
            description='name is the name of the port on the Service. This is a mutually exclusive setting with "Number".'
        ),
    ] = None
    number: Annotated[
        Optional[int],
        Field(
            description='number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".'
        ),
    ] = None


class IngressLoadBalancerIngress(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["IngressLoadBalancerIngress"]:
            return IngressLoadBalancerIngress

        def build(self) -> "IngressLoadBalancerIngress":
            return IngressLoadBalancerIngress(**self._attrs)

        def hostname(self, value: Optional[str]) -> Self:
            return self._set("hostname", value)

        def ip(self, value: Optional[str]) -> Self:
            return self._set("ip", value)

        """  """

        def ports(
            self,
            value_or_callback: Union[
                Optional[List[IngressPortStatus]],
                Callable[
                    [GenericListBuilder[IngressPortStatus, IngressPortStatus.Builder]],
                    GenericListBuilder[IngressPortStatus, IngressPortStatus.Builder],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(IngressPortStatus.list_builder()).build()
            return self._set("ports", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["IngressLoadBalancerIngress", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IngressLoadBalancerIngress.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    hostname: Annotated[
        Optional[str],
        Field(description="hostname is set for load-balancer ingress points that are DNS based."),
    ] = None
    ip: Annotated[
        Optional[str],
        Field(description="ip is set for load-balancer ingress points that are IP based."),
    ] = None
    ports: Annotated[
        Optional[List[IngressPortStatus]],
        Field(
            description="ports provides information about the ports exposed by this LoadBalancer."
        ),
    ] = None


class IngressLoadBalancerStatus(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["IngressLoadBalancerStatus"]:
            return IngressLoadBalancerStatus

        def build(self) -> "IngressLoadBalancerStatus":
            return IngressLoadBalancerStatus(**self._attrs)

        """  """

        def ingress(
            self,
            value_or_callback: Union[
                Optional[List[IngressLoadBalancerIngress]],
                Callable[
                    [
                        GenericListBuilder[
                            IngressLoadBalancerIngress,
                            IngressLoadBalancerIngress.Builder,
                        ]
                    ],
                    GenericListBuilder[
                        IngressLoadBalancerIngress, IngressLoadBalancerIngress.Builder
                    ],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(IngressLoadBalancerIngress.list_builder()).build()
            return self._set("ingress", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["IngressLoadBalancerStatus", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IngressLoadBalancerStatus.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    ingress: Annotated[
        Optional[List[IngressLoadBalancerIngress]],
        Field(description="ingress is a list containing ingress points for the load-balancer."),
    ] = None


class IngressServiceBackend(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["IngressServiceBackend"]:
            return IngressServiceBackend

        def build(self) -> "IngressServiceBackend":
            return IngressServiceBackend(**self._attrs)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        """  """

        def port(
            self,
            value_or_callback: Union[
                Optional[ServiceBackendPort],
                Callable[[ServiceBackendPort.Builder], ServiceBackendPort.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ServiceBackendPort.builder()).build()
            return self._set("port", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["IngressServiceBackend", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IngressServiceBackend.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: Annotated[
        str,
        Field(
            description="name is the referenced service. The service must exist in the same namespace as the Ingress object."
        ),
    ]
    port: Annotated[
        Optional[ServiceBackendPort],
        Field(
            description="port of the referenced service. A port name or port number is required for a IngressServiceBackend."
        ),
    ] = None


class IngressStatus(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["IngressStatus"]:
            return IngressStatus

        def build(self) -> "IngressStatus":
            return IngressStatus(**self._attrs)

        """  """

        def load_balancer(
            self,
            value_or_callback: Union[
                Optional[IngressLoadBalancerStatus],
                Callable[
                    [IngressLoadBalancerStatus.Builder],
                    IngressLoadBalancerStatus.Builder,
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(IngressLoadBalancerStatus.builder()).build()
            return self._set("load_balancer", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["IngressStatus", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IngressStatus.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    load_balancer: Annotated[
        Optional[IngressLoadBalancerStatus],
        Field(
            alias="loadBalancer",
            description="loadBalancer contains the current status of the load-balancer.",
        ),
    ] = None


class NetworkPolicyPort(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["NetworkPolicyPort"]:
            return NetworkPolicyPort

        def build(self) -> "NetworkPolicyPort":
            return NetworkPolicyPort(**self._attrs)

        def end_port(self, value: Optional[int]) -> Self:
            return self._set("end_port", value)

        """  """

        def port(
            self,
            value_or_callback: Union[
                Optional[apimachinery.IntOrString],
                Callable[[apimachinery.IntOrString.Builder], apimachinery.IntOrString.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.IntOrString.builder()).build()
            return self._set("port", value)

        def protocol(self, value: Optional[str]) -> Self:
            return self._set("protocol", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["NetworkPolicyPort", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use NetworkPolicyPort.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    end_port: Annotated[
        Optional[int],
        Field(
            alias="endPort",
            description="endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.",
        ),
    ] = None
    port: Annotated[
        Optional[apimachinery.IntOrString],
        Field(
            description="port represents the port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched."
        ),
    ] = None
    protocol: Annotated[
        Optional[str],
        Field(
            description="protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP."
        ),
    ] = None


class IngressBackend(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["IngressBackend"]:
            return IngressBackend

        def build(self) -> "IngressBackend":
            return IngressBackend(**self._attrs)

        """  """

        def resource(
            self,
            value_or_callback: Union[
                Optional[v1.TypedLocalObjectReference],
                Callable[
                    [v1.TypedLocalObjectReference.Builder],
                    v1.TypedLocalObjectReference.Builder,
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(v1.TypedLocalObjectReference.builder()).build()
            return self._set("resource", value)

        """  """

        def service(
            self,
            value_or_callback: Union[
                Optional[IngressServiceBackend],
                Callable[[IngressServiceBackend.Builder], IngressServiceBackend.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(IngressServiceBackend.builder()).build()
            return self._set("service", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["IngressBackend", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IngressBackend.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    resource: Annotated[
        Optional[v1.TypedLocalObjectReference],
        Field(
            description='resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with "Service".'
        ),
    ] = None
    service: Annotated[
        Optional[IngressServiceBackend],
        Field(
            description='service references a service as a backend. This is a mutually exclusive setting with "Resource".'
        ),
    ] = None


class IngressClass(Resource):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["IngressClass"]:
            return IngressClass

        def build(self) -> "IngressClass":
            return IngressClass(**self._attrs)

        def api_version(self, value: Optional[Literal["networking.k8s.io/v1"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["IngressClass"]]) -> Self:
            return self._set("kind", value)

        """  """

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[apimachinery.ObjectMeta.Builder], apimachinery.ObjectMeta.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta.builder()).build()
            return self._set("metadata", value)

        """  """

        def spec(
            self,
            value_or_callback: Union[
                Optional[IngressClassSpec],
                Callable[[IngressClassSpec.Builder], IngressClassSpec.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(IngressClassSpec.builder()).build()
            return self._set("spec", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["IngressClass", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IngressClass.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[
        Optional[Literal["networking.k8s.io/v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "networking.k8s.io/v1"
    kind: Annotated[
        Optional[Literal["IngressClass"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "IngressClass"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    spec: Annotated[
        Optional[IngressClassSpec],
        Field(
            description="spec is the desired state of the IngressClass. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None


IngressClassList = ResourceList["IngressClass"]


class NetworkPolicyPeer(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["NetworkPolicyPeer"]:
            return NetworkPolicyPeer

        def build(self) -> "NetworkPolicyPeer":
            return NetworkPolicyPeer(**self._attrs)

        """  """

        def ip_block(
            self,
            value_or_callback: Union[
                Optional[IPBlock], Callable[[IPBlock.Builder], IPBlock.Builder]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(IPBlock.builder()).build()
            return self._set("ip_block", value)

        """  """

        def namespace_selector(
            self,
            value_or_callback: Union[
                Optional[apimachinery.LabelSelector],
                Callable[
                    [apimachinery.LabelSelector.Builder],
                    apimachinery.LabelSelector.Builder,
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.LabelSelector.builder()).build()
            return self._set("namespace_selector", value)

        """  """

        def pod_selector(
            self,
            value_or_callback: Union[
                Optional[apimachinery.LabelSelector],
                Callable[
                    [apimachinery.LabelSelector.Builder],
                    apimachinery.LabelSelector.Builder,
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.LabelSelector.builder()).build()
            return self._set("pod_selector", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["NetworkPolicyPeer", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use NetworkPolicyPeer.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    ip_block: Annotated[
        Optional[IPBlock],
        Field(
            alias="ipBlock",
            description="ipBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.",
        ),
    ] = None
    namespace_selector: Annotated[
        Optional[apimachinery.LabelSelector],
        Field(
            alias="namespaceSelector",
            description="namespaceSelector selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\n\nIf podSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the namespaces selected by namespaceSelector. Otherwise it selects all pods in the namespaces selected by namespaceSelector.",
        ),
    ] = None
    pod_selector: Annotated[
        Optional[apimachinery.LabelSelector],
        Field(
            alias="podSelector",
            description="podSelector is a label selector which selects pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\n\nIf namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the pods matching podSelector in the policy's own namespace.",
        ),
    ] = None


class HTTPIngressPath(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["HTTPIngressPath"]:
            return HTTPIngressPath

        def build(self) -> "HTTPIngressPath":
            return HTTPIngressPath(**self._attrs)

        """  """

        def backend(
            self,
            value_or_callback: Union[
                IngressBackend,
                Callable[[IngressBackend.Builder], IngressBackend.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(IngressBackend.builder()).build()
            return self._set("backend", value)

        def path(self, value: Optional[str]) -> Self:
            return self._set("path", value)

        def path_type(self, value: str) -> Self:
            return self._set("path_type", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["HTTPIngressPath", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use HTTPIngressPath.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    backend: Annotated[
        IngressBackend,
        Field(
            description="backend defines the referenced service endpoint to which the traffic will be forwarded to."
        ),
    ]
    path: Annotated[
        Optional[str],
        Field(
            description='path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a \'/\' and must be present when using PathType with value "Exact" or "Prefix".'
        ),
    ] = None
    path_type: Annotated[
        str,
        Field(
            alias="pathType",
            description="pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is\n  done on a path element by element basis. A path element refers is the\n  list of labels in the path split by the '/' separator. A request is a\n  match for path p if every p is an element-wise prefix of p of the\n  request path. Note that if the last element of the path is a substring\n  of the last element in request path, it is not a match (e.g. /foo/bar\n  matches /foo/bar/baz, but does not match /foo/barbaz).\n* ImplementationSpecific: Interpretation of the Path matching is up to\n  the IngressClass. Implementations can treat this as a separate PathType\n  or treat it identically to Prefix or Exact path types.\nImplementations are required to support all path types.",
        ),
    ]


class HTTPIngressRuleValue(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["HTTPIngressRuleValue"]:
            return HTTPIngressRuleValue

        def build(self) -> "HTTPIngressRuleValue":
            return HTTPIngressRuleValue(**self._attrs)

        """  """

        def paths(
            self,
            value_or_callback: Union[
                List[HTTPIngressPath],
                Callable[
                    [GenericListBuilder[HTTPIngressPath, HTTPIngressPath.Builder]],
                    GenericListBuilder[HTTPIngressPath, HTTPIngressPath.Builder],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(HTTPIngressPath.list_builder()).build()
            return self._set("paths", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["HTTPIngressRuleValue", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use HTTPIngressRuleValue.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    paths: Annotated[
        List[HTTPIngressPath],
        Field(description="paths is a collection of paths that map requests to backends."),
    ]


class IngressRule(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["IngressRule"]:
            return IngressRule

        def build(self) -> "IngressRule":
            return IngressRule(**self._attrs)

        def host(self, value: Optional[str]) -> Self:
            return self._set("host", value)

        """  """

        def http(
            self,
            value_or_callback: Union[
                Optional[HTTPIngressRuleValue],
                Callable[[HTTPIngressRuleValue.Builder], HTTPIngressRuleValue.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(HTTPIngressRuleValue.builder()).build()
            return self._set("http", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["IngressRule", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IngressRule.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    host: Annotated[
        Optional[str],
        Field(
            description='host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to\n   the IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.\n\nhost can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character \'*\' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If host is precise, the request matches this rule if the http host header is equal to Host. 2. If host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.'
        ),
    ] = None
    http: Optional[HTTPIngressRuleValue] = None


class IngressSpec(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["IngressSpec"]:
            return IngressSpec

        def build(self) -> "IngressSpec":
            return IngressSpec(**self._attrs)

        """  """

        def default_backend(
            self,
            value_or_callback: Union[
                Optional[IngressBackend],
                Callable[[IngressBackend.Builder], IngressBackend.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(IngressBackend.builder()).build()
            return self._set("default_backend", value)

        def ingress_class_name(self, value: Optional[str]) -> Self:
            return self._set("ingress_class_name", value)

        """  """

        def rules(
            self,
            value_or_callback: Union[
                Optional[List[IngressRule]],
                Callable[
                    [GenericListBuilder[IngressRule, IngressRule.Builder]],
                    GenericListBuilder[IngressRule, IngressRule.Builder],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(IngressRule.list_builder()).build()
            return self._set("rules", value)

        """  """

        def tls(
            self,
            value_or_callback: Union[
                Optional[List[IngressTLS]],
                Callable[
                    [GenericListBuilder[IngressTLS, IngressTLS.Builder]],
                    GenericListBuilder[IngressTLS, IngressTLS.Builder],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(IngressTLS.list_builder()).build()
            return self._set("tls", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["IngressSpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IngressSpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    default_backend: Annotated[
        Optional[IngressBackend],
        Field(
            alias="defaultBackend",
            description="defaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.",
        ),
    ] = None
    ingress_class_name: Annotated[
        Optional[str],
        Field(
            alias="ingressClassName",
            description="ingressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -> IngressClass -> Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.",
        ),
    ] = None
    rules: Annotated[
        Optional[List[IngressRule]],
        Field(
            description="rules is a list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend."
        ),
    ] = None
    tls: Annotated[
        Optional[List[IngressTLS]],
        Field(
            description="tls represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI."
        ),
    ] = None


class NetworkPolicyEgressRule(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["NetworkPolicyEgressRule"]:
            return NetworkPolicyEgressRule

        def build(self) -> "NetworkPolicyEgressRule":
            return NetworkPolicyEgressRule(**self._attrs)

        """  """

        def ports(
            self,
            value_or_callback: Union[
                Optional[List[NetworkPolicyPort]],
                Callable[
                    [GenericListBuilder[NetworkPolicyPort, NetworkPolicyPort.Builder]],
                    GenericListBuilder[NetworkPolicyPort, NetworkPolicyPort.Builder],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NetworkPolicyPort.list_builder()).build()
            return self._set("ports", value)

        """  """

        def to(
            self,
            value_or_callback: Union[
                Optional[List[NetworkPolicyPeer]],
                Callable[
                    [GenericListBuilder[NetworkPolicyPeer, NetworkPolicyPeer.Builder]],
                    GenericListBuilder[NetworkPolicyPeer, NetworkPolicyPeer.Builder],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NetworkPolicyPeer.list_builder()).build()
            return self._set("to", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["NetworkPolicyEgressRule", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use NetworkPolicyEgressRule.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    ports: Annotated[
        Optional[List[NetworkPolicyPort]],
        Field(
            description="ports is a list of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list."
        ),
    ] = None
    to: Annotated[
        Optional[List[NetworkPolicyPeer]],
        Field(
            description="to is a list of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list."
        ),
    ] = None


class NetworkPolicyIngressRule(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["NetworkPolicyIngressRule"]:
            return NetworkPolicyIngressRule

        def build(self) -> "NetworkPolicyIngressRule":
            return NetworkPolicyIngressRule(**self._attrs)

        """  """

        def from_(
            self,
            value_or_callback: Union[
                Optional[List[NetworkPolicyPeer]],
                Callable[
                    [GenericListBuilder[NetworkPolicyPeer, NetworkPolicyPeer.Builder]],
                    GenericListBuilder[NetworkPolicyPeer, NetworkPolicyPeer.Builder],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NetworkPolicyPeer.list_builder()).build()
            return self._set("from_", value)

        """  """

        def ports(
            self,
            value_or_callback: Union[
                Optional[List[NetworkPolicyPort]],
                Callable[
                    [GenericListBuilder[NetworkPolicyPort, NetworkPolicyPort.Builder]],
                    GenericListBuilder[NetworkPolicyPort, NetworkPolicyPort.Builder],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NetworkPolicyPort.list_builder()).build()
            return self._set("ports", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["NetworkPolicyIngressRule", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use NetworkPolicyIngressRule.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    from_: Annotated[
        Optional[List[NetworkPolicyPeer]],
        Field(
            alias="from",
            description="from is a list of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.",
        ),
    ] = None
    ports: Annotated[
        Optional[List[NetworkPolicyPort]],
        Field(
            description="ports is a list of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list."
        ),
    ] = None


class NetworkPolicySpec(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["NetworkPolicySpec"]:
            return NetworkPolicySpec

        def build(self) -> "NetworkPolicySpec":
            return NetworkPolicySpec(**self._attrs)

        """  """

        def egress(
            self,
            value_or_callback: Union[
                Optional[List[NetworkPolicyEgressRule]],
                Callable[
                    [GenericListBuilder[NetworkPolicyEgressRule, NetworkPolicyEgressRule.Builder]],
                    GenericListBuilder[NetworkPolicyEgressRule, NetworkPolicyEgressRule.Builder],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NetworkPolicyEgressRule.list_builder()).build()
            return self._set("egress", value)

        """  """

        def ingress(
            self,
            value_or_callback: Union[
                Optional[List[NetworkPolicyIngressRule]],
                Callable[
                    [
                        GenericListBuilder[
                            NetworkPolicyIngressRule, NetworkPolicyIngressRule.Builder
                        ]
                    ],
                    GenericListBuilder[NetworkPolicyIngressRule, NetworkPolicyIngressRule.Builder],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NetworkPolicyIngressRule.list_builder()).build()
            return self._set("ingress", value)

        """  """

        def pod_selector(
            self,
            value_or_callback: Union[
                apimachinery.LabelSelector,
                Callable[
                    [apimachinery.LabelSelector.Builder],
                    apimachinery.LabelSelector.Builder,
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.LabelSelector.builder()).build()
            return self._set("pod_selector", value)

        def policy_types(self, value: Optional[List[str]]) -> Self:
            return self._set("policy_types", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["NetworkPolicySpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use NetworkPolicySpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    egress: Annotated[
        Optional[List[NetworkPolicyEgressRule]],
        Field(
            description="egress is a list of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8"
        ),
    ] = None
    ingress: Annotated[
        Optional[List[NetworkPolicyIngressRule]],
        Field(
            description="ingress is a list of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)"
        ),
    ] = None
    pod_selector: Annotated[
        apimachinery.LabelSelector,
        Field(
            alias="podSelector",
            description="podSelector selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.",
        ),
    ]
    policy_types: Annotated[
        Optional[List[str]],
        Field(
            alias="policyTypes",
            description='policyTypes is a list of rule types that the NetworkPolicy relates to. Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"]. If this field is not specified, it will default based on the existence of ingress or egress rules; policies that contain an egress section are assumed to affect egress, and all policies (whether or not they contain an ingress section) are assumed to affect ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8',
        ),
    ] = None


class Ingress(Resource):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["Ingress"]:
            return Ingress

        def build(self) -> "Ingress":
            return Ingress(**self._attrs)

        def api_version(self, value: Optional[Literal["networking.k8s.io/v1"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["Ingress"]]) -> Self:
            return self._set("kind", value)

        """  """

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[apimachinery.ObjectMeta.Builder], apimachinery.ObjectMeta.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta.builder()).build()
            return self._set("metadata", value)

        """  """

        def spec(
            self,
            value_or_callback: Union[
                Optional[IngressSpec],
                Callable[[IngressSpec.Builder], IngressSpec.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(IngressSpec.builder()).build()
            return self._set("spec", value)

        """  """

        def status(
            self,
            value_or_callback: Union[
                Optional[IngressStatus],
                Callable[[IngressStatus.Builder], IngressStatus.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(IngressStatus.builder()).build()
            return self._set("status", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["Ingress", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Ingress.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[
        Optional[Literal["networking.k8s.io/v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "networking.k8s.io/v1"
    kind: Annotated[
        Optional[Literal["Ingress"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "Ingress"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    spec: Annotated[
        Optional[IngressSpec],
        Field(
            description="spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None
    status: Annotated[
        Optional[IngressStatus],
        Field(
            description="status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None


IngressList = ResourceList["Ingress"]


class NetworkPolicy(Resource):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["NetworkPolicy"]:
            return NetworkPolicy

        def build(self) -> "NetworkPolicy":
            return NetworkPolicy(**self._attrs)

        def api_version(self, value: Optional[Literal["networking.k8s.io/v1"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["NetworkPolicy"]]) -> Self:
            return self._set("kind", value)

        """  """

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[apimachinery.ObjectMeta.Builder], apimachinery.ObjectMeta.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta.builder()).build()
            return self._set("metadata", value)

        """  """

        def spec(
            self,
            value_or_callback: Union[
                Optional[NetworkPolicySpec],
                Callable[[NetworkPolicySpec.Builder], NetworkPolicySpec.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NetworkPolicySpec.builder()).build()
            return self._set("spec", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["NetworkPolicy", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use NetworkPolicy.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[
        Optional[Literal["networking.k8s.io/v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "networking.k8s.io/v1"
    kind: Annotated[
        Optional[Literal["NetworkPolicy"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "NetworkPolicy"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    spec: Annotated[
        Optional[NetworkPolicySpec],
        Field(
            description="spec represents the specification of the desired behavior for this NetworkPolicy."
        ),
    ] = None


NetworkPolicyList = ResourceList["NetworkPolicy"]
