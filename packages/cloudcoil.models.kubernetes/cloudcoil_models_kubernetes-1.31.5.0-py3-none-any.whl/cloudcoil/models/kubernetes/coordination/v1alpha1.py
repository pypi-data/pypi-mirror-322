# Generated by cloudcoil-model-codegen v0.1.1
# DO NOT EDIT

from __future__ import annotations

from typing import Annotated, Callable, List, Literal, Optional, Type, Union

from pydantic import Field

from cloudcoil import apimachinery
from cloudcoil.pydantic import BaseBuilder, BaseModel, ListBuilder, Self
from cloudcoil.resources import Resource, ResourceList


class LeaseCandidateSpec(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "LeaseCandidateSpec":
            return LeaseCandidateSpec(**self._attrs)

        def binary_version(self, value: Optional[str]) -> Self:
            return self._set("binary_version", value)

        def emulation_version(self, value: Optional[str]) -> Self:
            return self._set("emulation_version", value)

        def lease_name(self, value: str) -> Self:
            return self._set("lease_name", value)

        def ping_time(
            self,
            value_or_callback: Union[
                Optional[apimachinery.MicroTime],
                Callable[[Type[apimachinery.MicroTime]], apimachinery.MicroTime],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.MicroTime)
            return self._set("ping_time", value)

        def preferred_strategies(self, value: List[str]) -> Self:
            return self._set("preferred_strategies", value)

        def renew_time(
            self,
            value_or_callback: Union[
                Optional[apimachinery.MicroTime],
                Callable[[Type[apimachinery.MicroTime]], apimachinery.MicroTime],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.MicroTime)
            return self._set("renew_time", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    binary_version: Annotated[
        Optional[str],
        Field(
            alias="binaryVersion",
            description='BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required when strategy is "OldestEmulationVersion"',
        ),
    ] = None
    emulation_version: Annotated[
        Optional[str],
        Field(
            alias="emulationVersion",
            description='EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"',
        ),
    ] = None
    lease_name: Annotated[
        str,
        Field(
            alias="leaseName",
            description="LeaseName is the name of the lease for which this candidate is contending. This field is immutable.",
        ),
    ]
    ping_time: Annotated[
        Optional[apimachinery.MicroTime],
        Field(
            alias="pingTime",
            description="PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.",
        ),
    ] = None
    preferred_strategies: Annotated[
        List[str],
        Field(
            alias="preferredStrategies",
            description="PreferredStrategies indicates the list of strategies for picking the leader for coordinated leader election. The list is ordered, and the first strategy supersedes all other strategies. The list is used by coordinated leader election to make a decision about the final election strategy. This follows as - If all clients have strategy X as the first element in this list, strategy X will be used. - If a candidate has strategy [X] and another candidate has strategy [Y, X], Y supersedes X and strategy Y\n  will be used.\n- If a candidate has strategy [X, Y] and another candidate has strategy [Y, X], this is a user error and leader\n  election will not operate the Lease until resolved.\n(Alpha) Using this field requires the CoordinatedLeaderElection feature gate to be enabled.",
        ),
    ]
    renew_time: Annotated[
        Optional[apimachinery.MicroTime],
        Field(
            alias="renewTime",
            description="RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.",
        ),
    ] = None


class LeaseCandidate(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "LeaseCandidate":
            return LeaseCandidate(**self._attrs)

        def api_version(self, value: Optional[Literal["coordination.k8s.io/v1alpha1"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["LeaseCandidate"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[
                Optional[LeaseCandidateSpec],
                Callable[[Type[LeaseCandidateSpec]], LeaseCandidateSpec],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LeaseCandidateSpec)
            return self._set("spec", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["coordination.k8s.io/v1alpha1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "coordination.k8s.io/v1alpha1"
    kind: Annotated[
        Optional[Literal["LeaseCandidate"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "LeaseCandidate"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    spec: Annotated[
        Optional[LeaseCandidateSpec],
        Field(
            description="spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None


LeaseCandidateList = ResourceList["LeaseCandidate"]
