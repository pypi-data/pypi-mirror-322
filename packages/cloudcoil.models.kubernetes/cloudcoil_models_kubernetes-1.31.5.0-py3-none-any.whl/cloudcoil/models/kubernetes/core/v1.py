# Generated by cloudcoil-model-codegen v0.1.1
# DO NOT EDIT

from __future__ import annotations

from typing import Annotated, Callable, Dict, List, Literal, Optional, Type, Union

from pydantic import Field

from cloudcoil import apimachinery
from cloudcoil.pydantic import BaseBuilder, BaseModel, ListBuilder, Self
from cloudcoil.resources import Resource, ResourceList


class AWSElasticBlockStoreVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "AWSElasticBlockStoreVolumeSource":
            return AWSElasticBlockStoreVolumeSource(**self._attrs)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def partition(self, value: Optional[int]) -> Self:
            return self._set("partition", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def volume_id(self, value: str) -> Self:
            return self._set("volume_id", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
        ),
    ] = None
    partition: Annotated[
        Optional[int],
        Field(
            description='partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).'
        ),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
        ),
    ] = None
    volume_id: Annotated[
        str,
        Field(
            alias="volumeID",
            description="volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
        ),
    ]


class AppArmorProfile(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "AppArmorProfile":
            return AppArmorProfile(**self._attrs)

        def localhost_profile(self, value: Optional[str]) -> Self:
            return self._set("localhost_profile", value)

        def type(self, value: str) -> Self:
            return self._set("type", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    localhost_profile: Annotated[
        Optional[str],
        Field(
            alias="localhostProfile",
            description='localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is "Localhost".',
        ),
    ] = None
    type: Annotated[
        str,
        Field(
            description="type indicates which kind of AppArmor profile will be applied. Valid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement."
        ),
    ]


class AttachedVolume(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "AttachedVolume":
            return AttachedVolume(**self._attrs)

        def device_path(self, value: str) -> Self:
            return self._set("device_path", value)

        def name(self, value: str) -> Self:
            return self._set("name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    device_path: Annotated[
        str,
        Field(
            alias="devicePath",
            description="DevicePath represents the device path where the volume should be available",
        ),
    ]
    name: Annotated[str, Field(description="Name of the attached volume")]


class AzureDiskVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "AzureDiskVolumeSource":
            return AzureDiskVolumeSource(**self._attrs)

        def caching_mode(self, value: Optional[str]) -> Self:
            return self._set("caching_mode", value)

        def disk_name(self, value: str) -> Self:
            return self._set("disk_name", value)

        def disk_uri(self, value: str) -> Self:
            return self._set("disk_uri", value)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def kind(self, value: Optional[str]) -> Self:
            return self._set("kind", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    caching_mode: Annotated[
        Optional[str],
        Field(
            alias="cachingMode",
            description="cachingMode is the Host Caching mode: None, Read Only, Read Write.",
        ),
    ] = None
    disk_name: Annotated[
        str,
        Field(
            alias="diskName",
            description="diskName is the Name of the data disk in the blob storage",
        ),
    ]
    disk_uri: Annotated[
        str,
        Field(
            alias="diskURI",
            description="diskURI is the URI of data disk in the blob storage",
        ),
    ]
    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
        ),
    ] = None
    kind: Annotated[
        Optional[str],
        Field(
            description="kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared"
        ),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
        ),
    ] = None


class AzureFilePersistentVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "AzureFilePersistentVolumeSource":
            return AzureFilePersistentVolumeSource(**self._attrs)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def secret_name(self, value: str) -> Self:
            return self._set("secret_name", value)

        def secret_namespace(self, value: Optional[str]) -> Self:
            return self._set("secret_namespace", value)

        def share_name(self, value: str) -> Self:
            return self._set("share_name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
        ),
    ] = None
    secret_name: Annotated[
        str,
        Field(
            alias="secretName",
            description="secretName is the name of secret that contains Azure Storage Account Name and Key",
        ),
    ]
    secret_namespace: Annotated[
        Optional[str],
        Field(
            alias="secretNamespace",
            description="secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod",
        ),
    ] = None
    share_name: Annotated[
        str, Field(alias="shareName", description="shareName is the azure Share Name")
    ]


class AzureFileVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "AzureFileVolumeSource":
            return AzureFileVolumeSource(**self._attrs)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def secret_name(self, value: str) -> Self:
            return self._set("secret_name", value)

        def share_name(self, value: str) -> Self:
            return self._set("share_name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
        ),
    ] = None
    secret_name: Annotated[
        str,
        Field(
            alias="secretName",
            description="secretName is the  name of secret that contains Azure Storage Account Name and Key",
        ),
    ]
    share_name: Annotated[
        str, Field(alias="shareName", description="shareName is the azure share Name")
    ]


class Capabilities(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "Capabilities":
            return Capabilities(**self._attrs)

        def add(self, value: Optional[List[str]]) -> Self:
            return self._set("add", value)

        def drop(self, value: Optional[List[str]]) -> Self:
            return self._set("drop", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    add: Annotated[Optional[List[str]], Field(description="Added capabilities")] = None
    drop: Annotated[Optional[List[str]], Field(description="Removed capabilities")] = None


class ClientIPConfig(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ClientIPConfig":
            return ClientIPConfig(**self._attrs)

        def timeout_seconds(self, value: Optional[int]) -> Self:
            return self._set("timeout_seconds", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    timeout_seconds: Annotated[
        Optional[int],
        Field(
            alias="timeoutSeconds",
            description='timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).',
        ),
    ] = None


class ComponentCondition(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ComponentCondition":
            return ComponentCondition(**self._attrs)

        def error(self, value: Optional[str]) -> Self:
            return self._set("error", value)

        def message(self, value: Optional[str]) -> Self:
            return self._set("message", value)

        def status(self, value: str) -> Self:
            return self._set("status", value)

        def type(self, value: str) -> Self:
            return self._set("type", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    error: Annotated[
        Optional[str],
        Field(
            description="Condition error code for a component. For example, a health check error code."
        ),
    ] = None
    message: Annotated[
        Optional[str],
        Field(
            description="Message about the condition for a component. For example, information about a health check."
        ),
    ] = None
    status: Annotated[
        str,
        Field(
            description='Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".'
        ),
    ]
    type: Annotated[
        str,
        Field(description='Type of condition for a component. Valid value: "Healthy"'),
    ]


class ConfigMapEnvSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ConfigMapEnvSource":
            return ConfigMapEnvSource(**self._attrs)

        def name(self, value: Optional[str]) -> Self:
            return self._set("name", value)

        def optional(self, value: Optional[bool]) -> Self:
            return self._set("optional", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    name: Annotated[
        Optional[str],
        Field(
            description="Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        ),
    ] = None
    optional: Annotated[
        Optional[bool],
        Field(description="Specify whether the ConfigMap must be defined"),
    ] = None


class ConfigMapKeySelector(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ConfigMapKeySelector":
            return ConfigMapKeySelector(**self._attrs)

        def key(self, value: str) -> Self:
            return self._set("key", value)

        def name(self, value: Optional[str]) -> Self:
            return self._set("name", value)

        def optional(self, value: Optional[bool]) -> Self:
            return self._set("optional", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    key: Annotated[str, Field(description="The key to select.")]
    name: Annotated[
        Optional[str],
        Field(
            description="Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        ),
    ] = None
    optional: Annotated[
        Optional[bool],
        Field(description="Specify whether the ConfigMap or its key must be defined"),
    ] = None


class ConfigMapNodeConfigSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ConfigMapNodeConfigSource":
            return ConfigMapNodeConfigSource(**self._attrs)

        def kubelet_config_key(self, value: str) -> Self:
            return self._set("kubelet_config_key", value)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def namespace(self, value: str) -> Self:
            return self._set("namespace", value)

        def resource_version(self, value: Optional[str]) -> Self:
            return self._set("resource_version", value)

        def uid(self, value: Optional[str]) -> Self:
            return self._set("uid", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    kubelet_config_key: Annotated[
        str,
        Field(
            alias="kubeletConfigKey",
            description="KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.",
        ),
    ]
    name: Annotated[
        str,
        Field(
            description="Name is the metadata.name of the referenced ConfigMap. This field is required in all cases."
        ),
    ]
    namespace: Annotated[
        str,
        Field(
            description="Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases."
        ),
    ]
    resource_version: Annotated[
        Optional[str],
        Field(
            alias="resourceVersion",
            description="ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
        ),
    ] = None
    uid: Annotated[
        Optional[str],
        Field(
            description="UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
        ),
    ] = None


class ContainerImage(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ContainerImage":
            return ContainerImage(**self._attrs)

        def names(self, value: Optional[List[str]]) -> Self:
            return self._set("names", value)

        def size_bytes(self, value: Optional[int]) -> Self:
            return self._set("size_bytes", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    names: Annotated[
        Optional[List[str]],
        Field(
            description='Names by which this image is known. e.g. ["kubernetes.example/hyperkube:v1.0.7", "cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7"]'
        ),
    ] = None
    size_bytes: Annotated[
        Optional[int],
        Field(alias="sizeBytes", description="The size of the image in bytes."),
    ] = None


class ContainerPort(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ContainerPort":
            return ContainerPort(**self._attrs)

        def container_port(self, value: int) -> Self:
            return self._set("container_port", value)

        def host_ip(self, value: Optional[str]) -> Self:
            return self._set("host_ip", value)

        def host_port(self, value: Optional[int]) -> Self:
            return self._set("host_port", value)

        def name(self, value: Optional[str]) -> Self:
            return self._set("name", value)

        def protocol(self, value: Optional[str]) -> Self:
            return self._set("protocol", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    container_port: Annotated[
        int,
        Field(
            alias="containerPort",
            description="Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
        ),
    ]
    host_ip: Annotated[
        Optional[str],
        Field(alias="hostIP", description="What host IP to bind the external port to."),
    ] = None
    host_port: Annotated[
        Optional[int],
        Field(
            alias="hostPort",
            description="Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
        ),
    ] = None
    name: Annotated[
        Optional[str],
        Field(
            description="If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services."
        ),
    ] = None
    protocol: Annotated[
        Optional[str],
        Field(description='Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".'),
    ] = None


class ContainerResizePolicy(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ContainerResizePolicy":
            return ContainerResizePolicy(**self._attrs)

        def resource_name(self, value: str) -> Self:
            return self._set("resource_name", value)

        def restart_policy(self, value: str) -> Self:
            return self._set("restart_policy", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    resource_name: Annotated[
        str,
        Field(
            alias="resourceName",
            description="Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.",
        ),
    ]
    restart_policy: Annotated[
        str,
        Field(
            alias="restartPolicy",
            description="Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.",
        ),
    ]


class ContainerStateWaiting(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ContainerStateWaiting":
            return ContainerStateWaiting(**self._attrs)

        def message(self, value: Optional[str]) -> Self:
            return self._set("message", value)

        def reason(self, value: Optional[str]) -> Self:
            return self._set("reason", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    message: Annotated[
        Optional[str],
        Field(description="Message regarding why the container is not yet running."),
    ] = None
    reason: Annotated[
        Optional[str],
        Field(description="(brief) reason the container is not yet running."),
    ] = None


class DaemonEndpoint(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "DaemonEndpoint":
            return DaemonEndpoint(**self._attrs)

        def port(self, value: int) -> Self:
            return self._set("port", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    port: Annotated[int, Field(alias="Port", description="Port number of the given endpoint.")]


class EndpointPort(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "EndpointPort":
            return EndpointPort(**self._attrs)

        def app_protocol(self, value: Optional[str]) -> Self:
            return self._set("app_protocol", value)

        def name(self, value: Optional[str]) -> Self:
            return self._set("name", value)

        def port(self, value: int) -> Self:
            return self._set("port", value)

        def protocol(self, value: Optional[str]) -> Self:
            return self._set("protocol", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    app_protocol: Annotated[
        Optional[str],
        Field(
            alias="appProtocol",
            description="The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:\n\n* Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).\n\n* Kubernetes-defined prefixed names:\n  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-\n  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455\n  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455\n\n* Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.",
        ),
    ] = None
    name: Annotated[
        Optional[str],
        Field(
            description="The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined."
        ),
    ] = None
    port: Annotated[int, Field(description="The port number of the endpoint.")]
    protocol: Annotated[
        Optional[str],
        Field(
            description="The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP."
        ),
    ] = None


class EventSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "EventSource":
            return EventSource(**self._attrs)

        def component(self, value: Optional[str]) -> Self:
            return self._set("component", value)

        def host(self, value: Optional[str]) -> Self:
            return self._set("host", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    component: Annotated[
        Optional[str], Field(description="Component from which the event is generated.")
    ] = None
    host: Annotated[
        Optional[str], Field(description="Node name on which the event is generated.")
    ] = None


class ExecAction(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ExecAction":
            return ExecAction(**self._attrs)

        def command(self, value: Optional[List[str]]) -> Self:
            return self._set("command", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    command: Annotated[
        Optional[List[str]],
        Field(
            description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
        ),
    ] = None


class FCVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "FCVolumeSource":
            return FCVolumeSource(**self._attrs)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def lun(self, value: Optional[int]) -> Self:
            return self._set("lun", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def target_ww_ns(self, value: Optional[List[str]]) -> Self:
            return self._set("target_ww_ns", value)

        def wwids(self, value: Optional[List[str]]) -> Self:
            return self._set("wwids", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
        ),
    ] = None
    lun: Annotated[Optional[int], Field(description="lun is Optional: FC target lun number")] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
        ),
    ] = None
    target_ww_ns: Annotated[
        Optional[List[str]],
        Field(
            alias="targetWWNs",
            description="targetWWNs is Optional: FC target worldwide names (WWNs)",
        ),
    ] = None
    wwids: Annotated[
        Optional[List[str]],
        Field(
            description="wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously."
        ),
    ] = None


class FlockerVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "FlockerVolumeSource":
            return FlockerVolumeSource(**self._attrs)

        def dataset_name(self, value: Optional[str]) -> Self:
            return self._set("dataset_name", value)

        def dataset_uuid(self, value: Optional[str]) -> Self:
            return self._set("dataset_uuid", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    dataset_name: Annotated[
        Optional[str],
        Field(
            alias="datasetName",
            description="datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated",
        ),
    ] = None
    dataset_uuid: Annotated[
        Optional[str],
        Field(
            alias="datasetUUID",
            description="datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset",
        ),
    ] = None


class GCEPersistentDiskVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "GCEPersistentDiskVolumeSource":
            return GCEPersistentDiskVolumeSource(**self._attrs)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def partition(self, value: Optional[int]) -> Self:
            return self._set("partition", value)

        def pd_name(self, value: str) -> Self:
            return self._set("pd_name", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
        ),
    ] = None
    partition: Annotated[
        Optional[int],
        Field(
            description='partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
        ),
    ] = None
    pd_name: Annotated[
        str,
        Field(
            alias="pdName",
            description="pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
        ),
    ]
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
        ),
    ] = None


class GRPCAction(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "GRPCAction":
            return GRPCAction(**self._attrs)

        def port(self, value: int) -> Self:
            return self._set("port", value)

        def service(self, value: Optional[str]) -> Self:
            return self._set("service", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    port: Annotated[
        int,
        Field(
            description="Port number of the gRPC service. Number must be in the range 1 to 65535."
        ),
    ]
    service: Annotated[
        Optional[str],
        Field(
            description="Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC."
        ),
    ] = None


class GitRepoVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "GitRepoVolumeSource":
            return GitRepoVolumeSource(**self._attrs)

        def directory(self, value: Optional[str]) -> Self:
            return self._set("directory", value)

        def repository(self, value: str) -> Self:
            return self._set("repository", value)

        def revision(self, value: Optional[str]) -> Self:
            return self._set("revision", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    directory: Annotated[
        Optional[str],
        Field(
            description="directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name."
        ),
    ] = None
    repository: Annotated[str, Field(description="repository is the URL")]
    revision: Annotated[
        Optional[str],
        Field(description="revision is the commit hash for the specified revision."),
    ] = None


class GlusterfsPersistentVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "GlusterfsPersistentVolumeSource":
            return GlusterfsPersistentVolumeSource(**self._attrs)

        def endpoints(self, value: str) -> Self:
            return self._set("endpoints", value)

        def endpoints_namespace(self, value: Optional[str]) -> Self:
            return self._set("endpoints_namespace", value)

        def path(self, value: str) -> Self:
            return self._set("path", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    endpoints: Annotated[
        str,
        Field(
            description="endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
        ),
    ]
    endpoints_namespace: Annotated[
        Optional[str],
        Field(
            alias="endpointsNamespace",
            description="endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
        ),
    ] = None
    path: Annotated[
        str,
        Field(
            description="path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
        ),
    ]
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
        ),
    ] = None


class GlusterfsVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "GlusterfsVolumeSource":
            return GlusterfsVolumeSource(**self._attrs)

        def endpoints(self, value: str) -> Self:
            return self._set("endpoints", value)

        def path(self, value: str) -> Self:
            return self._set("path", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    endpoints: Annotated[
        str,
        Field(
            description="endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
        ),
    ]
    path: Annotated[
        str,
        Field(
            description="path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
        ),
    ]
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
        ),
    ] = None


class HTTPHeader(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "HTTPHeader":
            return HTTPHeader(**self._attrs)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def value(self, value: str) -> Self:
            return self._set("value", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    name: Annotated[
        str,
        Field(
            description="The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header."
        ),
    ]
    value: Annotated[str, Field(description="The header field value")]


class HostAlias(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "HostAlias":
            return HostAlias(**self._attrs)

        def hostnames(self, value: Optional[List[str]]) -> Self:
            return self._set("hostnames", value)

        def ip(self, value: str) -> Self:
            return self._set("ip", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    hostnames: Annotated[
        Optional[List[str]], Field(description="Hostnames for the above IP address.")
    ] = None
    ip: Annotated[str, Field(description="IP address of the host file entry.")]


class HostIP(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "HostIP":
            return HostIP(**self._attrs)

        def ip(self, value: str) -> Self:
            return self._set("ip", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    ip: Annotated[str, Field(description="IP is the IP address assigned to the host")]


class HostPathVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "HostPathVolumeSource":
            return HostPathVolumeSource(**self._attrs)

        def path(self, value: str) -> Self:
            return self._set("path", value)

        def type(self, value: Optional[str]) -> Self:
            return self._set("type", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    path: Annotated[
        str,
        Field(
            description="path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
        ),
    ]
    type: Annotated[
        Optional[str],
        Field(
            description='type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
        ),
    ] = None


class ImageVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ImageVolumeSource":
            return ImageVolumeSource(**self._attrs)

        def pull_policy(self, value: Optional[str]) -> Self:
            return self._set("pull_policy", value)

        def reference(self, value: Optional[str]) -> Self:
            return self._set("reference", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    pull_policy: Annotated[
        Optional[str],
        Field(
            alias="pullPolicy",
            description="Policy for pulling OCI objects. Possible values are: Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails. Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present. IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.",
        ),
    ] = None
    reference: Annotated[
        Optional[str],
        Field(
            description="Required: Image or artifact reference to be used. Behaves in the same way as pod.spec.containers[*].image. Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets."
        ),
    ] = None


class KeyToPath(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "KeyToPath":
            return KeyToPath(**self._attrs)

        def key(self, value: str) -> Self:
            return self._set("key", value)

        def mode(self, value: Optional[int]) -> Self:
            return self._set("mode", value)

        def path(self, value: str) -> Self:
            return self._set("path", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    key: Annotated[str, Field(description="key is the key to project.")]
    mode: Annotated[
        Optional[int],
        Field(
            description="mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
        ),
    ] = None
    path: Annotated[
        str,
        Field(
            description="path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
        ),
    ]


class LinuxContainerUser(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "LinuxContainerUser":
            return LinuxContainerUser(**self._attrs)

        def gid(self, value: int) -> Self:
            return self._set("gid", value)

        def supplemental_groups(self, value: Optional[List[int]]) -> Self:
            return self._set("supplemental_groups", value)

        def uid(self, value: int) -> Self:
            return self._set("uid", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    gid: Annotated[
        int,
        Field(
            description="GID is the primary gid initially attached to the first process in the container"
        ),
    ]
    supplemental_groups: Annotated[
        Optional[List[int]],
        Field(
            alias="supplementalGroups",
            description="SupplementalGroups are the supplemental groups initially attached to the first process in the container",
        ),
    ] = None
    uid: Annotated[
        int,
        Field(
            description="UID is the primary uid initially attached to the first process in the container"
        ),
    ]


class LocalObjectReference(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "LocalObjectReference":
            return LocalObjectReference(**self._attrs)

        def name(self, value: Optional[str]) -> Self:
            return self._set("name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    name: Annotated[
        Optional[str],
        Field(
            description="Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        ),
    ] = None


class LocalVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "LocalVolumeSource":
            return LocalVolumeSource(**self._attrs)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def path(self, value: str) -> Self:
            return self._set("path", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.',
        ),
    ] = None
    path: Annotated[
        str,
        Field(
            description="path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...)."
        ),
    ]


class ModifyVolumeStatus(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ModifyVolumeStatus":
            return ModifyVolumeStatus(**self._attrs)

        def status(self, value: str) -> Self:
            return self._set("status", value)

        def target_volume_attributes_class_name(self, value: Optional[str]) -> Self:
            return self._set("target_volume_attributes_class_name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    status: Annotated[
        str,
        Field(
            description="status is the status of the ControllerModifyVolume operation. It can be in any of following states:\n - Pending\n   Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as\n   the specified VolumeAttributesClass not existing.\n - InProgress\n   InProgress indicates that the volume is being modified.\n - Infeasible\n  Infeasible indicates that the request has been rejected as invalid by the CSI driver. To\n\t  resolve the error, a valid VolumeAttributesClass needs to be specified.\nNote: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately."
        ),
    ]
    target_volume_attributes_class_name: Annotated[
        Optional[str],
        Field(
            alias="targetVolumeAttributesClassName",
            description="targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled",
        ),
    ] = None


class NFSVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NFSVolumeSource":
            return NFSVolumeSource(**self._attrs)

        def path(self, value: str) -> Self:
            return self._set("path", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def server(self, value: str) -> Self:
            return self._set("server", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    path: Annotated[
        str,
        Field(
            description="path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
        ),
    ]
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
        ),
    ] = None
    server: Annotated[
        str,
        Field(
            description="server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
        ),
    ]


class NamespaceSpec(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NamespaceSpec":
            return NamespaceSpec(**self._attrs)

        def finalizers(self, value: Optional[List[str]]) -> Self:
            return self._set("finalizers", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    finalizers: Annotated[
        Optional[List[str]],
        Field(
            description="Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/"
        ),
    ] = None


class NodeAddress(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NodeAddress":
            return NodeAddress(**self._attrs)

        def address(self, value: str) -> Self:
            return self._set("address", value)

        def type(self, value: str) -> Self:
            return self._set("type", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    address: Annotated[str, Field(description="The node address.")]
    type: Annotated[
        str,
        Field(description="Node address type, one of Hostname, ExternalIP or InternalIP."),
    ]


class NodeConfigSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NodeConfigSource":
            return NodeConfigSource(**self._attrs)

        def config_map(
            self,
            value_or_callback: Union[
                Optional[ConfigMapNodeConfigSource],
                Callable[[Type[ConfigMapNodeConfigSource]], ConfigMapNodeConfigSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ConfigMapNodeConfigSource)
            return self._set("config_map", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    config_map: Annotated[
        Optional[ConfigMapNodeConfigSource],
        Field(
            alias="configMap",
            description="ConfigMap is a reference to a Node's ConfigMap",
        ),
    ] = None


class NodeConfigStatus(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NodeConfigStatus":
            return NodeConfigStatus(**self._attrs)

        def active(
            self,
            value_or_callback: Union[
                Optional[NodeConfigSource],
                Callable[[Type[NodeConfigSource]], NodeConfigSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeConfigSource)
            return self._set("active", value)

        def assigned(
            self,
            value_or_callback: Union[
                Optional[NodeConfigSource],
                Callable[[Type[NodeConfigSource]], NodeConfigSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeConfigSource)
            return self._set("assigned", value)

        def error(self, value: Optional[str]) -> Self:
            return self._set("error", value)

        def last_known_good(
            self,
            value_or_callback: Union[
                Optional[NodeConfigSource],
                Callable[[Type[NodeConfigSource]], NodeConfigSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeConfigSource)
            return self._set("last_known_good", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    active: Annotated[
        Optional[NodeConfigSource],
        Field(
            description="Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error."
        ),
    ] = None
    assigned: Annotated[
        Optional[NodeConfigSource],
        Field(
            description="Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned."
        ),
    ] = None
    error: Annotated[
        Optional[str],
        Field(
            description="Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions."
        ),
    ] = None
    last_known_good: Annotated[
        Optional[NodeConfigSource],
        Field(
            alias="lastKnownGood",
            description="LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.",
        ),
    ] = None


class NodeDaemonEndpoints(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NodeDaemonEndpoints":
            return NodeDaemonEndpoints(**self._attrs)

        def kubelet_endpoint(
            self,
            value_or_callback: Union[
                Optional[DaemonEndpoint],
                Callable[[Type[DaemonEndpoint]], DaemonEndpoint],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(DaemonEndpoint)
            return self._set("kubelet_endpoint", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    kubelet_endpoint: Annotated[
        Optional[DaemonEndpoint],
        Field(
            alias="kubeletEndpoint",
            description="Endpoint on which Kubelet is listening.",
        ),
    ] = None


class NodeFeatures(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NodeFeatures":
            return NodeFeatures(**self._attrs)

        def supplemental_groups_policy(self, value: Optional[bool]) -> Self:
            return self._set("supplemental_groups_policy", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    supplemental_groups_policy: Annotated[
        Optional[bool],
        Field(
            alias="supplementalGroupsPolicy",
            description="SupplementalGroupsPolicy is set to true if the runtime supports SupplementalGroupsPolicy and ContainerUser.",
        ),
    ] = None


class NodeRuntimeHandlerFeatures(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NodeRuntimeHandlerFeatures":
            return NodeRuntimeHandlerFeatures(**self._attrs)

        def recursive_read_only_mounts(self, value: Optional[bool]) -> Self:
            return self._set("recursive_read_only_mounts", value)

        def user_namespaces(self, value: Optional[bool]) -> Self:
            return self._set("user_namespaces", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    recursive_read_only_mounts: Annotated[
        Optional[bool],
        Field(
            alias="recursiveReadOnlyMounts",
            description="RecursiveReadOnlyMounts is set to true if the runtime handler supports RecursiveReadOnlyMounts.",
        ),
    ] = None
    user_namespaces: Annotated[
        Optional[bool],
        Field(
            alias="userNamespaces",
            description="UserNamespaces is set to true if the runtime handler supports UserNamespaces, including for volumes.",
        ),
    ] = None


class NodeSelectorRequirement(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NodeSelectorRequirement":
            return NodeSelectorRequirement(**self._attrs)

        def key(self, value: str) -> Self:
            return self._set("key", value)

        def operator(self, value: str) -> Self:
            return self._set("operator", value)

        def values(self, value: Optional[List[str]]) -> Self:
            return self._set("values", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    key: Annotated[str, Field(description="The label key that the selector applies to.")]
    operator: Annotated[
        str,
        Field(
            description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
        ),
    ]
    values: Annotated[
        Optional[List[str]],
        Field(
            description="An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
        ),
    ] = None


class NodeSelectorTerm(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NodeSelectorTerm":
            return NodeSelectorTerm(**self._attrs)

        def match_expressions(
            self,
            value_or_callback: Union[
                Optional[List[NodeSelectorRequirement]],
                Callable[[Type[NodeSelectorRequirement]], List[NodeSelectorRequirement]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeSelectorRequirement)
            return self._set("match_expressions", value)

        def match_fields(
            self,
            value_or_callback: Union[
                Optional[List[NodeSelectorRequirement]],
                Callable[[Type[NodeSelectorRequirement]], List[NodeSelectorRequirement]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeSelectorRequirement)
            return self._set("match_fields", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    match_expressions: Annotated[
        Optional[List[NodeSelectorRequirement]],
        Field(
            alias="matchExpressions",
            description="A list of node selector requirements by node's labels.",
        ),
    ] = None
    match_fields: Annotated[
        Optional[List[NodeSelectorRequirement]],
        Field(
            alias="matchFields",
            description="A list of node selector requirements by node's fields.",
        ),
    ] = None


class NodeSystemInfo(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NodeSystemInfo":
            return NodeSystemInfo(**self._attrs)

        def architecture(self, value: str) -> Self:
            return self._set("architecture", value)

        def boot_id(self, value: str) -> Self:
            return self._set("boot_id", value)

        def container_runtime_version(self, value: str) -> Self:
            return self._set("container_runtime_version", value)

        def kernel_version(self, value: str) -> Self:
            return self._set("kernel_version", value)

        def kube_proxy_version(self, value: str) -> Self:
            return self._set("kube_proxy_version", value)

        def kubelet_version(self, value: str) -> Self:
            return self._set("kubelet_version", value)

        def machine_id(self, value: str) -> Self:
            return self._set("machine_id", value)

        def operating_system(self, value: str) -> Self:
            return self._set("operating_system", value)

        def os_image(self, value: str) -> Self:
            return self._set("os_image", value)

        def system_uuid(self, value: str) -> Self:
            return self._set("system_uuid", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    architecture: Annotated[str, Field(description="The Architecture reported by the node")]
    boot_id: Annotated[str, Field(alias="bootID", description="Boot ID reported by the node.")]
    container_runtime_version: Annotated[
        str,
        Field(
            alias="containerRuntimeVersion",
            description="ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).",
        ),
    ]
    kernel_version: Annotated[
        str,
        Field(
            alias="kernelVersion",
            description="Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).",
        ),
    ]
    kube_proxy_version: Annotated[
        str,
        Field(
            alias="kubeProxyVersion",
            description="Deprecated: KubeProxy Version reported by the node.",
        ),
    ]
    kubelet_version: Annotated[
        str,
        Field(alias="kubeletVersion", description="Kubelet Version reported by the node."),
    ]
    machine_id: Annotated[
        str,
        Field(
            alias="machineID",
            description="MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html",
        ),
    ]
    operating_system: Annotated[
        str,
        Field(
            alias="operatingSystem",
            description="The Operating System reported by the node",
        ),
    ]
    os_image: Annotated[
        str,
        Field(
            alias="osImage",
            description="OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).",
        ),
    ]
    system_uuid: Annotated[
        str,
        Field(
            alias="systemUUID",
            description="SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid",
        ),
    ]


class ObjectFieldSelector(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ObjectFieldSelector":
            return ObjectFieldSelector(**self._attrs)

        def api_version(self, value: Optional[str]) -> Self:
            return self._set("api_version", value)

        def field_path(self, value: str) -> Self:
            return self._set("field_path", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[str],
        Field(
            alias="apiVersion",
            description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
        ),
    ] = None
    field_path: Annotated[
        str,
        Field(
            alias="fieldPath",
            description="Path of the field to select in the specified API version.",
        ),
    ]


class ObjectReference(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ObjectReference":
            return ObjectReference(**self._attrs)

        def api_version(self, value: Optional[str]) -> Self:
            return self._set("api_version", value)

        def field_path(self, value: Optional[str]) -> Self:
            return self._set("field_path", value)

        def kind(self, value: Optional[str]) -> Self:
            return self._set("kind", value)

        def name(self, value: Optional[str]) -> Self:
            return self._set("name", value)

        def namespace(self, value: Optional[str]) -> Self:
            return self._set("namespace", value)

        def resource_version(self, value: Optional[str]) -> Self:
            return self._set("resource_version", value)

        def uid(self, value: Optional[str]) -> Self:
            return self._set("uid", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[str],
        Field(alias="apiVersion", description="API version of the referent."),
    ] = None
    field_path: Annotated[
        Optional[str],
        Field(
            alias="fieldPath",
            description='If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.',
        ),
    ] = None
    kind: Annotated[
        Optional[str],
        Field(
            description="Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = None
    name: Annotated[
        Optional[str],
        Field(
            description="Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        ),
    ] = None
    namespace: Annotated[
        Optional[str],
        Field(
            description="Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
        ),
    ] = None
    resource_version: Annotated[
        Optional[str],
        Field(
            alias="resourceVersion",
            description="Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
        ),
    ] = None
    uid: Annotated[
        Optional[str],
        Field(
            description="UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
        ),
    ] = None


class PersistentVolumeClaimVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PersistentVolumeClaimVolumeSource":
            return PersistentVolumeClaimVolumeSource(**self._attrs)

        def claim_name(self, value: str) -> Self:
            return self._set("claim_name", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    claim_name: Annotated[
        str,
        Field(
            alias="claimName",
            description="claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
        ),
    ]
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly Will force the ReadOnly setting in VolumeMounts. Default false.",
        ),
    ] = None


class PhotonPersistentDiskVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PhotonPersistentDiskVolumeSource":
            return PhotonPersistentDiskVolumeSource(**self._attrs)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def pd_id(self, value: str) -> Self:
            return self._set("pd_id", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
        ),
    ] = None
    pd_id: Annotated[
        str,
        Field(
            alias="pdID",
            description="pdID is the ID that identifies Photon Controller persistent disk",
        ),
    ]


class PodDNSConfigOption(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PodDNSConfigOption":
            return PodDNSConfigOption(**self._attrs)

        def name(self, value: Optional[str]) -> Self:
            return self._set("name", value)

        def value(self, value: Optional[str]) -> Self:
            return self._set("value", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    name: Annotated[Optional[str], Field(description="Required.")] = None
    value: Optional[str] = None


class PodIP(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PodIP":
            return PodIP(**self._attrs)

        def ip(self, value: str) -> Self:
            return self._set("ip", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    ip: Annotated[str, Field(description="IP is the IP address assigned to the pod")]


class PodOS(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PodOS":
            return PodOS(**self._attrs)

        def name(self, value: str) -> Self:
            return self._set("name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    name: Annotated[
        str,
        Field(
            description="Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null"
        ),
    ]


class PodReadinessGate(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PodReadinessGate":
            return PodReadinessGate(**self._attrs)

        def condition_type(self, value: str) -> Self:
            return self._set("condition_type", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    condition_type: Annotated[
        str,
        Field(
            alias="conditionType",
            description="ConditionType refers to a condition in the pod's condition list with matching type.",
        ),
    ]


class PodResourceClaim(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PodResourceClaim":
            return PodResourceClaim(**self._attrs)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def resource_claim_name(self, value: Optional[str]) -> Self:
            return self._set("resource_claim_name", value)

        def resource_claim_template_name(self, value: Optional[str]) -> Self:
            return self._set("resource_claim_template_name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    name: Annotated[
        str,
        Field(
            description="Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL."
        ),
    ]
    resource_claim_name: Annotated[
        Optional[str],
        Field(
            alias="resourceClaimName",
            description="ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.\n\nExactly one of ResourceClaimName and ResourceClaimTemplateName must be set.",
        ),
    ] = None
    resource_claim_template_name: Annotated[
        Optional[str],
        Field(
            alias="resourceClaimTemplateName",
            description="ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.\n\nThe template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.\n\nThis field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.\n\nExactly one of ResourceClaimName and ResourceClaimTemplateName must be set.",
        ),
    ] = None


class PodResourceClaimStatus(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PodResourceClaimStatus":
            return PodResourceClaimStatus(**self._attrs)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def resource_claim_name(self, value: Optional[str]) -> Self:
            return self._set("resource_claim_name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    name: Annotated[
        str,
        Field(
            description="Name uniquely identifies this resource claim inside the pod. This must match the name of an entry in pod.spec.resourceClaims, which implies that the string must be a DNS_LABEL."
        ),
    ]
    resource_claim_name: Annotated[
        Optional[str],
        Field(
            alias="resourceClaimName",
            description="ResourceClaimName is the name of the ResourceClaim that was generated for the Pod in the namespace of the Pod. If this is unset, then generating a ResourceClaim was not necessary. The pod.spec.resourceClaims entry can be ignored in this case.",
        ),
    ] = None


class PodSchedulingGate(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PodSchedulingGate":
            return PodSchedulingGate(**self._attrs)

        def name(self, value: str) -> Self:
            return self._set("name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    name: Annotated[
        str,
        Field(
            description="Name of the scheduling gate. Each scheduling gate must have a unique name field."
        ),
    ]


class PortStatus(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PortStatus":
            return PortStatus(**self._attrs)

        def error(self, value: Optional[str]) -> Self:
            return self._set("error", value)

        def port(self, value: int) -> Self:
            return self._set("port", value)

        def protocol(self, value: str) -> Self:
            return self._set("protocol", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    error: Annotated[
        Optional[str],
        Field(
            description="Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase."
        ),
    ] = None
    port: Annotated[
        int,
        Field(
            description="Port is the port number of the service port of which status is recorded here"
        ),
    ]
    protocol: Annotated[
        str,
        Field(
            description='Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"'
        ),
    ]


class PortworxVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PortworxVolumeSource":
            return PortworxVolumeSource(**self._attrs)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def volume_id(self, value: str) -> Self:
            return self._set("volume_id", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.',
        ),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
        ),
    ] = None
    volume_id: Annotated[
        str,
        Field(
            alias="volumeID",
            description="volumeID uniquely identifies a Portworx volume",
        ),
    ]


class PreferredSchedulingTerm(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PreferredSchedulingTerm":
            return PreferredSchedulingTerm(**self._attrs)

        def preference(
            self,
            value_or_callback: Union[
                NodeSelectorTerm, Callable[[Type[NodeSelectorTerm]], NodeSelectorTerm]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeSelectorTerm)
            return self._set("preference", value)

        def weight(self, value: int) -> Self:
            return self._set("weight", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    preference: Annotated[
        NodeSelectorTerm,
        Field(description="A node selector term, associated with the corresponding weight."),
    ]
    weight: Annotated[
        int,
        Field(
            description="Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100."
        ),
    ]


class QuobyteVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "QuobyteVolumeSource":
            return QuobyteVolumeSource(**self._attrs)

        def group(self, value: Optional[str]) -> Self:
            return self._set("group", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def registry(self, value: str) -> Self:
            return self._set("registry", value)

        def tenant(self, value: Optional[str]) -> Self:
            return self._set("tenant", value)

        def user(self, value: Optional[str]) -> Self:
            return self._set("user", value)

        def volume(self, value: str) -> Self:
            return self._set("volume", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    group: Annotated[
        Optional[str],
        Field(description="group to map volume access to Default is no group"),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
        ),
    ] = None
    registry: Annotated[
        str,
        Field(
            description="registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes"
        ),
    ]
    tenant: Annotated[
        Optional[str],
        Field(
            description="tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin"
        ),
    ] = None
    user: Annotated[
        Optional[str],
        Field(description="user to map volume access to Defaults to serivceaccount user"),
    ] = None
    volume: Annotated[
        str,
        Field(
            description="volume is a string that references an already created Quobyte volume by name."
        ),
    ]


class RBDVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "RBDVolumeSource":
            return RBDVolumeSource(**self._attrs)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def image(self, value: str) -> Self:
            return self._set("image", value)

        def keyring(self, value: Optional[str]) -> Self:
            return self._set("keyring", value)

        def monitors(self, value: List[str]) -> Self:
            return self._set("monitors", value)

        def pool(self, value: Optional[str]) -> Self:
            return self._set("pool", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def secret_ref(
            self,
            value_or_callback: Union[
                Optional[LocalObjectReference],
                Callable[[Type[LocalObjectReference]], LocalObjectReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LocalObjectReference)
            return self._set("secret_ref", value)

        def user(self, value: Optional[str]) -> Self:
            return self._set("user", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd',
        ),
    ] = None
    image: Annotated[
        str,
        Field(
            description="image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        ),
    ]
    keyring: Annotated[
        Optional[str],
        Field(
            description="keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        ),
    ] = None
    monitors: Annotated[
        List[str],
        Field(
            description="monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        ),
    ]
    pool: Annotated[
        Optional[str],
        Field(
            description="pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        ),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
        ),
    ] = None
    secret_ref: Annotated[
        Optional[LocalObjectReference],
        Field(
            alias="secretRef",
            description="secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
        ),
    ] = None
    user: Annotated[
        Optional[str],
        Field(
            description="user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        ),
    ] = None


class ResourceClaim(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ResourceClaim":
            return ResourceClaim(**self._attrs)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def request(self, value: Optional[str]) -> Self:
            return self._set("request", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    name: Annotated[
        str,
        Field(
            description="Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container."
        ),
    ]
    request: Annotated[
        Optional[str],
        Field(
            description="Request is the name chosen for a request in the referenced claim. If empty, everything from the claim is made available, otherwise only the result of this request."
        ),
    ] = None


class ResourceHealth(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ResourceHealth":
            return ResourceHealth(**self._attrs)

        def health(self, value: Optional[str]) -> Self:
            return self._set("health", value)

        def resource_id(self, value: str) -> Self:
            return self._set("resource_id", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    health: Annotated[
        Optional[str],
        Field(
            description="Health of the resource. can be one of:\n - Healthy: operates as normal\n - Unhealthy: reported unhealthy. We consider this a temporary health issue\n              since we do not have a mechanism today to distinguish\n              temporary and permanent issues.\n - Unknown: The status cannot be determined.\n            For example, Device Plugin got unregistered and hasn't been re-registered since.\n\nIn future we may want to introduce the PermanentlyUnhealthy Status."
        ),
    ] = None
    resource_id: Annotated[
        str,
        Field(
            alias="resourceID",
            description="ResourceID is the unique identifier of the resource. See the ResourceID type for more information.",
        ),
    ]


class ResourceStatus(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ResourceStatus":
            return ResourceStatus(**self._attrs)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def resources(
            self,
            value_or_callback: Union[
                Optional[List[ResourceHealth]],
                Callable[[Type[ResourceHealth]], List[ResourceHealth]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ResourceHealth)
            return self._set("resources", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    name: Annotated[
        str,
        Field(
            description="Name of the resource. Must be unique within the pod and match one of the resources from the pod spec."
        ),
    ]
    resources: Annotated[
        Optional[List[ResourceHealth]],
        Field(
            description="List of unique Resources health. Each element in the list contains an unique resource ID and resource health. At a minimum, ResourceID must uniquely identify the Resource allocated to the Pod on the Node for the lifetime of a Pod. See ResourceID type for it's definition."
        ),
    ] = None


class SELinuxOptions(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "SELinuxOptions":
            return SELinuxOptions(**self._attrs)

        def level(self, value: Optional[str]) -> Self:
            return self._set("level", value)

        def role(self, value: Optional[str]) -> Self:
            return self._set("role", value)

        def type(self, value: Optional[str]) -> Self:
            return self._set("type", value)

        def user(self, value: Optional[str]) -> Self:
            return self._set("user", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    level: Annotated[
        Optional[str],
        Field(description="Level is SELinux level label that applies to the container."),
    ] = None
    role: Annotated[
        Optional[str],
        Field(description="Role is a SELinux role label that applies to the container."),
    ] = None
    type: Annotated[
        Optional[str],
        Field(description="Type is a SELinux type label that applies to the container."),
    ] = None
    user: Annotated[
        Optional[str],
        Field(description="User is a SELinux user label that applies to the container."),
    ] = None


class ScaleIOVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ScaleIOVolumeSource":
            return ScaleIOVolumeSource(**self._attrs)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def gateway(self, value: str) -> Self:
            return self._set("gateway", value)

        def protection_domain(self, value: Optional[str]) -> Self:
            return self._set("protection_domain", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def secret_ref(
            self,
            value_or_callback: Union[
                LocalObjectReference,
                Callable[[Type[LocalObjectReference]], LocalObjectReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LocalObjectReference)
            return self._set("secret_ref", value)

        def ssl_enabled(self, value: Optional[bool]) -> Self:
            return self._set("ssl_enabled", value)

        def storage_mode(self, value: Optional[str]) -> Self:
            return self._set("storage_mode", value)

        def storage_pool(self, value: Optional[str]) -> Self:
            return self._set("storage_pool", value)

        def system(self, value: str) -> Self:
            return self._set("system", value)

        def volume_name(self, value: Optional[str]) -> Self:
            return self._set("volume_name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".',
        ),
    ] = None
    gateway: Annotated[
        str,
        Field(description="gateway is the host address of the ScaleIO API Gateway."),
    ]
    protection_domain: Annotated[
        Optional[str],
        Field(
            alias="protectionDomain",
            description="protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.",
        ),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
        ),
    ] = None
    secret_ref: Annotated[
        LocalObjectReference,
        Field(
            alias="secretRef",
            description="secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.",
        ),
    ]
    ssl_enabled: Annotated[
        Optional[bool],
        Field(
            alias="sslEnabled",
            description="sslEnabled Flag enable/disable SSL communication with Gateway, default false",
        ),
    ] = None
    storage_mode: Annotated[
        Optional[str],
        Field(
            alias="storageMode",
            description="storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
        ),
    ] = None
    storage_pool: Annotated[
        Optional[str],
        Field(
            alias="storagePool",
            description="storagePool is the ScaleIO Storage Pool associated with the protection domain.",
        ),
    ] = None
    system: Annotated[
        str,
        Field(description="system is the name of the storage system as configured in ScaleIO."),
    ]
    volume_name: Annotated[
        Optional[str],
        Field(
            alias="volumeName",
            description="volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.",
        ),
    ] = None


class ScopedResourceSelectorRequirement(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ScopedResourceSelectorRequirement":
            return ScopedResourceSelectorRequirement(**self._attrs)

        def operator(self, value: str) -> Self:
            return self._set("operator", value)

        def scope_name(self, value: str) -> Self:
            return self._set("scope_name", value)

        def values(self, value: Optional[List[str]]) -> Self:
            return self._set("values", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    operator: Annotated[
        str,
        Field(
            description="Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist."
        ),
    ]
    scope_name: Annotated[
        str,
        Field(
            alias="scopeName",
            description="The name of the scope that the selector applies to.",
        ),
    ]
    values: Annotated[
        Optional[List[str]],
        Field(
            description="An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
        ),
    ] = None


class SeccompProfile(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "SeccompProfile":
            return SeccompProfile(**self._attrs)

        def localhost_profile(self, value: Optional[str]) -> Self:
            return self._set("localhost_profile", value)

        def type(self, value: str) -> Self:
            return self._set("type", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    localhost_profile: Annotated[
        Optional[str],
        Field(
            alias="localhostProfile",
            description='localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet\'s configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.',
        ),
    ] = None
    type: Annotated[
        str,
        Field(
            description="type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied."
        ),
    ]


class SecretEnvSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "SecretEnvSource":
            return SecretEnvSource(**self._attrs)

        def name(self, value: Optional[str]) -> Self:
            return self._set("name", value)

        def optional(self, value: Optional[bool]) -> Self:
            return self._set("optional", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    name: Annotated[
        Optional[str],
        Field(
            description="Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        ),
    ] = None
    optional: Annotated[
        Optional[bool], Field(description="Specify whether the Secret must be defined")
    ] = None


class SecretKeySelector(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "SecretKeySelector":
            return SecretKeySelector(**self._attrs)

        def key(self, value: str) -> Self:
            return self._set("key", value)

        def name(self, value: Optional[str]) -> Self:
            return self._set("name", value)

        def optional(self, value: Optional[bool]) -> Self:
            return self._set("optional", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    key: Annotated[
        str,
        Field(description="The key of the secret to select from.  Must be a valid secret key."),
    ]
    name: Annotated[
        Optional[str],
        Field(
            description="Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        ),
    ] = None
    optional: Annotated[
        Optional[bool],
        Field(description="Specify whether the Secret or its key must be defined"),
    ] = None


class SecretProjection(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "SecretProjection":
            return SecretProjection(**self._attrs)

        def items(
            self,
            value_or_callback: Union[
                Optional[List[KeyToPath]], Callable[[Type[KeyToPath]], List[KeyToPath]]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(KeyToPath)
            return self._set("items", value)

        def name(self, value: Optional[str]) -> Self:
            return self._set("name", value)

        def optional(self, value: Optional[bool]) -> Self:
            return self._set("optional", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    items: Annotated[
        Optional[List[KeyToPath]],
        Field(
            description="items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
        ),
    ] = None
    name: Annotated[
        Optional[str],
        Field(
            description="Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        ),
    ] = None
    optional: Annotated[
        Optional[bool],
        Field(description="optional field specify whether the Secret or its key must be defined"),
    ] = None


class SecretReference(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "SecretReference":
            return SecretReference(**self._attrs)

        def name(self, value: Optional[str]) -> Self:
            return self._set("name", value)

        def namespace(self, value: Optional[str]) -> Self:
            return self._set("namespace", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    name: Annotated[
        Optional[str],
        Field(description="name is unique within a namespace to reference a secret resource."),
    ] = None
    namespace: Annotated[
        Optional[str],
        Field(
            description="namespace defines the space within which the secret name must be unique."
        ),
    ] = None


class SecretVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "SecretVolumeSource":
            return SecretVolumeSource(**self._attrs)

        def default_mode(self, value: Optional[int]) -> Self:
            return self._set("default_mode", value)

        def items(
            self,
            value_or_callback: Union[
                Optional[List[KeyToPath]], Callable[[Type[KeyToPath]], List[KeyToPath]]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(KeyToPath)
            return self._set("items", value)

        def optional(self, value: Optional[bool]) -> Self:
            return self._set("optional", value)

        def secret_name(self, value: Optional[str]) -> Self:
            return self._set("secret_name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    default_mode: Annotated[
        Optional[int],
        Field(
            alias="defaultMode",
            description="defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
        ),
    ] = None
    items: Annotated[
        Optional[List[KeyToPath]],
        Field(
            description="items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
        ),
    ] = None
    optional: Annotated[
        Optional[bool],
        Field(description="optional field specify whether the Secret or its keys must be defined"),
    ] = None
    secret_name: Annotated[
        Optional[str],
        Field(
            alias="secretName",
            description="secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
        ),
    ] = None


class ServiceAccountTokenProjection(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ServiceAccountTokenProjection":
            return ServiceAccountTokenProjection(**self._attrs)

        def audience(self, value: Optional[str]) -> Self:
            return self._set("audience", value)

        def expiration_seconds(self, value: Optional[int]) -> Self:
            return self._set("expiration_seconds", value)

        def path(self, value: str) -> Self:
            return self._set("path", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    audience: Annotated[
        Optional[str],
        Field(
            description="audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver."
        ),
    ] = None
    expiration_seconds: Annotated[
        Optional[int],
        Field(
            alias="expirationSeconds",
            description="expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
        ),
    ] = None
    path: Annotated[
        str,
        Field(
            description="path is the path relative to the mount point of the file to project the token into."
        ),
    ]


class SessionAffinityConfig(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "SessionAffinityConfig":
            return SessionAffinityConfig(**self._attrs)

        def client_ip(
            self,
            value_or_callback: Union[
                Optional[ClientIPConfig],
                Callable[[Type[ClientIPConfig]], ClientIPConfig],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ClientIPConfig)
            return self._set("client_ip", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    client_ip: Annotated[
        Optional[ClientIPConfig],
        Field(
            alias="clientIP",
            description="clientIP contains the configurations of Client IP based session affinity.",
        ),
    ] = None


class SleepAction(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "SleepAction":
            return SleepAction(**self._attrs)

        def seconds(self, value: int) -> Self:
            return self._set("seconds", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    seconds: Annotated[int, Field(description="Seconds is the number of seconds to sleep.")]


class StorageOSPersistentVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "StorageOSPersistentVolumeSource":
            return StorageOSPersistentVolumeSource(**self._attrs)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def secret_ref(
            self,
            value_or_callback: Union[
                Optional[ObjectReference],
                Callable[[Type[ObjectReference]], ObjectReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ObjectReference)
            return self._set("secret_ref", value)

        def volume_name(self, value: Optional[str]) -> Self:
            return self._set("volume_name", value)

        def volume_namespace(self, value: Optional[str]) -> Self:
            return self._set("volume_namespace", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
        ),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
        ),
    ] = None
    secret_ref: Annotated[
        Optional[ObjectReference],
        Field(
            alias="secretRef",
            description="secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
        ),
    ] = None
    volume_name: Annotated[
        Optional[str],
        Field(
            alias="volumeName",
            description="volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
        ),
    ] = None
    volume_namespace: Annotated[
        Optional[str],
        Field(
            alias="volumeNamespace",
            description='volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod\'s namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.',
        ),
    ] = None


class StorageOSVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "StorageOSVolumeSource":
            return StorageOSVolumeSource(**self._attrs)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def secret_ref(
            self,
            value_or_callback: Union[
                Optional[LocalObjectReference],
                Callable[[Type[LocalObjectReference]], LocalObjectReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LocalObjectReference)
            return self._set("secret_ref", value)

        def volume_name(self, value: Optional[str]) -> Self:
            return self._set("volume_name", value)

        def volume_namespace(self, value: Optional[str]) -> Self:
            return self._set("volume_namespace", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
        ),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
        ),
    ] = None
    secret_ref: Annotated[
        Optional[LocalObjectReference],
        Field(
            alias="secretRef",
            description="secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
        ),
    ] = None
    volume_name: Annotated[
        Optional[str],
        Field(
            alias="volumeName",
            description="volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
        ),
    ] = None
    volume_namespace: Annotated[
        Optional[str],
        Field(
            alias="volumeNamespace",
            description='volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod\'s namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.',
        ),
    ] = None


class Sysctl(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "Sysctl":
            return Sysctl(**self._attrs)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def value(self, value: str) -> Self:
            return self._set("value", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    name: Annotated[str, Field(description="Name of a property to set")]
    value: Annotated[str, Field(description="Value of a property to set")]


class Toleration(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "Toleration":
            return Toleration(**self._attrs)

        def effect(self, value: Optional[str]) -> Self:
            return self._set("effect", value)

        def key(self, value: Optional[str]) -> Self:
            return self._set("key", value)

        def operator(self, value: Optional[str]) -> Self:
            return self._set("operator", value)

        def toleration_seconds(self, value: Optional[int]) -> Self:
            return self._set("toleration_seconds", value)

        def value(self, value: Optional[str]) -> Self:
            return self._set("value", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    effect: Annotated[
        Optional[str],
        Field(
            description="Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."
        ),
    ] = None
    key: Annotated[
        Optional[str],
        Field(
            description="Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."
        ),
    ] = None
    operator: Annotated[
        Optional[str],
        Field(
            description="Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category."
        ),
    ] = None
    toleration_seconds: Annotated[
        Optional[int],
        Field(
            alias="tolerationSeconds",
            description="TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
        ),
    ] = None
    value: Annotated[
        Optional[str],
        Field(
            description="Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."
        ),
    ] = None


class TopologySelectorLabelRequirement(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "TopologySelectorLabelRequirement":
            return TopologySelectorLabelRequirement(**self._attrs)

        def key(self, value: str) -> Self:
            return self._set("key", value)

        def values(self, value: List[str]) -> Self:
            return self._set("values", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    key: Annotated[str, Field(description="The label key that the selector applies to.")]
    values: Annotated[
        List[str],
        Field(
            description="An array of string values. One value must match the label to be selected. Each entry in Values is ORed."
        ),
    ]


class TopologySelectorTerm(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "TopologySelectorTerm":
            return TopologySelectorTerm(**self._attrs)

        def match_label_expressions(
            self,
            value_or_callback: Union[
                Optional[List[TopologySelectorLabelRequirement]],
                Callable[
                    [Type[TopologySelectorLabelRequirement]],
                    List[TopologySelectorLabelRequirement],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(TopologySelectorLabelRequirement)
            return self._set("match_label_expressions", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    match_label_expressions: Annotated[
        Optional[List[TopologySelectorLabelRequirement]],
        Field(
            alias="matchLabelExpressions",
            description="A list of topology selector requirements by labels.",
        ),
    ] = None


class TypedLocalObjectReference(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "TypedLocalObjectReference":
            return TypedLocalObjectReference(**self._attrs)

        def api_group(self, value: Optional[str]) -> Self:
            return self._set("api_group", value)

        def kind(self, value: str) -> Self:
            return self._set("kind", value)

        def name(self, value: str) -> Self:
            return self._set("name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_group: Annotated[
        Optional[str],
        Field(
            alias="apiGroup",
            description="APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
        ),
    ] = None
    kind: Annotated[str, Field(description="Kind is the type of resource being referenced")]
    name: Annotated[str, Field(description="Name is the name of resource being referenced")]


class TypedObjectReference(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "TypedObjectReference":
            return TypedObjectReference(**self._attrs)

        def api_group(self, value: Optional[str]) -> Self:
            return self._set("api_group", value)

        def kind(self, value: str) -> Self:
            return self._set("kind", value)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def namespace(self, value: Optional[str]) -> Self:
            return self._set("namespace", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_group: Annotated[
        Optional[str],
        Field(
            alias="apiGroup",
            description="APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
        ),
    ] = None
    kind: Annotated[str, Field(description="Kind is the type of resource being referenced")]
    name: Annotated[str, Field(description="Name is the name of resource being referenced")]
    namespace: Annotated[
        Optional[str],
        Field(
            description="Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled."
        ),
    ] = None


class VolumeDevice(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "VolumeDevice":
            return VolumeDevice(**self._attrs)

        def device_path(self, value: str) -> Self:
            return self._set("device_path", value)

        def name(self, value: str) -> Self:
            return self._set("name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    device_path: Annotated[
        str,
        Field(
            alias="devicePath",
            description="devicePath is the path inside of the container that the device will be mapped to.",
        ),
    ]
    name: Annotated[
        str,
        Field(description="name must match the name of a persistentVolumeClaim in the pod"),
    ]


class VolumeMount(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "VolumeMount":
            return VolumeMount(**self._attrs)

        def mount_path(self, value: str) -> Self:
            return self._set("mount_path", value)

        def mount_propagation(self, value: Optional[str]) -> Self:
            return self._set("mount_propagation", value)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def recursive_read_only(self, value: Optional[str]) -> Self:
            return self._set("recursive_read_only", value)

        def sub_path(self, value: Optional[str]) -> Self:
            return self._set("sub_path", value)

        def sub_path_expr(self, value: Optional[str]) -> Self:
            return self._set("sub_path_expr", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    mount_path: Annotated[
        str,
        Field(
            alias="mountPath",
            description="Path within the container at which the volume should be mounted.  Must not contain ':'.",
        ),
    ]
    mount_propagation: Annotated[
        Optional[str],
        Field(
            alias="mountPropagation",
            description="mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None).",
        ),
    ] = None
    name: Annotated[str, Field(description="This must match the Name of a Volume.")]
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
        ),
    ] = None
    recursive_read_only: Annotated[
        Optional[str],
        Field(
            alias="recursiveReadOnly",
            description="RecursiveReadOnly specifies whether read-only mounts should be handled recursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only.  If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime.  If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.",
        ),
    ] = None
    sub_path: Annotated[
        Optional[str],
        Field(
            alias="subPath",
            description="Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
        ),
    ] = None
    sub_path_expr: Annotated[
        Optional[str],
        Field(
            alias="subPathExpr",
            description="Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
        ),
    ] = None


class VolumeMountStatus(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "VolumeMountStatus":
            return VolumeMountStatus(**self._attrs)

        def mount_path(self, value: str) -> Self:
            return self._set("mount_path", value)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def recursive_read_only(self, value: Optional[str]) -> Self:
            return self._set("recursive_read_only", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    mount_path: Annotated[
        str,
        Field(
            alias="mountPath",
            description="MountPath corresponds to the original VolumeMount.",
        ),
    ]
    name: Annotated[
        str,
        Field(description="Name corresponds to the name of the original VolumeMount."),
    ]
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="ReadOnly corresponds to the original VolumeMount.",
        ),
    ] = None
    recursive_read_only: Annotated[
        Optional[str],
        Field(
            alias="recursiveReadOnly",
            description="RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts). An IfPossible value in the original VolumeMount must be translated to Disabled or Enabled, depending on the mount result.",
        ),
    ] = None


class VsphereVirtualDiskVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "VsphereVirtualDiskVolumeSource":
            return VsphereVirtualDiskVolumeSource(**self._attrs)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def storage_policy_id(self, value: Optional[str]) -> Self:
            return self._set("storage_policy_id", value)

        def storage_policy_name(self, value: Optional[str]) -> Self:
            return self._set("storage_policy_name", value)

        def volume_path(self, value: str) -> Self:
            return self._set("volume_path", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
        ),
    ] = None
    storage_policy_id: Annotated[
        Optional[str],
        Field(
            alias="storagePolicyID",
            description="storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
        ),
    ] = None
    storage_policy_name: Annotated[
        Optional[str],
        Field(
            alias="storagePolicyName",
            description="storagePolicyName is the storage Policy Based Management (SPBM) profile name.",
        ),
    ] = None
    volume_path: Annotated[
        str,
        Field(
            alias="volumePath",
            description="volumePath is the path that identifies vSphere volume vmdk",
        ),
    ]


class WindowsSecurityContextOptions(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "WindowsSecurityContextOptions":
            return WindowsSecurityContextOptions(**self._attrs)

        def gmsa_credential_spec(self, value: Optional[str]) -> Self:
            return self._set("gmsa_credential_spec", value)

        def gmsa_credential_spec_name(self, value: Optional[str]) -> Self:
            return self._set("gmsa_credential_spec_name", value)

        def host_process(self, value: Optional[bool]) -> Self:
            return self._set("host_process", value)

        def run_as_user_name(self, value: Optional[str]) -> Self:
            return self._set("run_as_user_name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    gmsa_credential_spec: Annotated[
        Optional[str],
        Field(
            alias="gmsaCredentialSpec",
            description="GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
        ),
    ] = None
    gmsa_credential_spec_name: Annotated[
        Optional[str],
        Field(
            alias="gmsaCredentialSpecName",
            description="GMSACredentialSpecName is the name of the GMSA credential spec to use.",
        ),
    ] = None
    host_process: Annotated[
        Optional[bool],
        Field(
            alias="hostProcess",
            description="HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
        ),
    ] = None
    run_as_user_name: Annotated[
        Optional[str],
        Field(
            alias="runAsUserName",
            description="The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
        ),
    ] = None


class CSIPersistentVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "CSIPersistentVolumeSource":
            return CSIPersistentVolumeSource(**self._attrs)

        def controller_expand_secret_ref(
            self,
            value_or_callback: Union[
                Optional[SecretReference],
                Callable[[Type[SecretReference]], SecretReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SecretReference)
            return self._set("controller_expand_secret_ref", value)

        def controller_publish_secret_ref(
            self,
            value_or_callback: Union[
                Optional[SecretReference],
                Callable[[Type[SecretReference]], SecretReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SecretReference)
            return self._set("controller_publish_secret_ref", value)

        def driver(self, value: str) -> Self:
            return self._set("driver", value)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def node_expand_secret_ref(
            self,
            value_or_callback: Union[
                Optional[SecretReference],
                Callable[[Type[SecretReference]], SecretReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SecretReference)
            return self._set("node_expand_secret_ref", value)

        def node_publish_secret_ref(
            self,
            value_or_callback: Union[
                Optional[SecretReference],
                Callable[[Type[SecretReference]], SecretReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SecretReference)
            return self._set("node_publish_secret_ref", value)

        def node_stage_secret_ref(
            self,
            value_or_callback: Union[
                Optional[SecretReference],
                Callable[[Type[SecretReference]], SecretReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SecretReference)
            return self._set("node_stage_secret_ref", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def volume_attributes(self, value: Optional[Dict[str, str]]) -> Self:
            return self._set("volume_attributes", value)

        def volume_handle(self, value: str) -> Self:
            return self._set("volume_handle", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    controller_expand_secret_ref: Annotated[
        Optional[SecretReference],
        Field(
            alias="controllerExpandSecretRef",
            description="controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
        ),
    ] = None
    controller_publish_secret_ref: Annotated[
        Optional[SecretReference],
        Field(
            alias="controllerPublishSecretRef",
            description="controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
        ),
    ] = None
    driver: Annotated[
        str,
        Field(description="driver is the name of the driver to use for this volume. Required."),
    ]
    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".',
        ),
    ] = None
    node_expand_secret_ref: Annotated[
        Optional[SecretReference],
        Field(
            alias="nodeExpandSecretRef",
            description="nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
        ),
    ] = None
    node_publish_secret_ref: Annotated[
        Optional[SecretReference],
        Field(
            alias="nodePublishSecretRef",
            description="nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
        ),
    ] = None
    node_stage_secret_ref: Annotated[
        Optional[SecretReference],
        Field(
            alias="nodeStageSecretRef",
            description="nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
        ),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).",
        ),
    ] = None
    volume_attributes: Annotated[
        Optional[Dict[str, str]],
        Field(
            alias="volumeAttributes",
            description="volumeAttributes of the volume to publish.",
        ),
    ] = None
    volume_handle: Annotated[
        str,
        Field(
            alias="volumeHandle",
            description="volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.",
        ),
    ]


class CSIVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "CSIVolumeSource":
            return CSIVolumeSource(**self._attrs)

        def driver(self, value: str) -> Self:
            return self._set("driver", value)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def node_publish_secret_ref(
            self,
            value_or_callback: Union[
                Optional[LocalObjectReference],
                Callable[[Type[LocalObjectReference]], LocalObjectReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LocalObjectReference)
            return self._set("node_publish_secret_ref", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def volume_attributes(self, value: Optional[Dict[str, str]]) -> Self:
            return self._set("volume_attributes", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    driver: Annotated[
        str,
        Field(
            description="driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster."
        ),
    ]
    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.',
        ),
    ] = None
    node_publish_secret_ref: Annotated[
        Optional[LocalObjectReference],
        Field(
            alias="nodePublishSecretRef",
            description="nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.",
        ),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).",
        ),
    ] = None
    volume_attributes: Annotated[
        Optional[Dict[str, str]],
        Field(
            alias="volumeAttributes",
            description="volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
        ),
    ] = None


class CephFSPersistentVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "CephFSPersistentVolumeSource":
            return CephFSPersistentVolumeSource(**self._attrs)

        def monitors(self, value: List[str]) -> Self:
            return self._set("monitors", value)

        def path(self, value: Optional[str]) -> Self:
            return self._set("path", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def secret_file(self, value: Optional[str]) -> Self:
            return self._set("secret_file", value)

        def secret_ref(
            self,
            value_or_callback: Union[
                Optional[SecretReference],
                Callable[[Type[SecretReference]], SecretReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SecretReference)
            return self._set("secret_ref", value)

        def user(self, value: Optional[str]) -> Self:
            return self._set("user", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    monitors: Annotated[
        List[str],
        Field(
            description="monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
        ),
    ]
    path: Annotated[
        Optional[str],
        Field(
            description="path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /"
        ),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
        ),
    ] = None
    secret_file: Annotated[
        Optional[str],
        Field(
            alias="secretFile",
            description="secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
        ),
    ] = None
    secret_ref: Annotated[
        Optional[SecretReference],
        Field(
            alias="secretRef",
            description="secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
        ),
    ] = None
    user: Annotated[
        Optional[str],
        Field(
            description="user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
        ),
    ] = None


class CephFSVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "CephFSVolumeSource":
            return CephFSVolumeSource(**self._attrs)

        def monitors(self, value: List[str]) -> Self:
            return self._set("monitors", value)

        def path(self, value: Optional[str]) -> Self:
            return self._set("path", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def secret_file(self, value: Optional[str]) -> Self:
            return self._set("secret_file", value)

        def secret_ref(
            self,
            value_or_callback: Union[
                Optional[LocalObjectReference],
                Callable[[Type[LocalObjectReference]], LocalObjectReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LocalObjectReference)
            return self._set("secret_ref", value)

        def user(self, value: Optional[str]) -> Self:
            return self._set("user", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    monitors: Annotated[
        List[str],
        Field(
            description="monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
        ),
    ]
    path: Annotated[
        Optional[str],
        Field(
            description="path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /"
        ),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
        ),
    ] = None
    secret_file: Annotated[
        Optional[str],
        Field(
            alias="secretFile",
            description="secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
        ),
    ] = None
    secret_ref: Annotated[
        Optional[LocalObjectReference],
        Field(
            alias="secretRef",
            description="secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
        ),
    ] = None
    user: Annotated[
        Optional[str],
        Field(
            description="user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
        ),
    ] = None


class CinderPersistentVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "CinderPersistentVolumeSource":
            return CinderPersistentVolumeSource(**self._attrs)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def secret_ref(
            self,
            value_or_callback: Union[
                Optional[SecretReference],
                Callable[[Type[SecretReference]], SecretReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SecretReference)
            return self._set("secret_ref", value)

        def volume_id(self, value: str) -> Self:
            return self._set("volume_id", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
        ),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
        ),
    ] = None
    secret_ref: Annotated[
        Optional[SecretReference],
        Field(
            alias="secretRef",
            description="secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.",
        ),
    ] = None
    volume_id: Annotated[
        str,
        Field(
            alias="volumeID",
            description="volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
        ),
    ]


class CinderVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "CinderVolumeSource":
            return CinderVolumeSource(**self._attrs)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def secret_ref(
            self,
            value_or_callback: Union[
                Optional[LocalObjectReference],
                Callable[[Type[LocalObjectReference]], LocalObjectReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LocalObjectReference)
            return self._set("secret_ref", value)

        def volume_id(self, value: str) -> Self:
            return self._set("volume_id", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
        ),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
        ),
    ] = None
    secret_ref: Annotated[
        Optional[LocalObjectReference],
        Field(
            alias="secretRef",
            description="secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.",
        ),
    ] = None
    volume_id: Annotated[
        str,
        Field(
            alias="volumeID",
            description="volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
        ),
    ]


class ConfigMapProjection(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ConfigMapProjection":
            return ConfigMapProjection(**self._attrs)

        def items(
            self,
            value_or_callback: Union[
                Optional[List[KeyToPath]], Callable[[Type[KeyToPath]], List[KeyToPath]]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(KeyToPath)
            return self._set("items", value)

        def name(self, value: Optional[str]) -> Self:
            return self._set("name", value)

        def optional(self, value: Optional[bool]) -> Self:
            return self._set("optional", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    items: Annotated[
        Optional[List[KeyToPath]],
        Field(
            description="items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
        ),
    ] = None
    name: Annotated[
        Optional[str],
        Field(
            description="Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        ),
    ] = None
    optional: Annotated[
        Optional[bool],
        Field(description="optional specify whether the ConfigMap or its keys must be defined"),
    ] = None


class ConfigMapVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ConfigMapVolumeSource":
            return ConfigMapVolumeSource(**self._attrs)

        def default_mode(self, value: Optional[int]) -> Self:
            return self._set("default_mode", value)

        def items(
            self,
            value_or_callback: Union[
                Optional[List[KeyToPath]], Callable[[Type[KeyToPath]], List[KeyToPath]]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(KeyToPath)
            return self._set("items", value)

        def name(self, value: Optional[str]) -> Self:
            return self._set("name", value)

        def optional(self, value: Optional[bool]) -> Self:
            return self._set("optional", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    default_mode: Annotated[
        Optional[int],
        Field(
            alias="defaultMode",
            description="defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
        ),
    ] = None
    items: Annotated[
        Optional[List[KeyToPath]],
        Field(
            description="items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
        ),
    ] = None
    name: Annotated[
        Optional[str],
        Field(
            description="Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        ),
    ] = None
    optional: Annotated[
        Optional[bool],
        Field(description="optional specify whether the ConfigMap or its keys must be defined"),
    ] = None


class ContainerStateRunning(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ContainerStateRunning":
            return ContainerStateRunning(**self._attrs)

        def started_at(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Time],
                Callable[[Type[apimachinery.Time]], apimachinery.Time],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Time)
            return self._set("started_at", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    started_at: Annotated[
        Optional[apimachinery.Time],
        Field(
            alias="startedAt",
            description="Time at which the container was last (re-)started",
        ),
    ] = None


class ContainerStateTerminated(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ContainerStateTerminated":
            return ContainerStateTerminated(**self._attrs)

        def container_id(self, value: Optional[str]) -> Self:
            return self._set("container_id", value)

        def exit_code(self, value: int) -> Self:
            return self._set("exit_code", value)

        def finished_at(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Time],
                Callable[[Type[apimachinery.Time]], apimachinery.Time],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Time)
            return self._set("finished_at", value)

        def message(self, value: Optional[str]) -> Self:
            return self._set("message", value)

        def reason(self, value: Optional[str]) -> Self:
            return self._set("reason", value)

        def signal(self, value: Optional[int]) -> Self:
            return self._set("signal", value)

        def started_at(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Time],
                Callable[[Type[apimachinery.Time]], apimachinery.Time],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Time)
            return self._set("started_at", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    container_id: Annotated[
        Optional[str],
        Field(
            alias="containerID",
            description="Container's ID in the format '<type>://<container_id>'",
        ),
    ] = None
    exit_code: Annotated[
        int,
        Field(
            alias="exitCode",
            description="Exit status from the last termination of the container",
        ),
    ]
    finished_at: Annotated[
        Optional[apimachinery.Time],
        Field(
            alias="finishedAt",
            description="Time at which the container last terminated",
        ),
    ] = None
    message: Annotated[
        Optional[str],
        Field(description="Message regarding the last termination of the container"),
    ] = None
    reason: Annotated[
        Optional[str],
        Field(description="(brief) reason from the last termination of the container"),
    ] = None
    signal: Annotated[
        Optional[int],
        Field(description="Signal from the last termination of the container"),
    ] = None
    started_at: Annotated[
        Optional[apimachinery.Time],
        Field(
            alias="startedAt",
            description="Time at which previous execution of the container started",
        ),
    ] = None


class ContainerUser(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ContainerUser":
            return ContainerUser(**self._attrs)

        def linux(
            self,
            value_or_callback: Union[
                Optional[LinuxContainerUser],
                Callable[[Type[LinuxContainerUser]], LinuxContainerUser],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LinuxContainerUser)
            return self._set("linux", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    linux: Annotated[
        Optional[LinuxContainerUser],
        Field(
            description="Linux holds user identity information initially attached to the first process of the containers in Linux. Note that the actual running identity can be changed if the process has enough privilege to do so."
        ),
    ] = None


class EmptyDirVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "EmptyDirVolumeSource":
            return EmptyDirVolumeSource(**self._attrs)

        def medium(self, value: Optional[str]) -> Self:
            return self._set("medium", value)

        def size_limit(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Quantity],
                Callable[[Type[apimachinery.Quantity]], apimachinery.Quantity],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Quantity)
            return self._set("size_limit", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    medium: Annotated[
        Optional[str],
        Field(
            description='medium represents what type of storage medium should back this directory. The default is "" which means to use the node\'s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
        ),
    ] = None
    size_limit: Annotated[
        Optional[apimachinery.Quantity],
        Field(
            alias="sizeLimit",
            description="sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
        ),
    ] = None


class EndpointAddress(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "EndpointAddress":
            return EndpointAddress(**self._attrs)

        def hostname(self, value: Optional[str]) -> Self:
            return self._set("hostname", value)

        def ip(self, value: str) -> Self:
            return self._set("ip", value)

        def node_name(self, value: Optional[str]) -> Self:
            return self._set("node_name", value)

        def target_ref(
            self,
            value_or_callback: Union[
                Optional[ObjectReference],
                Callable[[Type[ObjectReference]], ObjectReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ObjectReference)
            return self._set("target_ref", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    hostname: Annotated[Optional[str], Field(description="The Hostname of this endpoint")] = None
    ip: Annotated[
        str,
        Field(
            description="The IP of this endpoint. May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or ff02::/16)."
        ),
    ]
    node_name: Annotated[
        Optional[str],
        Field(
            alias="nodeName",
            description="Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.",
        ),
    ] = None
    target_ref: Annotated[
        Optional[ObjectReference],
        Field(alias="targetRef", description="Reference to object providing the endpoint."),
    ] = None


class EndpointSubset(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "EndpointSubset":
            return EndpointSubset(**self._attrs)

        def addresses(
            self,
            value_or_callback: Union[
                Optional[List[EndpointAddress]],
                Callable[[Type[EndpointAddress]], List[EndpointAddress]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(EndpointAddress)
            return self._set("addresses", value)

        def not_ready_addresses(
            self,
            value_or_callback: Union[
                Optional[List[EndpointAddress]],
                Callable[[Type[EndpointAddress]], List[EndpointAddress]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(EndpointAddress)
            return self._set("not_ready_addresses", value)

        def ports(
            self,
            value_or_callback: Union[
                Optional[List[EndpointPort]],
                Callable[[Type[EndpointPort]], List[EndpointPort]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(EndpointPort)
            return self._set("ports", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    addresses: Annotated[
        Optional[List[EndpointAddress]],
        Field(
            description="IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize."
        ),
    ] = None
    not_ready_addresses: Annotated[
        Optional[List[EndpointAddress]],
        Field(
            alias="notReadyAddresses",
            description="IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.",
        ),
    ] = None
    ports: Annotated[
        Optional[List[EndpointPort]],
        Field(description="Port numbers available on the related IP addresses."),
    ] = None


class EnvFromSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "EnvFromSource":
            return EnvFromSource(**self._attrs)

        def config_map_ref(
            self,
            value_or_callback: Union[
                Optional[ConfigMapEnvSource],
                Callable[[Type[ConfigMapEnvSource]], ConfigMapEnvSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ConfigMapEnvSource)
            return self._set("config_map_ref", value)

        def prefix(self, value: Optional[str]) -> Self:
            return self._set("prefix", value)

        def secret_ref(
            self,
            value_or_callback: Union[
                Optional[SecretEnvSource],
                Callable[[Type[SecretEnvSource]], SecretEnvSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SecretEnvSource)
            return self._set("secret_ref", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    config_map_ref: Annotated[
        Optional[ConfigMapEnvSource],
        Field(alias="configMapRef", description="The ConfigMap to select from"),
    ] = None
    prefix: Annotated[
        Optional[str],
        Field(
            description="An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER."
        ),
    ] = None
    secret_ref: Annotated[
        Optional[SecretEnvSource],
        Field(alias="secretRef", description="The Secret to select from"),
    ] = None


class EventSeries(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "EventSeries":
            return EventSeries(**self._attrs)

        def count(self, value: Optional[int]) -> Self:
            return self._set("count", value)

        def last_observed_time(
            self,
            value_or_callback: Union[
                Optional[apimachinery.MicroTime],
                Callable[[Type[apimachinery.MicroTime]], apimachinery.MicroTime],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.MicroTime)
            return self._set("last_observed_time", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    count: Annotated[
        Optional[int],
        Field(description="Number of occurrences in this series up to the last heartbeat time"),
    ] = None
    last_observed_time: Annotated[
        Optional[apimachinery.MicroTime],
        Field(alias="lastObservedTime", description="Time of the last occurrence observed"),
    ] = None


class FlexPersistentVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "FlexPersistentVolumeSource":
            return FlexPersistentVolumeSource(**self._attrs)

        def driver(self, value: str) -> Self:
            return self._set("driver", value)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def options(self, value: Optional[Dict[str, str]]) -> Self:
            return self._set("options", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def secret_ref(
            self,
            value_or_callback: Union[
                Optional[SecretReference],
                Callable[[Type[SecretReference]], SecretReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SecretReference)
            return self._set("secret_ref", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    driver: Annotated[
        str,
        Field(description="driver is the name of the driver to use for this volume."),
    ]
    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
        ),
    ] = None
    options: Annotated[
        Optional[Dict[str, str]],
        Field(description="options is Optional: this field holds extra command options if any."),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
        ),
    ] = None
    secret_ref: Annotated[
        Optional[SecretReference],
        Field(
            alias="secretRef",
            description="secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.",
        ),
    ] = None


class FlexVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "FlexVolumeSource":
            return FlexVolumeSource(**self._attrs)

        def driver(self, value: str) -> Self:
            return self._set("driver", value)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def options(self, value: Optional[Dict[str, str]]) -> Self:
            return self._set("options", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def secret_ref(
            self,
            value_or_callback: Union[
                Optional[LocalObjectReference],
                Callable[[Type[LocalObjectReference]], LocalObjectReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LocalObjectReference)
            return self._set("secret_ref", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    driver: Annotated[
        str,
        Field(description="driver is the name of the driver to use for this volume."),
    ]
    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
        ),
    ] = None
    options: Annotated[
        Optional[Dict[str, str]],
        Field(description="options is Optional: this field holds extra command options if any."),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
        ),
    ] = None
    secret_ref: Annotated[
        Optional[LocalObjectReference],
        Field(
            alias="secretRef",
            description="secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.",
        ),
    ] = None


class HTTPGetAction(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "HTTPGetAction":
            return HTTPGetAction(**self._attrs)

        def host(self, value: Optional[str]) -> Self:
            return self._set("host", value)

        def http_headers(
            self,
            value_or_callback: Union[
                Optional[List[HTTPHeader]],
                Callable[[Type[HTTPHeader]], List[HTTPHeader]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(HTTPHeader)
            return self._set("http_headers", value)

        def path(self, value: Optional[str]) -> Self:
            return self._set("path", value)

        def port(
            self,
            value_or_callback: Union[
                apimachinery.IntOrString,
                Callable[[Type[apimachinery.IntOrString]], apimachinery.IntOrString],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.IntOrString)
            return self._set("port", value)

        def scheme(self, value: Optional[str]) -> Self:
            return self._set("scheme", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    host: Annotated[
        Optional[str],
        Field(
            description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.'
        ),
    ] = None
    http_headers: Annotated[
        Optional[List[HTTPHeader]],
        Field(
            alias="httpHeaders",
            description="Custom headers to set in the request. HTTP allows repeated headers.",
        ),
    ] = None
    path: Annotated[Optional[str], Field(description="Path to access on the HTTP server.")] = None
    port: Annotated[
        apimachinery.IntOrString,
        Field(
            description="Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        ),
    ]
    scheme: Annotated[
        Optional[str],
        Field(description="Scheme to use for connecting to the host. Defaults to HTTP."),
    ] = None


class ISCSIPersistentVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ISCSIPersistentVolumeSource":
            return ISCSIPersistentVolumeSource(**self._attrs)

        def chap_auth_discovery(self, value: Optional[bool]) -> Self:
            return self._set("chap_auth_discovery", value)

        def chap_auth_session(self, value: Optional[bool]) -> Self:
            return self._set("chap_auth_session", value)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def initiator_name(self, value: Optional[str]) -> Self:
            return self._set("initiator_name", value)

        def iqn(self, value: str) -> Self:
            return self._set("iqn", value)

        def iscsi_interface(self, value: Optional[str]) -> Self:
            return self._set("iscsi_interface", value)

        def lun(self, value: int) -> Self:
            return self._set("lun", value)

        def portals(self, value: Optional[List[str]]) -> Self:
            return self._set("portals", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def secret_ref(
            self,
            value_or_callback: Union[
                Optional[SecretReference],
                Callable[[Type[SecretReference]], SecretReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SecretReference)
            return self._set("secret_ref", value)

        def target_portal(self, value: str) -> Self:
            return self._set("target_portal", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    chap_auth_discovery: Annotated[
        Optional[bool],
        Field(
            alias="chapAuthDiscovery",
            description="chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication",
        ),
    ] = None
    chap_auth_session: Annotated[
        Optional[bool],
        Field(
            alias="chapAuthSession",
            description="chapAuthSession defines whether support iSCSI Session CHAP authentication",
        ),
    ] = None
    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi',
        ),
    ] = None
    initiator_name: Annotated[
        Optional[str],
        Field(
            alias="initiatorName",
            description="initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
        ),
    ] = None
    iqn: Annotated[str, Field(description="iqn is Target iSCSI Qualified Name.")]
    iscsi_interface: Annotated[
        Optional[str],
        Field(
            alias="iscsiInterface",
            description="iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
        ),
    ] = None
    lun: Annotated[int, Field(description="lun is iSCSI Target Lun number.")]
    portals: Annotated[
        Optional[List[str]],
        Field(
            description="portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
        ),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
        ),
    ] = None
    secret_ref: Annotated[
        Optional[SecretReference],
        Field(
            alias="secretRef",
            description="secretRef is the CHAP Secret for iSCSI target and initiator authentication",
        ),
    ] = None
    target_portal: Annotated[
        str,
        Field(
            alias="targetPortal",
            description="targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
        ),
    ]


class ISCSIVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ISCSIVolumeSource":
            return ISCSIVolumeSource(**self._attrs)

        def chap_auth_discovery(self, value: Optional[bool]) -> Self:
            return self._set("chap_auth_discovery", value)

        def chap_auth_session(self, value: Optional[bool]) -> Self:
            return self._set("chap_auth_session", value)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def initiator_name(self, value: Optional[str]) -> Self:
            return self._set("initiator_name", value)

        def iqn(self, value: str) -> Self:
            return self._set("iqn", value)

        def iscsi_interface(self, value: Optional[str]) -> Self:
            return self._set("iscsi_interface", value)

        def lun(self, value: int) -> Self:
            return self._set("lun", value)

        def portals(self, value: Optional[List[str]]) -> Self:
            return self._set("portals", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def secret_ref(
            self,
            value_or_callback: Union[
                Optional[LocalObjectReference],
                Callable[[Type[LocalObjectReference]], LocalObjectReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LocalObjectReference)
            return self._set("secret_ref", value)

        def target_portal(self, value: str) -> Self:
            return self._set("target_portal", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    chap_auth_discovery: Annotated[
        Optional[bool],
        Field(
            alias="chapAuthDiscovery",
            description="chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication",
        ),
    ] = None
    chap_auth_session: Annotated[
        Optional[bool],
        Field(
            alias="chapAuthSession",
            description="chapAuthSession defines whether support iSCSI Session CHAP authentication",
        ),
    ] = None
    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi',
        ),
    ] = None
    initiator_name: Annotated[
        Optional[str],
        Field(
            alias="initiatorName",
            description="initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
        ),
    ] = None
    iqn: Annotated[str, Field(description="iqn is the target iSCSI Qualified Name.")]
    iscsi_interface: Annotated[
        Optional[str],
        Field(
            alias="iscsiInterface",
            description="iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
        ),
    ] = None
    lun: Annotated[int, Field(description="lun represents iSCSI Target Lun number.")]
    portals: Annotated[
        Optional[List[str]],
        Field(
            description="portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
        ),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
        ),
    ] = None
    secret_ref: Annotated[
        Optional[LocalObjectReference],
        Field(
            alias="secretRef",
            description="secretRef is the CHAP Secret for iSCSI target and initiator authentication",
        ),
    ] = None
    target_portal: Annotated[
        str,
        Field(
            alias="targetPortal",
            description="targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
        ),
    ]


class LimitRangeItem(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "LimitRangeItem":
            return LimitRangeItem(**self._attrs)

        def default(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("default", value)

        def default_request(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("default_request", value)

        def max(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("max", value)

        def max_limit_request_ratio(
            self, value: Optional[Dict[str, apimachinery.Quantity]]
        ) -> Self:
            return self._set("max_limit_request_ratio", value)

        def min(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("min", value)

        def type(self, value: str) -> Self:
            return self._set("type", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    default: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(
            description="Default resource requirement limit value by resource name if resource limit is omitted."
        ),
    ] = None
    default_request: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(
            alias="defaultRequest",
            description="DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.",
        ),
    ] = None
    max: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(description="Max usage constraints on this kind by resource name."),
    ] = None
    max_limit_request_ratio: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(
            alias="maxLimitRequestRatio",
            description="MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.",
        ),
    ] = None
    min: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(description="Min usage constraints on this kind by resource name."),
    ] = None
    type: Annotated[str, Field(description="Type of resource that this limit applies to.")]


class LimitRangeSpec(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "LimitRangeSpec":
            return LimitRangeSpec(**self._attrs)

        def limits(
            self,
            value_or_callback: Union[
                List[LimitRangeItem],
                Callable[[Type[LimitRangeItem]], List[LimitRangeItem]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LimitRangeItem)
            return self._set("limits", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    limits: Annotated[
        List[LimitRangeItem],
        Field(description="Limits is the list of LimitRangeItem objects that are enforced."),
    ]


class LoadBalancerIngress(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "LoadBalancerIngress":
            return LoadBalancerIngress(**self._attrs)

        def hostname(self, value: Optional[str]) -> Self:
            return self._set("hostname", value)

        def ip(self, value: Optional[str]) -> Self:
            return self._set("ip", value)

        def ip_mode(self, value: Optional[str]) -> Self:
            return self._set("ip_mode", value)

        def ports(
            self,
            value_or_callback: Union[
                Optional[List[PortStatus]],
                Callable[[Type[PortStatus]], List[PortStatus]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PortStatus)
            return self._set("ports", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    hostname: Annotated[
        Optional[str],
        Field(
            description="Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)"
        ),
    ] = None
    ip: Annotated[
        Optional[str],
        Field(
            description="IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)"
        ),
    ] = None
    ip_mode: Annotated[
        Optional[str],
        Field(
            alias="ipMode",
            description='IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified. Setting this to "VIP" indicates that traffic is delivered to the node with the destination set to the load-balancer\'s IP and port. Setting this to "Proxy" indicates that traffic is delivered to the node or pod with the destination set to the node\'s IP and node port or the pod\'s IP and port. Service implementations may use this information to adjust traffic routing.',
        ),
    ] = None
    ports: Annotated[
        Optional[List[PortStatus]],
        Field(
            description="Ports is a list of records of service ports If used, every port defined in the service should have an entry in it"
        ),
    ] = None


class LoadBalancerStatus(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "LoadBalancerStatus":
            return LoadBalancerStatus(**self._attrs)

        def ingress(
            self,
            value_or_callback: Union[
                Optional[List[LoadBalancerIngress]],
                Callable[[Type[LoadBalancerIngress]], List[LoadBalancerIngress]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LoadBalancerIngress)
            return self._set("ingress", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    ingress: Annotated[
        Optional[List[LoadBalancerIngress]],
        Field(
            description="Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points."
        ),
    ] = None


class NamespaceCondition(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NamespaceCondition":
            return NamespaceCondition(**self._attrs)

        def last_transition_time(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Time],
                Callable[[Type[apimachinery.Time]], apimachinery.Time],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Time)
            return self._set("last_transition_time", value)

        def message(self, value: Optional[str]) -> Self:
            return self._set("message", value)

        def reason(self, value: Optional[str]) -> Self:
            return self._set("reason", value)

        def status(self, value: str) -> Self:
            return self._set("status", value)

        def type(self, value: str) -> Self:
            return self._set("type", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    last_transition_time: Annotated[
        Optional[apimachinery.Time], Field(alias="lastTransitionTime")
    ] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Annotated[
        str, Field(description="Status of the condition, one of True, False, Unknown.")
    ]
    type: Annotated[str, Field(description="Type of namespace controller condition.")]


class NamespaceStatus(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NamespaceStatus":
            return NamespaceStatus(**self._attrs)

        def conditions(
            self,
            value_or_callback: Union[
                Optional[List[NamespaceCondition]],
                Callable[[Type[NamespaceCondition]], List[NamespaceCondition]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NamespaceCondition)
            return self._set("conditions", value)

        def phase(self, value: Optional[str]) -> Self:
            return self._set("phase", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    conditions: Annotated[
        Optional[List[NamespaceCondition]],
        Field(
            description="Represents the latest available observations of a namespace's current state."
        ),
    ] = None
    phase: Annotated[
        Optional[str],
        Field(
            description="Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/"
        ),
    ] = None


class NodeCondition(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NodeCondition":
            return NodeCondition(**self._attrs)

        def last_heartbeat_time(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Time],
                Callable[[Type[apimachinery.Time]], apimachinery.Time],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Time)
            return self._set("last_heartbeat_time", value)

        def last_transition_time(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Time],
                Callable[[Type[apimachinery.Time]], apimachinery.Time],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Time)
            return self._set("last_transition_time", value)

        def message(self, value: Optional[str]) -> Self:
            return self._set("message", value)

        def reason(self, value: Optional[str]) -> Self:
            return self._set("reason", value)

        def status(self, value: str) -> Self:
            return self._set("status", value)

        def type(self, value: str) -> Self:
            return self._set("type", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    last_heartbeat_time: Annotated[
        Optional[apimachinery.Time],
        Field(
            alias="lastHeartbeatTime",
            description="Last time we got an update on a given condition.",
        ),
    ] = None
    last_transition_time: Annotated[
        Optional[apimachinery.Time],
        Field(
            alias="lastTransitionTime",
            description="Last time the condition transit from one status to another.",
        ),
    ] = None
    message: Annotated[
        Optional[str],
        Field(description="Human readable message indicating details about last transition."),
    ] = None
    reason: Annotated[
        Optional[str],
        Field(description="(brief) reason for the condition's last transition."),
    ] = None
    status: Annotated[
        str, Field(description="Status of the condition, one of True, False, Unknown.")
    ]
    type: Annotated[str, Field(description="Type of node condition.")]


class NodeRuntimeHandler(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NodeRuntimeHandler":
            return NodeRuntimeHandler(**self._attrs)

        def features(
            self,
            value_or_callback: Union[
                Optional[NodeRuntimeHandlerFeatures],
                Callable[[Type[NodeRuntimeHandlerFeatures]], NodeRuntimeHandlerFeatures],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeRuntimeHandlerFeatures)
            return self._set("features", value)

        def name(self, value: Optional[str]) -> Self:
            return self._set("name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    features: Annotated[
        Optional[NodeRuntimeHandlerFeatures], Field(description="Supported features.")
    ] = None
    name: Annotated[
        Optional[str],
        Field(description="Runtime handler name. Empty for the default runtime handler."),
    ] = None


class NodeSelector(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NodeSelector":
            return NodeSelector(**self._attrs)

        def node_selector_terms(
            self,
            value_or_callback: Union[
                List[NodeSelectorTerm],
                Callable[[Type[NodeSelectorTerm]], List[NodeSelectorTerm]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeSelectorTerm)
            return self._set("node_selector_terms", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    node_selector_terms: Annotated[
        List[NodeSelectorTerm],
        Field(
            alias="nodeSelectorTerms",
            description="Required. A list of node selector terms. The terms are ORed.",
        ),
    ]


class NodeStatus(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NodeStatus":
            return NodeStatus(**self._attrs)

        def addresses(
            self,
            value_or_callback: Union[
                Optional[List[NodeAddress]],
                Callable[[Type[NodeAddress]], List[NodeAddress]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeAddress)
            return self._set("addresses", value)

        def allocatable(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("allocatable", value)

        def capacity(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("capacity", value)

        def conditions(
            self,
            value_or_callback: Union[
                Optional[List[NodeCondition]],
                Callable[[Type[NodeCondition]], List[NodeCondition]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeCondition)
            return self._set("conditions", value)

        def config(
            self,
            value_or_callback: Union[
                Optional[NodeConfigStatus],
                Callable[[Type[NodeConfigStatus]], NodeConfigStatus],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeConfigStatus)
            return self._set("config", value)

        def daemon_endpoints(
            self,
            value_or_callback: Union[
                Optional[NodeDaemonEndpoints],
                Callable[[Type[NodeDaemonEndpoints]], NodeDaemonEndpoints],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeDaemonEndpoints)
            return self._set("daemon_endpoints", value)

        def features(
            self,
            value_or_callback: Union[
                Optional[NodeFeatures], Callable[[Type[NodeFeatures]], NodeFeatures]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeFeatures)
            return self._set("features", value)

        def images(
            self,
            value_or_callback: Union[
                Optional[List[ContainerImage]],
                Callable[[Type[ContainerImage]], List[ContainerImage]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ContainerImage)
            return self._set("images", value)

        def node_info(
            self,
            value_or_callback: Union[
                Optional[NodeSystemInfo],
                Callable[[Type[NodeSystemInfo]], NodeSystemInfo],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeSystemInfo)
            return self._set("node_info", value)

        def phase(self, value: Optional[str]) -> Self:
            return self._set("phase", value)

        def runtime_handlers(
            self,
            value_or_callback: Union[
                Optional[List[NodeRuntimeHandler]],
                Callable[[Type[NodeRuntimeHandler]], List[NodeRuntimeHandler]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeRuntimeHandler)
            return self._set("runtime_handlers", value)

        def volumes_attached(
            self,
            value_or_callback: Union[
                Optional[List[AttachedVolume]],
                Callable[[Type[AttachedVolume]], List[AttachedVolume]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(AttachedVolume)
            return self._set("volumes_attached", value)

        def volumes_in_use(self, value: Optional[List[str]]) -> Self:
            return self._set("volumes_in_use", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    addresses: Annotated[
        Optional[List[NodeAddress]],
        Field(
            description="List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP)."
        ),
    ] = None
    allocatable: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(
            description="Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity."
        ),
    ] = None
    capacity: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(
            description="Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/reference/node/node-status/#capacity"
        ),
    ] = None
    conditions: Annotated[
        Optional[List[NodeCondition]],
        Field(
            description="Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition"
        ),
    ] = None
    config: Annotated[
        Optional[NodeConfigStatus],
        Field(
            description="Status of the config assigned to the node via the dynamic Kubelet config feature."
        ),
    ] = None
    daemon_endpoints: Annotated[
        Optional[NodeDaemonEndpoints],
        Field(
            alias="daemonEndpoints",
            description="Endpoints of daemons running on the Node.",
        ),
    ] = None
    features: Annotated[
        Optional[NodeFeatures],
        Field(
            description="Features describes the set of features implemented by the CRI implementation."
        ),
    ] = None
    images: Annotated[
        Optional[List[ContainerImage]],
        Field(description="List of container images on this node"),
    ] = None
    node_info: Annotated[
        Optional[NodeSystemInfo],
        Field(
            alias="nodeInfo",
            description="Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info",
        ),
    ] = None
    phase: Annotated[
        Optional[str],
        Field(
            description="NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated."
        ),
    ] = None
    runtime_handlers: Annotated[
        Optional[List[NodeRuntimeHandler]],
        Field(alias="runtimeHandlers", description="The available runtime handlers."),
    ] = None
    volumes_attached: Annotated[
        Optional[List[AttachedVolume]],
        Field(
            alias="volumesAttached",
            description="List of volumes that are attached to the node.",
        ),
    ] = None
    volumes_in_use: Annotated[
        Optional[List[str]],
        Field(
            alias="volumesInUse",
            description="List of attachable volumes in use (mounted) by the node.",
        ),
    ] = None


class PersistentVolumeClaimCondition(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PersistentVolumeClaimCondition":
            return PersistentVolumeClaimCondition(**self._attrs)

        def last_probe_time(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Time],
                Callable[[Type[apimachinery.Time]], apimachinery.Time],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Time)
            return self._set("last_probe_time", value)

        def last_transition_time(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Time],
                Callable[[Type[apimachinery.Time]], apimachinery.Time],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Time)
            return self._set("last_transition_time", value)

        def message(self, value: Optional[str]) -> Self:
            return self._set("message", value)

        def reason(self, value: Optional[str]) -> Self:
            return self._set("reason", value)

        def status(self, value: str) -> Self:
            return self._set("status", value)

        def type(self, value: str) -> Self:
            return self._set("type", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    last_probe_time: Annotated[
        Optional[apimachinery.Time],
        Field(
            alias="lastProbeTime",
            description="lastProbeTime is the time we probed the condition.",
        ),
    ] = None
    last_transition_time: Annotated[
        Optional[apimachinery.Time],
        Field(
            alias="lastTransitionTime",
            description="lastTransitionTime is the time the condition transitioned from one status to another.",
        ),
    ] = None
    message: Annotated[
        Optional[str],
        Field(
            description="message is the human-readable message indicating details about last transition."
        ),
    ] = None
    reason: Annotated[
        Optional[str],
        Field(
            description='reason is a unique, this should be a short, machine understandable string that gives the reason for condition\'s last transition. If it reports "Resizing" that means the underlying persistent volume is being resized.'
        ),
    ] = None
    status: str
    type: str


class PersistentVolumeClaimStatus(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PersistentVolumeClaimStatus":
            return PersistentVolumeClaimStatus(**self._attrs)

        def access_modes(self, value: Optional[List[str]]) -> Self:
            return self._set("access_modes", value)

        def allocated_resource_statuses(self, value: Optional[Dict[str, str]]) -> Self:
            return self._set("allocated_resource_statuses", value)

        def allocated_resources(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("allocated_resources", value)

        def capacity(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("capacity", value)

        def conditions(
            self,
            value_or_callback: Union[
                Optional[List[PersistentVolumeClaimCondition]],
                Callable[
                    [Type[PersistentVolumeClaimCondition]],
                    List[PersistentVolumeClaimCondition],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PersistentVolumeClaimCondition)
            return self._set("conditions", value)

        def current_volume_attributes_class_name(self, value: Optional[str]) -> Self:
            return self._set("current_volume_attributes_class_name", value)

        def modify_volume_status(
            self,
            value_or_callback: Union[
                Optional[ModifyVolumeStatus],
                Callable[[Type[ModifyVolumeStatus]], ModifyVolumeStatus],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ModifyVolumeStatus)
            return self._set("modify_volume_status", value)

        def phase(self, value: Optional[str]) -> Self:
            return self._set("phase", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    access_modes: Annotated[
        Optional[List[str]],
        Field(
            alias="accessModes",
            description="accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
        ),
    ] = None
    allocated_resource_statuses: Annotated[
        Optional[Dict[str, str]],
        Field(
            alias="allocatedResourceStatuses",
            description='allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.\n\nClaimResourceStatus can be in any of following states:\n\t- ControllerResizeInProgress:\n\t\tState set when resize controller starts resizing the volume in control-plane.\n\t- ControllerResizeFailed:\n\t\tState set when resize has failed in resize controller with a terminal error.\n\t- NodeResizePending:\n\t\tState set when resize controller has finished resizing the volume but further resizing of\n\t\tvolume is needed on the node.\n\t- NodeResizeInProgress:\n\t\tState set when kubelet starts resizing the volume.\n\t- NodeResizeFailed:\n\t\tState set when resizing has failed in kubelet with a terminal error. Transient errors don\'t set\n\t\tNodeResizeFailed.\nFor example: if expanding a PVC for more capacity - this field can be one of the following states:\n\t- pvc.status.allocatedResourceStatus[\'storage\'] = "ControllerResizeInProgress"\n     - pvc.status.allocatedResourceStatus[\'storage\'] = "ControllerResizeFailed"\n     - pvc.status.allocatedResourceStatus[\'storage\'] = "NodeResizePending"\n     - pvc.status.allocatedResourceStatus[\'storage\'] = "NodeResizeInProgress"\n     - pvc.status.allocatedResourceStatus[\'storage\'] = "NodeResizeFailed"\nWhen this field is not set, it means that no resize operation is in progress for the given PVC.\n\nA controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.',
        ),
    ] = None
    allocated_resources: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(
            alias="allocatedResources",
            description='allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.\n\nCapacity reported here may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.\n\nA controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.',
        ),
    ] = None
    capacity: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(description="capacity represents the actual resources of the underlying volume."),
    ] = None
    conditions: Annotated[
        Optional[List[PersistentVolumeClaimCondition]],
        Field(
            description="conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'Resizing'."
        ),
    ] = None
    current_volume_attributes_class_name: Annotated[
        Optional[str],
        Field(
            alias="currentVolumeAttributesClassName",
            description="currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using. When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim This is a beta field and requires enabling VolumeAttributesClass feature (off by default).",
        ),
    ] = None
    modify_volume_status: Annotated[
        Optional[ModifyVolumeStatus],
        Field(
            alias="modifyVolumeStatus",
            description="ModifyVolumeStatus represents the status object of ControllerModifyVolume operation. When this is unset, there is no ModifyVolume operation being attempted. This is a beta field and requires enabling VolumeAttributesClass feature (off by default).",
        ),
    ] = None
    phase: Annotated[
        Optional[str],
        Field(description="phase represents the current phase of PersistentVolumeClaim."),
    ] = None


class PersistentVolumeStatus(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PersistentVolumeStatus":
            return PersistentVolumeStatus(**self._attrs)

        def last_phase_transition_time(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Time],
                Callable[[Type[apimachinery.Time]], apimachinery.Time],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Time)
            return self._set("last_phase_transition_time", value)

        def message(self, value: Optional[str]) -> Self:
            return self._set("message", value)

        def phase(self, value: Optional[str]) -> Self:
            return self._set("phase", value)

        def reason(self, value: Optional[str]) -> Self:
            return self._set("reason", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    last_phase_transition_time: Annotated[
        Optional[apimachinery.Time],
        Field(
            alias="lastPhaseTransitionTime",
            description="lastPhaseTransitionTime is the time the phase transitioned from one to another and automatically resets to current time everytime a volume phase transitions.",
        ),
    ] = None
    message: Annotated[
        Optional[str],
        Field(
            description="message is a human-readable message indicating details about why the volume is in this state."
        ),
    ] = None
    phase: Annotated[
        Optional[str],
        Field(
            description="phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase"
        ),
    ] = None
    reason: Annotated[
        Optional[str],
        Field(
            description="reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI."
        ),
    ] = None


class PodCondition(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PodCondition":
            return PodCondition(**self._attrs)

        def last_probe_time(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Time],
                Callable[[Type[apimachinery.Time]], apimachinery.Time],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Time)
            return self._set("last_probe_time", value)

        def last_transition_time(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Time],
                Callable[[Type[apimachinery.Time]], apimachinery.Time],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Time)
            return self._set("last_transition_time", value)

        def message(self, value: Optional[str]) -> Self:
            return self._set("message", value)

        def reason(self, value: Optional[str]) -> Self:
            return self._set("reason", value)

        def status(self, value: str) -> Self:
            return self._set("status", value)

        def type(self, value: str) -> Self:
            return self._set("type", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    last_probe_time: Annotated[
        Optional[apimachinery.Time],
        Field(alias="lastProbeTime", description="Last time we probed the condition."),
    ] = None
    last_transition_time: Annotated[
        Optional[apimachinery.Time],
        Field(
            alias="lastTransitionTime",
            description="Last time the condition transitioned from one status to another.",
        ),
    ] = None
    message: Annotated[
        Optional[str],
        Field(description="Human-readable message indicating details about last transition."),
    ] = None
    reason: Annotated[
        Optional[str],
        Field(
            description="Unique, one-word, CamelCase reason for the condition's last transition."
        ),
    ] = None
    status: Annotated[
        str,
        Field(
            description="Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions"
        ),
    ]
    type: Annotated[
        str,
        Field(
            description="Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions"
        ),
    ]


class PodDNSConfig(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PodDNSConfig":
            return PodDNSConfig(**self._attrs)

        def nameservers(self, value: Optional[List[str]]) -> Self:
            return self._set("nameservers", value)

        def options(
            self,
            value_or_callback: Union[
                Optional[List[PodDNSConfigOption]],
                Callable[[Type[PodDNSConfigOption]], List[PodDNSConfigOption]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodDNSConfigOption)
            return self._set("options", value)

        def searches(self, value: Optional[List[str]]) -> Self:
            return self._set("searches", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    nameservers: Annotated[
        Optional[List[str]],
        Field(
            description="A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed."
        ),
    ] = None
    options: Annotated[
        Optional[List[PodDNSConfigOption]],
        Field(
            description="A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy."
        ),
    ] = None
    searches: Annotated[
        Optional[List[str]],
        Field(
            description="A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed."
        ),
    ] = None


class PodSecurityContext(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PodSecurityContext":
            return PodSecurityContext(**self._attrs)

        def app_armor_profile(
            self,
            value_or_callback: Union[
                Optional[AppArmorProfile],
                Callable[[Type[AppArmorProfile]], AppArmorProfile],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(AppArmorProfile)
            return self._set("app_armor_profile", value)

        def fs_group(self, value: Optional[int]) -> Self:
            return self._set("fs_group", value)

        def fs_group_change_policy(self, value: Optional[str]) -> Self:
            return self._set("fs_group_change_policy", value)

        def run_as_group(self, value: Optional[int]) -> Self:
            return self._set("run_as_group", value)

        def run_as_non_root(self, value: Optional[bool]) -> Self:
            return self._set("run_as_non_root", value)

        def run_as_user(self, value: Optional[int]) -> Self:
            return self._set("run_as_user", value)

        def se_linux_options(
            self,
            value_or_callback: Union[
                Optional[SELinuxOptions],
                Callable[[Type[SELinuxOptions]], SELinuxOptions],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SELinuxOptions)
            return self._set("se_linux_options", value)

        def seccomp_profile(
            self,
            value_or_callback: Union[
                Optional[SeccompProfile],
                Callable[[Type[SeccompProfile]], SeccompProfile],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SeccompProfile)
            return self._set("seccomp_profile", value)

        def supplemental_groups(self, value: Optional[List[int]]) -> Self:
            return self._set("supplemental_groups", value)

        def supplemental_groups_policy(self, value: Optional[str]) -> Self:
            return self._set("supplemental_groups_policy", value)

        def sysctls(
            self,
            value_or_callback: Union[
                Optional[List[Sysctl]], Callable[[Type[Sysctl]], List[Sysctl]]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Sysctl)
            return self._set("sysctls", value)

        def windows_options(
            self,
            value_or_callback: Union[
                Optional[WindowsSecurityContextOptions],
                Callable[[Type[WindowsSecurityContextOptions]], WindowsSecurityContextOptions],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(WindowsSecurityContextOptions)
            return self._set("windows_options", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    app_armor_profile: Annotated[
        Optional[AppArmorProfile],
        Field(
            alias="appArmorProfile",
            description="appArmorProfile is the AppArmor options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.",
        ),
    ] = None
    fs_group: Annotated[
        Optional[int],
        Field(
            alias="fsGroup",
            description="A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.",
        ),
    ] = None
    fs_group_change_policy: Annotated[
        Optional[str],
        Field(
            alias="fsGroupChangePolicy",
            description='fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.',
        ),
    ] = None
    run_as_group: Annotated[
        Optional[int],
        Field(
            alias="runAsGroup",
            description="The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
        ),
    ] = None
    run_as_non_root: Annotated[
        Optional[bool],
        Field(
            alias="runAsNonRoot",
            description="Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
        ),
    ] = None
    run_as_user: Annotated[
        Optional[int],
        Field(
            alias="runAsUser",
            description="The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
        ),
    ] = None
    se_linux_options: Annotated[
        Optional[SELinuxOptions],
        Field(
            alias="seLinuxOptions",
            description="The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
        ),
    ] = None
    seccomp_profile: Annotated[
        Optional[SeccompProfile],
        Field(
            alias="seccompProfile",
            description="The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.",
        ),
    ] = None
    supplemental_groups: Annotated[
        Optional[List[int]],
        Field(
            alias="supplementalGroups",
            description="A list of groups applied to the first process run in each container, in addition to the container's primary GID and fsGroup (if specified).  If the SupplementalGroupsPolicy feature is enabled, the supplementalGroupsPolicy field determines whether these are in addition to or instead of any group memberships defined in the container image. If unspecified, no additional groups are added, though group memberships defined in the container image may still be used, depending on the supplementalGroupsPolicy field. Note that this field cannot be set when spec.os.name is windows.",
        ),
    ] = None
    supplemental_groups_policy: Annotated[
        Optional[str],
        Field(
            alias="supplementalGroupsPolicy",
            description='Defines how supplemental groups of the first container processes are calculated. Valid values are "Merge" and "Strict". If not specified, "Merge" is used. (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled and the container runtime must implement support for this feature. Note that this field cannot be set when spec.os.name is windows.',
        ),
    ] = None
    sysctls: Annotated[
        Optional[List[Sysctl]],
        Field(
            description="Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows."
        ),
    ] = None
    windows_options: Annotated[
        Optional[WindowsSecurityContextOptions],
        Field(
            alias="windowsOptions",
            description="The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.",
        ),
    ] = None


class RBDPersistentVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "RBDPersistentVolumeSource":
            return RBDPersistentVolumeSource(**self._attrs)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def image(self, value: str) -> Self:
            return self._set("image", value)

        def keyring(self, value: Optional[str]) -> Self:
            return self._set("keyring", value)

        def monitors(self, value: List[str]) -> Self:
            return self._set("monitors", value)

        def pool(self, value: Optional[str]) -> Self:
            return self._set("pool", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def secret_ref(
            self,
            value_or_callback: Union[
                Optional[SecretReference],
                Callable[[Type[SecretReference]], SecretReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SecretReference)
            return self._set("secret_ref", value)

        def user(self, value: Optional[str]) -> Self:
            return self._set("user", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd',
        ),
    ] = None
    image: Annotated[
        str,
        Field(
            description="image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        ),
    ]
    keyring: Annotated[
        Optional[str],
        Field(
            description="keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        ),
    ] = None
    monitors: Annotated[
        List[str],
        Field(
            description="monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        ),
    ]
    pool: Annotated[
        Optional[str],
        Field(
            description="pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        ),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
        ),
    ] = None
    secret_ref: Annotated[
        Optional[SecretReference],
        Field(
            alias="secretRef",
            description="secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
        ),
    ] = None
    user: Annotated[
        Optional[str],
        Field(
            description="user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        ),
    ] = None


class ReplicationControllerCondition(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ReplicationControllerCondition":
            return ReplicationControllerCondition(**self._attrs)

        def last_transition_time(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Time],
                Callable[[Type[apimachinery.Time]], apimachinery.Time],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Time)
            return self._set("last_transition_time", value)

        def message(self, value: Optional[str]) -> Self:
            return self._set("message", value)

        def reason(self, value: Optional[str]) -> Self:
            return self._set("reason", value)

        def status(self, value: str) -> Self:
            return self._set("status", value)

        def type(self, value: str) -> Self:
            return self._set("type", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    last_transition_time: Annotated[
        Optional[apimachinery.Time],
        Field(
            alias="lastTransitionTime",
            description="The last time the condition transitioned from one status to another.",
        ),
    ] = None
    message: Annotated[
        Optional[str],
        Field(description="A human readable message indicating details about the transition."),
    ] = None
    reason: Annotated[
        Optional[str],
        Field(description="The reason for the condition's last transition."),
    ] = None
    status: Annotated[
        str, Field(description="Status of the condition, one of True, False, Unknown.")
    ]
    type: Annotated[str, Field(description="Type of replication controller condition.")]


class ReplicationControllerStatus(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ReplicationControllerStatus":
            return ReplicationControllerStatus(**self._attrs)

        def available_replicas(self, value: Optional[int]) -> Self:
            return self._set("available_replicas", value)

        def conditions(
            self,
            value_or_callback: Union[
                Optional[List[ReplicationControllerCondition]],
                Callable[
                    [Type[ReplicationControllerCondition]],
                    List[ReplicationControllerCondition],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ReplicationControllerCondition)
            return self._set("conditions", value)

        def fully_labeled_replicas(self, value: Optional[int]) -> Self:
            return self._set("fully_labeled_replicas", value)

        def observed_generation(self, value: Optional[int]) -> Self:
            return self._set("observed_generation", value)

        def ready_replicas(self, value: Optional[int]) -> Self:
            return self._set("ready_replicas", value)

        def replicas(self, value: int) -> Self:
            return self._set("replicas", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    available_replicas: Annotated[
        Optional[int],
        Field(
            alias="availableReplicas",
            description="The number of available replicas (ready for at least minReadySeconds) for this replication controller.",
        ),
    ] = None
    conditions: Annotated[
        Optional[List[ReplicationControllerCondition]],
        Field(
            description="Represents the latest available observations of a replication controller's current state."
        ),
    ] = None
    fully_labeled_replicas: Annotated[
        Optional[int],
        Field(
            alias="fullyLabeledReplicas",
            description="The number of pods that have labels matching the labels of the pod template of the replication controller.",
        ),
    ] = None
    observed_generation: Annotated[
        Optional[int],
        Field(
            alias="observedGeneration",
            description="ObservedGeneration reflects the generation of the most recently observed replication controller.",
        ),
    ] = None
    ready_replicas: Annotated[
        Optional[int],
        Field(
            alias="readyReplicas",
            description="The number of ready replicas for this replication controller.",
        ),
    ] = None
    replicas: Annotated[
        int,
        Field(
            description="Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller"
        ),
    ]


class ResourceFieldSelector(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ResourceFieldSelector":
            return ResourceFieldSelector(**self._attrs)

        def container_name(self, value: Optional[str]) -> Self:
            return self._set("container_name", value)

        def divisor(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Quantity],
                Callable[[Type[apimachinery.Quantity]], apimachinery.Quantity],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Quantity)
            return self._set("divisor", value)

        def resource(self, value: str) -> Self:
            return self._set("resource", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    container_name: Annotated[
        Optional[str],
        Field(
            alias="containerName",
            description="Container name: required for volumes, optional for env vars",
        ),
    ] = None
    divisor: Annotated[
        Optional[apimachinery.Quantity],
        Field(description='Specifies the output format of the exposed resources, defaults to "1"'),
    ] = None
    resource: Annotated[str, Field(description="Required: resource to select")]


class ResourceQuotaStatus(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ResourceQuotaStatus":
            return ResourceQuotaStatus(**self._attrs)

        def hard(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("hard", value)

        def used(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("used", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    hard: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(
            description="Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/"
        ),
    ] = None
    used: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(
            description="Used is the current observed total usage of the resource in the namespace."
        ),
    ] = None


class ResourceRequirements(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ResourceRequirements":
            return ResourceRequirements(**self._attrs)

        def claims(
            self,
            value_or_callback: Union[
                Optional[List[ResourceClaim]],
                Callable[[Type[ResourceClaim]], List[ResourceClaim]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ResourceClaim)
            return self._set("claims", value)

        def limits(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("limits", value)

        def requests(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("requests", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    claims: Annotated[
        Optional[List[ResourceClaim]],
        Field(
            description="Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers."
        ),
    ] = None
    limits: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(
            description="Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
        ),
    ] = None
    requests: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(
            description="Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
        ),
    ] = None


class ScaleIOPersistentVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ScaleIOPersistentVolumeSource":
            return ScaleIOPersistentVolumeSource(**self._attrs)

        def fs_type(self, value: Optional[str]) -> Self:
            return self._set("fs_type", value)

        def gateway(self, value: str) -> Self:
            return self._set("gateway", value)

        def protection_domain(self, value: Optional[str]) -> Self:
            return self._set("protection_domain", value)

        def read_only(self, value: Optional[bool]) -> Self:
            return self._set("read_only", value)

        def secret_ref(
            self,
            value_or_callback: Union[
                SecretReference, Callable[[Type[SecretReference]], SecretReference]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SecretReference)
            return self._set("secret_ref", value)

        def ssl_enabled(self, value: Optional[bool]) -> Self:
            return self._set("ssl_enabled", value)

        def storage_mode(self, value: Optional[str]) -> Self:
            return self._set("storage_mode", value)

        def storage_pool(self, value: Optional[str]) -> Self:
            return self._set("storage_pool", value)

        def system(self, value: str) -> Self:
            return self._set("system", value)

        def volume_name(self, value: Optional[str]) -> Self:
            return self._set("volume_name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    fs_type: Annotated[
        Optional[str],
        Field(
            alias="fsType",
            description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"',
        ),
    ] = None
    gateway: Annotated[
        str,
        Field(description="gateway is the host address of the ScaleIO API Gateway."),
    ]
    protection_domain: Annotated[
        Optional[str],
        Field(
            alias="protectionDomain",
            description="protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.",
        ),
    ] = None
    read_only: Annotated[
        Optional[bool],
        Field(
            alias="readOnly",
            description="readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
        ),
    ] = None
    secret_ref: Annotated[
        SecretReference,
        Field(
            alias="secretRef",
            description="secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.",
        ),
    ]
    ssl_enabled: Annotated[
        Optional[bool],
        Field(
            alias="sslEnabled",
            description="sslEnabled is the flag to enable/disable SSL communication with Gateway, default false",
        ),
    ] = None
    storage_mode: Annotated[
        Optional[str],
        Field(
            alias="storageMode",
            description="storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
        ),
    ] = None
    storage_pool: Annotated[
        Optional[str],
        Field(
            alias="storagePool",
            description="storagePool is the ScaleIO Storage Pool associated with the protection domain.",
        ),
    ] = None
    system: Annotated[
        str,
        Field(description="system is the name of the storage system as configured in ScaleIO."),
    ]
    volume_name: Annotated[
        Optional[str],
        Field(
            alias="volumeName",
            description="volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.",
        ),
    ] = None


class ScopeSelector(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ScopeSelector":
            return ScopeSelector(**self._attrs)

        def match_expressions(
            self,
            value_or_callback: Union[
                Optional[List[ScopedResourceSelectorRequirement]],
                Callable[
                    [Type[ScopedResourceSelectorRequirement]],
                    List[ScopedResourceSelectorRequirement],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ScopedResourceSelectorRequirement)
            return self._set("match_expressions", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    match_expressions: Annotated[
        Optional[List[ScopedResourceSelectorRequirement]],
        Field(
            alias="matchExpressions",
            description="A list of scope selector requirements by scope of the resources.",
        ),
    ] = None


class SecurityContext(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "SecurityContext":
            return SecurityContext(**self._attrs)

        def allow_privilege_escalation(self, value: Optional[bool]) -> Self:
            return self._set("allow_privilege_escalation", value)

        def app_armor_profile(
            self,
            value_or_callback: Union[
                Optional[AppArmorProfile],
                Callable[[Type[AppArmorProfile]], AppArmorProfile],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(AppArmorProfile)
            return self._set("app_armor_profile", value)

        def capabilities(
            self,
            value_or_callback: Union[
                Optional[Capabilities], Callable[[Type[Capabilities]], Capabilities]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Capabilities)
            return self._set("capabilities", value)

        def privileged(self, value: Optional[bool]) -> Self:
            return self._set("privileged", value)

        def proc_mount(self, value: Optional[str]) -> Self:
            return self._set("proc_mount", value)

        def read_only_root_filesystem(self, value: Optional[bool]) -> Self:
            return self._set("read_only_root_filesystem", value)

        def run_as_group(self, value: Optional[int]) -> Self:
            return self._set("run_as_group", value)

        def run_as_non_root(self, value: Optional[bool]) -> Self:
            return self._set("run_as_non_root", value)

        def run_as_user(self, value: Optional[int]) -> Self:
            return self._set("run_as_user", value)

        def se_linux_options(
            self,
            value_or_callback: Union[
                Optional[SELinuxOptions],
                Callable[[Type[SELinuxOptions]], SELinuxOptions],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SELinuxOptions)
            return self._set("se_linux_options", value)

        def seccomp_profile(
            self,
            value_or_callback: Union[
                Optional[SeccompProfile],
                Callable[[Type[SeccompProfile]], SeccompProfile],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SeccompProfile)
            return self._set("seccomp_profile", value)

        def windows_options(
            self,
            value_or_callback: Union[
                Optional[WindowsSecurityContextOptions],
                Callable[[Type[WindowsSecurityContextOptions]], WindowsSecurityContextOptions],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(WindowsSecurityContextOptions)
            return self._set("windows_options", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    allow_privilege_escalation: Annotated[
        Optional[bool],
        Field(
            alias="allowPrivilegeEscalation",
            description="AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
        ),
    ] = None
    app_armor_profile: Annotated[
        Optional[AppArmorProfile],
        Field(
            alias="appArmorProfile",
            description="appArmorProfile is the AppArmor options to use by this container. If set, this profile overrides the pod's appArmorProfile. Note that this field cannot be set when spec.os.name is windows.",
        ),
    ] = None
    capabilities: Annotated[
        Optional[Capabilities],
        Field(
            description="The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows."
        ),
    ] = None
    privileged: Annotated[
        Optional[bool],
        Field(
            description="Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows."
        ),
    ] = None
    proc_mount: Annotated[
        Optional[str],
        Field(
            alias="procMount",
            description="procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
        ),
    ] = None
    read_only_root_filesystem: Annotated[
        Optional[bool],
        Field(
            alias="readOnlyRootFilesystem",
            description="Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
        ),
    ] = None
    run_as_group: Annotated[
        Optional[int],
        Field(
            alias="runAsGroup",
            description="The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
        ),
    ] = None
    run_as_non_root: Annotated[
        Optional[bool],
        Field(
            alias="runAsNonRoot",
            description="Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
        ),
    ] = None
    run_as_user: Annotated[
        Optional[int],
        Field(
            alias="runAsUser",
            description="The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
        ),
    ] = None
    se_linux_options: Annotated[
        Optional[SELinuxOptions],
        Field(
            alias="seLinuxOptions",
            description="The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
        ),
    ] = None
    seccomp_profile: Annotated[
        Optional[SeccompProfile],
        Field(
            alias="seccompProfile",
            description="The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.",
        ),
    ] = None
    windows_options: Annotated[
        Optional[WindowsSecurityContextOptions],
        Field(
            alias="windowsOptions",
            description="The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.",
        ),
    ] = None


class ServicePort(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ServicePort":
            return ServicePort(**self._attrs)

        def app_protocol(self, value: Optional[str]) -> Self:
            return self._set("app_protocol", value)

        def name(self, value: Optional[str]) -> Self:
            return self._set("name", value)

        def node_port(self, value: Optional[int]) -> Self:
            return self._set("node_port", value)

        def port(self, value: int) -> Self:
            return self._set("port", value)

        def protocol(self, value: Optional[str]) -> Self:
            return self._set("protocol", value)

        def target_port(
            self,
            value_or_callback: Union[
                Optional[apimachinery.IntOrString],
                Callable[[Type[apimachinery.IntOrString]], apimachinery.IntOrString],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.IntOrString)
            return self._set("target_port", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    app_protocol: Annotated[
        Optional[str],
        Field(
            alias="appProtocol",
            description="The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:\n\n* Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).\n\n* Kubernetes-defined prefixed names:\n  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-\n  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455\n  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455\n\n* Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.",
        ),
    ] = None
    name: Annotated[
        Optional[str],
        Field(
            description="The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service."
        ),
    ] = None
    node_port: Annotated[
        Optional[int],
        Field(
            alias="nodePort",
            description="The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport",
        ),
    ] = None
    port: Annotated[int, Field(description="The port that will be exposed by this service.")]
    protocol: Annotated[
        Optional[str],
        Field(
            description='The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.'
        ),
    ] = None
    target_port: Annotated[
        Optional[apimachinery.IntOrString],
        Field(
            alias="targetPort",
            description="Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service",
        ),
    ] = None


class ServiceSpec(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ServiceSpec":
            return ServiceSpec(**self._attrs)

        def allocate_load_balancer_node_ports(self, value: Optional[bool]) -> Self:
            return self._set("allocate_load_balancer_node_ports", value)

        def cluster_ip(self, value: Optional[str]) -> Self:
            return self._set("cluster_ip", value)

        def cluster_i_ps(self, value: Optional[List[str]]) -> Self:
            return self._set("cluster_i_ps", value)

        def external_i_ps(self, value: Optional[List[str]]) -> Self:
            return self._set("external_i_ps", value)

        def external_name(self, value: Optional[str]) -> Self:
            return self._set("external_name", value)

        def external_traffic_policy(self, value: Optional[str]) -> Self:
            return self._set("external_traffic_policy", value)

        def health_check_node_port(self, value: Optional[int]) -> Self:
            return self._set("health_check_node_port", value)

        def internal_traffic_policy(self, value: Optional[str]) -> Self:
            return self._set("internal_traffic_policy", value)

        def ip_families(self, value: Optional[List[str]]) -> Self:
            return self._set("ip_families", value)

        def ip_family_policy(self, value: Optional[str]) -> Self:
            return self._set("ip_family_policy", value)

        def load_balancer_class(self, value: Optional[str]) -> Self:
            return self._set("load_balancer_class", value)

        def load_balancer_ip(self, value: Optional[str]) -> Self:
            return self._set("load_balancer_ip", value)

        def load_balancer_source_ranges(self, value: Optional[List[str]]) -> Self:
            return self._set("load_balancer_source_ranges", value)

        def ports(
            self,
            value_or_callback: Union[
                Optional[List[ServicePort]],
                Callable[[Type[ServicePort]], List[ServicePort]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ServicePort)
            return self._set("ports", value)

        def publish_not_ready_addresses(self, value: Optional[bool]) -> Self:
            return self._set("publish_not_ready_addresses", value)

        def selector(self, value: Optional[Dict[str, str]]) -> Self:
            return self._set("selector", value)

        def session_affinity(self, value: Optional[str]) -> Self:
            return self._set("session_affinity", value)

        def session_affinity_config(
            self,
            value_or_callback: Union[
                Optional[SessionAffinityConfig],
                Callable[[Type[SessionAffinityConfig]], SessionAffinityConfig],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SessionAffinityConfig)
            return self._set("session_affinity_config", value)

        def traffic_distribution(self, value: Optional[str]) -> Self:
            return self._set("traffic_distribution", value)

        def type(self, value: Optional[str]) -> Self:
            return self._set("type", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    allocate_load_balancer_node_ports: Annotated[
        Optional[bool],
        Field(
            alias="allocateLoadBalancerNodePorts",
            description='allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.',
        ),
    ] = None
    cluster_ip: Annotated[
        Optional[str],
        Field(
            alias="clusterIP",
            description='clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies',
        ),
    ] = None
    cluster_i_ps: Annotated[
        Optional[List[str]],
        Field(
            alias="clusterIPs",
            description='ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.\n\nThis field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies',
        ),
    ] = None
    external_i_ps: Annotated[
        Optional[List[str]],
        Field(
            alias="externalIPs",
            description="externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.",
        ),
    ] = None
    external_name: Annotated[
        Optional[str],
        Field(
            alias="externalName",
            description='externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".',
        ),
    ] = None
    external_traffic_policy: Annotated[
        Optional[str],
        Field(
            alias="externalTrafficPolicy",
            description='externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service\'s "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get "Cluster" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.',
        ),
    ] = None
    health_check_node_port: Annotated[
        Optional[int],
        Field(
            alias="healthCheckNodePort",
            description="healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.",
        ),
    ] = None
    internal_traffic_policy: Annotated[
        Optional[str],
        Field(
            alias="internalTrafficPolicy",
            description='InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to "Local", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).',
        ),
    ] = None
    ip_families: Annotated[
        Optional[List[str]],
        Field(
            alias="ipFamilies",
            description='IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.\n\nThis field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.',
        ),
    ] = None
    ip_family_policy: Annotated[
        Optional[str],
        Field(
            alias="ipFamilyPolicy",
            description='IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.',
        ),
    ] = None
    load_balancer_class: Annotated[
        Optional[str],
        Field(
            alias="loadBalancerClass",
            description="loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. \"internal-vip\" or \"example.com/internal-vip\". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.",
        ),
    ] = None
    load_balancer_ip: Annotated[
        Optional[str],
        Field(
            alias="loadBalancerIP",
            description="Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations. Using it is non-portable and it may not support dual-stack. Users are encouraged to use implementation-specific annotations when available.",
        ),
    ] = None
    load_balancer_source_ranges: Annotated[
        Optional[List[str]],
        Field(
            alias="loadBalancerSourceRanges",
            description='If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/',
        ),
    ] = None
    ports: Annotated[
        Optional[List[ServicePort]],
        Field(
            description="The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
        ),
    ] = None
    publish_not_ready_addresses: Annotated[
        Optional[bool],
        Field(
            alias="publishNotReadyAddresses",
            description='publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet\'s Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.',
        ),
    ] = None
    selector: Annotated[
        Optional[Dict[str, str]],
        Field(
            description="Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/"
        ),
    ] = None
    session_affinity: Annotated[
        Optional[str],
        Field(
            alias="sessionAffinity",
            description='Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies',
        ),
    ] = None
    session_affinity_config: Annotated[
        Optional[SessionAffinityConfig],
        Field(
            alias="sessionAffinityConfig",
            description="sessionAffinityConfig contains the configurations of session affinity.",
        ),
    ] = None
    traffic_distribution: Annotated[
        Optional[str],
        Field(
            alias="trafficDistribution",
            description='TrafficDistribution offers a way to express preferences for how traffic is distributed to Service endpoints. Implementations can use this field as a hint, but are not required to guarantee strict adherence. If the field is not set, the implementation will apply its default routing strategy. If set to "PreferClose", implementations should prioritize endpoints that are topologically close (e.g., same zone). This is an alpha field and requires enabling ServiceTrafficDistribution feature.',
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(
            description='type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
        ),
    ] = None


class TCPSocketAction(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "TCPSocketAction":
            return TCPSocketAction(**self._attrs)

        def host(self, value: Optional[str]) -> Self:
            return self._set("host", value)

        def port(
            self,
            value_or_callback: Union[
                apimachinery.IntOrString,
                Callable[[Type[apimachinery.IntOrString]], apimachinery.IntOrString],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.IntOrString)
            return self._set("port", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    host: Annotated[
        Optional[str],
        Field(description="Optional: Host name to connect to, defaults to the pod IP."),
    ] = None
    port: Annotated[
        apimachinery.IntOrString,
        Field(
            description="Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        ),
    ]


class Taint(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "Taint":
            return Taint(**self._attrs)

        def effect(self, value: str) -> Self:
            return self._set("effect", value)

        def key(self, value: str) -> Self:
            return self._set("key", value)

        def time_added(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Time],
                Callable[[Type[apimachinery.Time]], apimachinery.Time],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Time)
            return self._set("time_added", value)

        def value(self, value: Optional[str]) -> Self:
            return self._set("value", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    effect: Annotated[
        str,
        Field(
            description="Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute."
        ),
    ]
    key: Annotated[str, Field(description="Required. The taint key to be applied to a node.")]
    time_added: Annotated[
        Optional[apimachinery.Time],
        Field(
            alias="timeAdded",
            description="TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.",
        ),
    ] = None
    value: Annotated[
        Optional[str],
        Field(description="The taint value corresponding to the taint key."),
    ] = None


class VolumeNodeAffinity(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "VolumeNodeAffinity":
            return VolumeNodeAffinity(**self._attrs)

        def required(
            self,
            value_or_callback: Union[
                Optional[NodeSelector], Callable[[Type[NodeSelector]], NodeSelector]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeSelector)
            return self._set("required", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    required: Annotated[
        Optional[NodeSelector],
        Field(description="required specifies hard node constraints that must be met."),
    ] = None


class VolumeResourceRequirements(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "VolumeResourceRequirements":
            return VolumeResourceRequirements(**self._attrs)

        def limits(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("limits", value)

        def requests(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("requests", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    limits: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(
            description="Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
        ),
    ] = None
    requests: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(
            description="Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
        ),
    ] = None


class Binding(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "Binding":
            return Binding(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["Binding"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def target(
            self,
            value_or_callback: Union[
                ObjectReference, Callable[[Type[ObjectReference]], ObjectReference]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ObjectReference)
            return self._set("target", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "v1"
    kind: Annotated[
        Optional[Literal["Binding"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "Binding"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    target: Annotated[
        ObjectReference,
        Field(description="The target object that you want to bind to the standard object."),
    ]


class ClusterTrustBundleProjection(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ClusterTrustBundleProjection":
            return ClusterTrustBundleProjection(**self._attrs)

        def label_selector(
            self,
            value_or_callback: Union[
                Optional[apimachinery.LabelSelector],
                Callable[[Type[apimachinery.LabelSelector]], apimachinery.LabelSelector],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.LabelSelector)
            return self._set("label_selector", value)

        def name(self, value: Optional[str]) -> Self:
            return self._set("name", value)

        def optional(self, value: Optional[bool]) -> Self:
            return self._set("optional", value)

        def path(self, value: str) -> Self:
            return self._set("path", value)

        def signer_name(self, value: Optional[str]) -> Self:
            return self._set("signer_name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    label_selector: Annotated[
        Optional[apimachinery.LabelSelector],
        Field(
            alias="labelSelector",
            description='Select all ClusterTrustBundles that match this label selector.  Only has effect if signerName is set.  Mutually-exclusive with name.  If unset, interpreted as "match nothing".  If set but empty, interpreted as "match everything".',
        ),
    ] = None
    name: Annotated[
        Optional[str],
        Field(
            description="Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and labelSelector."
        ),
    ] = None
    optional: Annotated[
        Optional[bool],
        Field(
            description="If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles."
        ),
    ] = None
    path: Annotated[
        str,
        Field(description="Relative path from the volume root to write the bundle."),
    ]
    signer_name: Annotated[
        Optional[str],
        Field(
            alias="signerName",
            description="Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The contents of all selected ClusterTrustBundles will be unified and deduplicated.",
        ),
    ] = None


class ComponentStatus(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "ComponentStatus":
            return ComponentStatus(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]]) -> Self:
            return self._set("api_version", value)

        def conditions(
            self,
            value_or_callback: Union[
                Optional[List[ComponentCondition]],
                Callable[[Type[ComponentCondition]], List[ComponentCondition]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ComponentCondition)
            return self._set("conditions", value)

        def kind(self, value: Optional[Literal["ComponentStatus"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "v1"
    conditions: Annotated[
        Optional[List[ComponentCondition]],
        Field(description="List of component conditions observed"),
    ] = None
    kind: Annotated[
        Optional[Literal["ComponentStatus"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "ComponentStatus"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None


ComponentStatusList = ResourceList["ComponentStatus"]


class ConfigMap(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "ConfigMap":
            return ConfigMap(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]]) -> Self:
            return self._set("api_version", value)

        def binary_data(self, value: Optional[Dict[str, str]]) -> Self:
            return self._set("binary_data", value)

        def data(self, value: Optional[Dict[str, str]]) -> Self:
            return self._set("data", value)

        def immutable(self, value: Optional[bool]) -> Self:
            return self._set("immutable", value)

        def kind(self, value: Optional[Literal["ConfigMap"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "v1"
    binary_data: Annotated[
        Optional[Dict[str, str]],
        Field(
            alias="binaryData",
            description="BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.",
        ),
    ] = None
    data: Annotated[
        Optional[Dict[str, str]],
        Field(
            description="Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process."
        ),
    ] = None
    immutable: Annotated[
        Optional[bool],
        Field(
            description="Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil."
        ),
    ] = None
    kind: Annotated[
        Optional[Literal["ConfigMap"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "ConfigMap"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None


ConfigMapList = ResourceList["ConfigMap"]


class ContainerState(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ContainerState":
            return ContainerState(**self._attrs)

        def running(
            self,
            value_or_callback: Union[
                Optional[ContainerStateRunning],
                Callable[[Type[ContainerStateRunning]], ContainerStateRunning],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ContainerStateRunning)
            return self._set("running", value)

        def terminated(
            self,
            value_or_callback: Union[
                Optional[ContainerStateTerminated],
                Callable[[Type[ContainerStateTerminated]], ContainerStateTerminated],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ContainerStateTerminated)
            return self._set("terminated", value)

        def waiting(
            self,
            value_or_callback: Union[
                Optional[ContainerStateWaiting],
                Callable[[Type[ContainerStateWaiting]], ContainerStateWaiting],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ContainerStateWaiting)
            return self._set("waiting", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    running: Annotated[
        Optional[ContainerStateRunning],
        Field(description="Details about a running container"),
    ] = None
    terminated: Annotated[
        Optional[ContainerStateTerminated],
        Field(description="Details about a terminated container"),
    ] = None
    waiting: Annotated[
        Optional[ContainerStateWaiting],
        Field(description="Details about a waiting container"),
    ] = None


class ContainerStatus(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ContainerStatus":
            return ContainerStatus(**self._attrs)

        def allocated_resources(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("allocated_resources", value)

        def allocated_resources_status(
            self,
            value_or_callback: Union[
                Optional[List[ResourceStatus]],
                Callable[[Type[ResourceStatus]], List[ResourceStatus]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ResourceStatus)
            return self._set("allocated_resources_status", value)

        def container_id(self, value: Optional[str]) -> Self:
            return self._set("container_id", value)

        def image(self, value: str) -> Self:
            return self._set("image", value)

        def image_id(self, value: str) -> Self:
            return self._set("image_id", value)

        def last_state(
            self,
            value_or_callback: Union[
                Optional[ContainerState],
                Callable[[Type[ContainerState]], ContainerState],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ContainerState)
            return self._set("last_state", value)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def ready(self, value: bool) -> Self:
            return self._set("ready", value)

        def resources(
            self,
            value_or_callback: Union[
                Optional[ResourceRequirements],
                Callable[[Type[ResourceRequirements]], ResourceRequirements],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ResourceRequirements)
            return self._set("resources", value)

        def restart_count(self, value: int) -> Self:
            return self._set("restart_count", value)

        def started(self, value: Optional[bool]) -> Self:
            return self._set("started", value)

        def state(
            self,
            value_or_callback: Union[
                Optional[ContainerState],
                Callable[[Type[ContainerState]], ContainerState],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ContainerState)
            return self._set("state", value)

        def user(
            self,
            value_or_callback: Union[
                Optional[ContainerUser], Callable[[Type[ContainerUser]], ContainerUser]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ContainerUser)
            return self._set("user", value)

        def volume_mounts(
            self,
            value_or_callback: Union[
                Optional[List[VolumeMountStatus]],
                Callable[[Type[VolumeMountStatus]], List[VolumeMountStatus]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(VolumeMountStatus)
            return self._set("volume_mounts", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    allocated_resources: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(
            alias="allocatedResources",
            description="AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.",
        ),
    ] = None
    allocated_resources_status: Annotated[
        Optional[List[ResourceStatus]],
        Field(
            alias="allocatedResourcesStatus",
            description="AllocatedResourcesStatus represents the status of various resources allocated for this Pod.",
        ),
    ] = None
    container_id: Annotated[
        Optional[str],
        Field(
            alias="containerID",
            description="ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example \"containerd\").",
        ),
    ] = None
    image: Annotated[
        str,
        Field(
            description="Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images."
        ),
    ]
    image_id: Annotated[
        str,
        Field(
            alias="imageID",
            description="ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.",
        ),
    ]
    last_state: Annotated[
        Optional[ContainerState],
        Field(
            alias="lastState",
            description="LastTerminationState holds the last termination state of the container to help debug container crashes and restarts. This field is not populated if the container is still running and RestartCount is 0.",
        ),
    ] = None
    name: Annotated[
        str,
        Field(
            description="Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated."
        ),
    ]
    ready: Annotated[
        bool,
        Field(
            description="Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).\n\nThe value is typically used to determine whether a container is ready to accept traffic."
        ),
    ]
    resources: Annotated[
        Optional[ResourceRequirements],
        Field(
            description="Resources represents the compute resource requests and limits that have been successfully enacted on the running container after it has been started or has been successfully resized."
        ),
    ] = None
    restart_count: Annotated[
        int,
        Field(
            alias="restartCount",
            description="RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.",
        ),
    ]
    started: Annotated[
        Optional[bool],
        Field(
            description="Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false."
        ),
    ] = None
    state: Annotated[
        Optional[ContainerState],
        Field(description="State holds details about the container's current condition."),
    ] = None
    user: Annotated[
        Optional[ContainerUser],
        Field(
            description="User represents user identity information initially attached to the first process of the container"
        ),
    ] = None
    volume_mounts: Annotated[
        Optional[List[VolumeMountStatus]],
        Field(alias="volumeMounts", description="Status of volume mounts."),
    ] = None


class DownwardAPIVolumeFile(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "DownwardAPIVolumeFile":
            return DownwardAPIVolumeFile(**self._attrs)

        def field_ref(
            self,
            value_or_callback: Union[
                Optional[ObjectFieldSelector],
                Callable[[Type[ObjectFieldSelector]], ObjectFieldSelector],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ObjectFieldSelector)
            return self._set("field_ref", value)

        def mode(self, value: Optional[int]) -> Self:
            return self._set("mode", value)

        def path(self, value: str) -> Self:
            return self._set("path", value)

        def resource_field_ref(
            self,
            value_or_callback: Union[
                Optional[ResourceFieldSelector],
                Callable[[Type[ResourceFieldSelector]], ResourceFieldSelector],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ResourceFieldSelector)
            return self._set("resource_field_ref", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    field_ref: Annotated[
        Optional[ObjectFieldSelector],
        Field(
            alias="fieldRef",
            description="Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.",
        ),
    ] = None
    mode: Annotated[
        Optional[int],
        Field(
            description="Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
        ),
    ] = None
    path: Annotated[
        str,
        Field(
            description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
        ),
    ]
    resource_field_ref: Annotated[
        Optional[ResourceFieldSelector],
        Field(
            alias="resourceFieldRef",
            description="Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
        ),
    ] = None


class DownwardAPIVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "DownwardAPIVolumeSource":
            return DownwardAPIVolumeSource(**self._attrs)

        def default_mode(self, value: Optional[int]) -> Self:
            return self._set("default_mode", value)

        def items(
            self,
            value_or_callback: Union[
                Optional[List[DownwardAPIVolumeFile]],
                Callable[[Type[DownwardAPIVolumeFile]], List[DownwardAPIVolumeFile]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(DownwardAPIVolumeFile)
            return self._set("items", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    default_mode: Annotated[
        Optional[int],
        Field(
            alias="defaultMode",
            description="Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
        ),
    ] = None
    items: Annotated[
        Optional[List[DownwardAPIVolumeFile]],
        Field(description="Items is a list of downward API volume file"),
    ] = None


class Endpoints(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "Endpoints":
            return Endpoints(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["Endpoints"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def subsets(
            self,
            value_or_callback: Union[
                Optional[List[EndpointSubset]],
                Callable[[Type[EndpointSubset]], List[EndpointSubset]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(EndpointSubset)
            return self._set("subsets", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "v1"
    kind: Annotated[
        Optional[Literal["Endpoints"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "Endpoints"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    subsets: Annotated[
        Optional[List[EndpointSubset]],
        Field(
            description="The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service."
        ),
    ] = None


EndpointsList = ResourceList["Endpoints"]


class EnvVarSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "EnvVarSource":
            return EnvVarSource(**self._attrs)

        def config_map_key_ref(
            self,
            value_or_callback: Union[
                Optional[ConfigMapKeySelector],
                Callable[[Type[ConfigMapKeySelector]], ConfigMapKeySelector],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ConfigMapKeySelector)
            return self._set("config_map_key_ref", value)

        def field_ref(
            self,
            value_or_callback: Union[
                Optional[ObjectFieldSelector],
                Callable[[Type[ObjectFieldSelector]], ObjectFieldSelector],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ObjectFieldSelector)
            return self._set("field_ref", value)

        def resource_field_ref(
            self,
            value_or_callback: Union[
                Optional[ResourceFieldSelector],
                Callable[[Type[ResourceFieldSelector]], ResourceFieldSelector],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ResourceFieldSelector)
            return self._set("resource_field_ref", value)

        def secret_key_ref(
            self,
            value_or_callback: Union[
                Optional[SecretKeySelector],
                Callable[[Type[SecretKeySelector]], SecretKeySelector],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SecretKeySelector)
            return self._set("secret_key_ref", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    config_map_key_ref: Annotated[
        Optional[ConfigMapKeySelector],
        Field(alias="configMapKeyRef", description="Selects a key of a ConfigMap."),
    ] = None
    field_ref: Annotated[
        Optional[ObjectFieldSelector],
        Field(
            alias="fieldRef",
            description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
        ),
    ] = None
    resource_field_ref: Annotated[
        Optional[ResourceFieldSelector],
        Field(
            alias="resourceFieldRef",
            description="Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
        ),
    ] = None
    secret_key_ref: Annotated[
        Optional[SecretKeySelector],
        Field(
            alias="secretKeyRef",
            description="Selects a key of a secret in the pod's namespace",
        ),
    ] = None


class Event(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "Event":
            return Event(**self._attrs)

        def action(self, value: Optional[str]) -> Self:
            return self._set("action", value)

        def api_version(self, value: Optional[Literal["v1"]]) -> Self:
            return self._set("api_version", value)

        def count(self, value: Optional[int]) -> Self:
            return self._set("count", value)

        def event_time(
            self,
            value_or_callback: Union[
                Optional[apimachinery.MicroTime],
                Callable[[Type[apimachinery.MicroTime]], apimachinery.MicroTime],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.MicroTime)
            return self._set("event_time", value)

        def first_timestamp(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Time],
                Callable[[Type[apimachinery.Time]], apimachinery.Time],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Time)
            return self._set("first_timestamp", value)

        def involved_object(
            self,
            value_or_callback: Union[
                ObjectReference, Callable[[Type[ObjectReference]], ObjectReference]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ObjectReference)
            return self._set("involved_object", value)

        def kind(self, value: Optional[Literal["Event"]]) -> Self:
            return self._set("kind", value)

        def last_timestamp(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Time],
                Callable[[Type[apimachinery.Time]], apimachinery.Time],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Time)
            return self._set("last_timestamp", value)

        def message(self, value: Optional[str]) -> Self:
            return self._set("message", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def reason(self, value: Optional[str]) -> Self:
            return self._set("reason", value)

        def related(
            self,
            value_or_callback: Union[
                Optional[ObjectReference],
                Callable[[Type[ObjectReference]], ObjectReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ObjectReference)
            return self._set("related", value)

        def reporting_component(self, value: Optional[str]) -> Self:
            return self._set("reporting_component", value)

        def reporting_instance(self, value: Optional[str]) -> Self:
            return self._set("reporting_instance", value)

        def series(
            self,
            value_or_callback: Union[
                Optional[EventSeries], Callable[[Type[EventSeries]], EventSeries]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(EventSeries)
            return self._set("series", value)

        def source(
            self,
            value_or_callback: Union[
                Optional[EventSource], Callable[[Type[EventSource]], EventSource]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(EventSource)
            return self._set("source", value)

        def type(self, value: Optional[str]) -> Self:
            return self._set("type", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    action: Annotated[
        Optional[str],
        Field(description="What action was taken/failed regarding to the Regarding object."),
    ] = None
    api_version: Annotated[
        Optional[Literal["v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "v1"
    count: Annotated[
        Optional[int], Field(description="The number of times this event has occurred.")
    ] = None
    event_time: Annotated[
        Optional[apimachinery.MicroTime],
        Field(alias="eventTime", description="Time when this Event was first observed."),
    ] = None
    first_timestamp: Annotated[
        Optional[apimachinery.Time],
        Field(
            alias="firstTimestamp",
            description="The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)",
        ),
    ] = None
    involved_object: Annotated[
        ObjectReference,
        Field(alias="involvedObject", description="The object that this event is about."),
    ]
    kind: Annotated[
        Optional[Literal["Event"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "Event"
    last_timestamp: Annotated[
        Optional[apimachinery.Time],
        Field(
            alias="lastTimestamp",
            description="The time at which the most recent occurrence of this event was recorded.",
        ),
    ] = None
    message: Annotated[
        Optional[str],
        Field(description="A human-readable description of the status of this operation."),
    ] = None
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    reason: Annotated[
        Optional[str],
        Field(
            description="This should be a short, machine understandable string that gives the reason for the transition into the object's current status."
        ),
    ] = None
    related: Annotated[
        Optional[ObjectReference],
        Field(description="Optional secondary object for more complex actions."),
    ] = None
    reporting_component: Annotated[
        Optional[str],
        Field(
            alias="reportingComponent",
            description="Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.",
        ),
    ] = None
    reporting_instance: Annotated[
        Optional[str],
        Field(
            alias="reportingInstance",
            description="ID of the controller instance, e.g. `kubelet-xyzf`.",
        ),
    ] = None
    series: Annotated[
        Optional[EventSeries],
        Field(
            description="Data about the Event series this event represents or nil if it's a singleton Event."
        ),
    ] = None
    source: Annotated[
        Optional[EventSource],
        Field(
            description="The component reporting this event. Should be a short machine understandable string."
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(
            description="Type of this event (Normal, Warning), new types could be added in the future"
        ),
    ] = None


EventList = ResourceList["Event"]


class LifecycleHandler(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "LifecycleHandler":
            return LifecycleHandler(**self._attrs)

        def exec(
            self,
            value_or_callback: Union[
                Optional[ExecAction], Callable[[Type[ExecAction]], ExecAction]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ExecAction)
            return self._set("exec", value)

        def http_get(
            self,
            value_or_callback: Union[
                Optional[HTTPGetAction], Callable[[Type[HTTPGetAction]], HTTPGetAction]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(HTTPGetAction)
            return self._set("http_get", value)

        def sleep(
            self,
            value_or_callback: Union[
                Optional[SleepAction], Callable[[Type[SleepAction]], SleepAction]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SleepAction)
            return self._set("sleep", value)

        def tcp_socket(
            self,
            value_or_callback: Union[
                Optional[TCPSocketAction],
                Callable[[Type[TCPSocketAction]], TCPSocketAction],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(TCPSocketAction)
            return self._set("tcp_socket", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    exec: Annotated[
        Optional[ExecAction], Field(description="Exec specifies the action to take.")
    ] = None
    http_get: Annotated[
        Optional[HTTPGetAction],
        Field(
            alias="httpGet",
            description="HTTPGet specifies the http request to perform.",
        ),
    ] = None
    sleep: Annotated[
        Optional[SleepAction],
        Field(
            description="Sleep represents the duration that the container should sleep before being terminated."
        ),
    ] = None
    tcp_socket: Annotated[
        Optional[TCPSocketAction],
        Field(
            alias="tcpSocket",
            description="Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.",
        ),
    ] = None


class LimitRange(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "LimitRange":
            return LimitRange(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["LimitRange"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[
                Optional[LimitRangeSpec],
                Callable[[Type[LimitRangeSpec]], LimitRangeSpec],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LimitRangeSpec)
            return self._set("spec", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "v1"
    kind: Annotated[
        Optional[Literal["LimitRange"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "LimitRange"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    spec: Annotated[
        Optional[LimitRangeSpec],
        Field(
            description="Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None


LimitRangeList = ResourceList["LimitRange"]


class Namespace(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "Namespace":
            return Namespace(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["Namespace"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[
                Optional[NamespaceSpec], Callable[[Type[NamespaceSpec]], NamespaceSpec]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NamespaceSpec)
            return self._set("spec", value)

        def status(
            self,
            value_or_callback: Union[
                Optional[NamespaceStatus],
                Callable[[Type[NamespaceStatus]], NamespaceStatus],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NamespaceStatus)
            return self._set("status", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "v1"
    kind: Annotated[
        Optional[Literal["Namespace"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "Namespace"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    spec: Annotated[
        Optional[NamespaceSpec],
        Field(
            description="Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None
    status: Annotated[
        Optional[NamespaceStatus],
        Field(
            description="Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None


NamespaceList = ResourceList["Namespace"]


class NodeAffinity(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NodeAffinity":
            return NodeAffinity(**self._attrs)

        def preferred_during_scheduling_ignored_during_execution(
            self,
            value_or_callback: Union[
                Optional[List[PreferredSchedulingTerm]],
                Callable[[Type[PreferredSchedulingTerm]], List[PreferredSchedulingTerm]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PreferredSchedulingTerm)
            return self._set("preferred_during_scheduling_ignored_during_execution", value)

        def required_during_scheduling_ignored_during_execution(
            self,
            value_or_callback: Union[
                Optional[NodeSelector], Callable[[Type[NodeSelector]], NodeSelector]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeSelector)
            return self._set("required_during_scheduling_ignored_during_execution", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    preferred_during_scheduling_ignored_during_execution: Annotated[
        Optional[List[PreferredSchedulingTerm]],
        Field(
            alias="preferredDuringSchedulingIgnoredDuringExecution",
            description='The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.',
        ),
    ] = None
    required_during_scheduling_ignored_during_execution: Annotated[
        Optional[NodeSelector],
        Field(
            alias="requiredDuringSchedulingIgnoredDuringExecution",
            description="If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
        ),
    ] = None


class NodeSpec(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "NodeSpec":
            return NodeSpec(**self._attrs)

        def config_source(
            self,
            value_or_callback: Union[
                Optional[NodeConfigSource],
                Callable[[Type[NodeConfigSource]], NodeConfigSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeConfigSource)
            return self._set("config_source", value)

        def external_id(self, value: Optional[str]) -> Self:
            return self._set("external_id", value)

        def pod_cidr(self, value: Optional[str]) -> Self:
            return self._set("pod_cidr", value)

        def pod_cid_rs(self, value: Optional[List[str]]) -> Self:
            return self._set("pod_cid_rs", value)

        def provider_id(self, value: Optional[str]) -> Self:
            return self._set("provider_id", value)

        def taints(
            self,
            value_or_callback: Union[Optional[List[Taint]], Callable[[Type[Taint]], List[Taint]]],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Taint)
            return self._set("taints", value)

        def unschedulable(self, value: Optional[bool]) -> Self:
            return self._set("unschedulable", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    config_source: Annotated[
        Optional[NodeConfigSource],
        Field(
            alias="configSource",
            description="Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.",
        ),
    ] = None
    external_id: Annotated[
        Optional[str],
        Field(
            alias="externalID",
            description="Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966",
        ),
    ] = None
    pod_cidr: Annotated[
        Optional[str],
        Field(
            alias="podCIDR",
            description="PodCIDR represents the pod IP range assigned to the node.",
        ),
    ] = None
    pod_cid_rs: Annotated[
        Optional[List[str]],
        Field(
            alias="podCIDRs",
            description="podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.",
        ),
    ] = None
    provider_id: Annotated[
        Optional[str],
        Field(
            alias="providerID",
            description="ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>",
        ),
    ] = None
    taints: Annotated[
        Optional[List[Taint]], Field(description="If specified, the node's taints.")
    ] = None
    unschedulable: Annotated[
        Optional[bool],
        Field(
            description="Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration"
        ),
    ] = None


class PersistentVolumeClaimSpec(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PersistentVolumeClaimSpec":
            return PersistentVolumeClaimSpec(**self._attrs)

        def access_modes(self, value: Optional[List[str]]) -> Self:
            return self._set("access_modes", value)

        def data_source(
            self,
            value_or_callback: Union[
                Optional[TypedLocalObjectReference],
                Callable[[Type[TypedLocalObjectReference]], TypedLocalObjectReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(TypedLocalObjectReference)
            return self._set("data_source", value)

        def data_source_ref(
            self,
            value_or_callback: Union[
                Optional[TypedObjectReference],
                Callable[[Type[TypedObjectReference]], TypedObjectReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(TypedObjectReference)
            return self._set("data_source_ref", value)

        def resources(
            self,
            value_or_callback: Union[
                Optional[VolumeResourceRequirements],
                Callable[[Type[VolumeResourceRequirements]], VolumeResourceRequirements],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(VolumeResourceRequirements)
            return self._set("resources", value)

        def selector(
            self,
            value_or_callback: Union[
                Optional[apimachinery.LabelSelector],
                Callable[[Type[apimachinery.LabelSelector]], apimachinery.LabelSelector],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.LabelSelector)
            return self._set("selector", value)

        def storage_class_name(self, value: Optional[str]) -> Self:
            return self._set("storage_class_name", value)

        def volume_attributes_class_name(self, value: Optional[str]) -> Self:
            return self._set("volume_attributes_class_name", value)

        def volume_mode(self, value: Optional[str]) -> Self:
            return self._set("volume_mode", value)

        def volume_name(self, value: Optional[str]) -> Self:
            return self._set("volume_name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    access_modes: Annotated[
        Optional[List[str]],
        Field(
            alias="accessModes",
            description="accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
        ),
    ] = None
    data_source: Annotated[
        Optional[TypedLocalObjectReference],
        Field(
            alias="dataSource",
            description="dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.",
        ),
    ] = None
    data_source_ref: Annotated[
        Optional[TypedObjectReference],
        Field(
            alias="dataSourceRef",
            description="dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
        ),
    ] = None
    resources: Annotated[
        Optional[VolumeResourceRequirements],
        Field(
            description="resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources"
        ),
    ] = None
    selector: Annotated[
        Optional[apimachinery.LabelSelector],
        Field(description="selector is a label query over volumes to consider for binding."),
    ] = None
    storage_class_name: Annotated[
        Optional[str],
        Field(
            alias="storageClassName",
            description="storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
        ),
    ] = None
    volume_attributes_class_name: Annotated[
        Optional[str],
        Field(
            alias="volumeAttributesClassName",
            description="volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim. If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName, it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass will be applied to the claim but it's not allowed to reset this field to empty string once it is set. If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set by the persistentvolume controller if it exists. If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/ (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).",
        ),
    ] = None
    volume_mode: Annotated[
        Optional[str],
        Field(
            alias="volumeMode",
            description="volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
        ),
    ] = None
    volume_name: Annotated[
        Optional[str],
        Field(
            alias="volumeName",
            description="volumeName is the binding reference to the PersistentVolume backing this claim.",
        ),
    ] = None


class PersistentVolumeClaimTemplate(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PersistentVolumeClaimTemplate":
            return PersistentVolumeClaimTemplate(**self._attrs)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[
                PersistentVolumeClaimSpec,
                Callable[[Type[PersistentVolumeClaimSpec]], PersistentVolumeClaimSpec],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PersistentVolumeClaimSpec)
            return self._set("spec", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation."
        ),
    ] = None
    spec: Annotated[
        PersistentVolumeClaimSpec,
        Field(
            description="The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here."
        ),
    ]


class PersistentVolumeSpec(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PersistentVolumeSpec":
            return PersistentVolumeSpec(**self._attrs)

        def access_modes(self, value: Optional[List[str]]) -> Self:
            return self._set("access_modes", value)

        def aws_elastic_block_store(
            self,
            value_or_callback: Union[
                Optional[AWSElasticBlockStoreVolumeSource],
                Callable[
                    [Type[AWSElasticBlockStoreVolumeSource]],
                    AWSElasticBlockStoreVolumeSource,
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(AWSElasticBlockStoreVolumeSource)
            return self._set("aws_elastic_block_store", value)

        def azure_disk(
            self,
            value_or_callback: Union[
                Optional[AzureDiskVolumeSource],
                Callable[[Type[AzureDiskVolumeSource]], AzureDiskVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(AzureDiskVolumeSource)
            return self._set("azure_disk", value)

        def azure_file(
            self,
            value_or_callback: Union[
                Optional[AzureFilePersistentVolumeSource],
                Callable[
                    [Type[AzureFilePersistentVolumeSource]],
                    AzureFilePersistentVolumeSource,
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(AzureFilePersistentVolumeSource)
            return self._set("azure_file", value)

        def capacity(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("capacity", value)

        def cephfs(
            self,
            value_or_callback: Union[
                Optional[CephFSPersistentVolumeSource],
                Callable[[Type[CephFSPersistentVolumeSource]], CephFSPersistentVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(CephFSPersistentVolumeSource)
            return self._set("cephfs", value)

        def cinder(
            self,
            value_or_callback: Union[
                Optional[CinderPersistentVolumeSource],
                Callable[[Type[CinderPersistentVolumeSource]], CinderPersistentVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(CinderPersistentVolumeSource)
            return self._set("cinder", value)

        def claim_ref(
            self,
            value_or_callback: Union[
                Optional[ObjectReference],
                Callable[[Type[ObjectReference]], ObjectReference],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ObjectReference)
            return self._set("claim_ref", value)

        def csi(
            self,
            value_or_callback: Union[
                Optional[CSIPersistentVolumeSource],
                Callable[[Type[CSIPersistentVolumeSource]], CSIPersistentVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(CSIPersistentVolumeSource)
            return self._set("csi", value)

        def fc(
            self,
            value_or_callback: Union[
                Optional[FCVolumeSource],
                Callable[[Type[FCVolumeSource]], FCVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(FCVolumeSource)
            return self._set("fc", value)

        def flex_volume(
            self,
            value_or_callback: Union[
                Optional[FlexPersistentVolumeSource],
                Callable[[Type[FlexPersistentVolumeSource]], FlexPersistentVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(FlexPersistentVolumeSource)
            return self._set("flex_volume", value)

        def flocker(
            self,
            value_or_callback: Union[
                Optional[FlockerVolumeSource],
                Callable[[Type[FlockerVolumeSource]], FlockerVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(FlockerVolumeSource)
            return self._set("flocker", value)

        def gce_persistent_disk(
            self,
            value_or_callback: Union[
                Optional[GCEPersistentDiskVolumeSource],
                Callable[[Type[GCEPersistentDiskVolumeSource]], GCEPersistentDiskVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(GCEPersistentDiskVolumeSource)
            return self._set("gce_persistent_disk", value)

        def glusterfs(
            self,
            value_or_callback: Union[
                Optional[GlusterfsPersistentVolumeSource],
                Callable[
                    [Type[GlusterfsPersistentVolumeSource]],
                    GlusterfsPersistentVolumeSource,
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(GlusterfsPersistentVolumeSource)
            return self._set("glusterfs", value)

        def host_path(
            self,
            value_or_callback: Union[
                Optional[HostPathVolumeSource],
                Callable[[Type[HostPathVolumeSource]], HostPathVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(HostPathVolumeSource)
            return self._set("host_path", value)

        def iscsi(
            self,
            value_or_callback: Union[
                Optional[ISCSIPersistentVolumeSource],
                Callable[[Type[ISCSIPersistentVolumeSource]], ISCSIPersistentVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ISCSIPersistentVolumeSource)
            return self._set("iscsi", value)

        def local(
            self,
            value_or_callback: Union[
                Optional[LocalVolumeSource],
                Callable[[Type[LocalVolumeSource]], LocalVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LocalVolumeSource)
            return self._set("local", value)

        def mount_options(self, value: Optional[List[str]]) -> Self:
            return self._set("mount_options", value)

        def nfs(
            self,
            value_or_callback: Union[
                Optional[NFSVolumeSource],
                Callable[[Type[NFSVolumeSource]], NFSVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NFSVolumeSource)
            return self._set("nfs", value)

        def node_affinity(
            self,
            value_or_callback: Union[
                Optional[VolumeNodeAffinity],
                Callable[[Type[VolumeNodeAffinity]], VolumeNodeAffinity],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(VolumeNodeAffinity)
            return self._set("node_affinity", value)

        def persistent_volume_reclaim_policy(self, value: Optional[str]) -> Self:
            return self._set("persistent_volume_reclaim_policy", value)

        def photon_persistent_disk(
            self,
            value_or_callback: Union[
                Optional[PhotonPersistentDiskVolumeSource],
                Callable[
                    [Type[PhotonPersistentDiskVolumeSource]],
                    PhotonPersistentDiskVolumeSource,
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PhotonPersistentDiskVolumeSource)
            return self._set("photon_persistent_disk", value)

        def portworx_volume(
            self,
            value_or_callback: Union[
                Optional[PortworxVolumeSource],
                Callable[[Type[PortworxVolumeSource]], PortworxVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PortworxVolumeSource)
            return self._set("portworx_volume", value)

        def quobyte(
            self,
            value_or_callback: Union[
                Optional[QuobyteVolumeSource],
                Callable[[Type[QuobyteVolumeSource]], QuobyteVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(QuobyteVolumeSource)
            return self._set("quobyte", value)

        def rbd(
            self,
            value_or_callback: Union[
                Optional[RBDPersistentVolumeSource],
                Callable[[Type[RBDPersistentVolumeSource]], RBDPersistentVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(RBDPersistentVolumeSource)
            return self._set("rbd", value)

        def scale_io(
            self,
            value_or_callback: Union[
                Optional[ScaleIOPersistentVolumeSource],
                Callable[[Type[ScaleIOPersistentVolumeSource]], ScaleIOPersistentVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ScaleIOPersistentVolumeSource)
            return self._set("scale_io", value)

        def storage_class_name(self, value: Optional[str]) -> Self:
            return self._set("storage_class_name", value)

        def storageos(
            self,
            value_or_callback: Union[
                Optional[StorageOSPersistentVolumeSource],
                Callable[
                    [Type[StorageOSPersistentVolumeSource]],
                    StorageOSPersistentVolumeSource,
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(StorageOSPersistentVolumeSource)
            return self._set("storageos", value)

        def volume_attributes_class_name(self, value: Optional[str]) -> Self:
            return self._set("volume_attributes_class_name", value)

        def volume_mode(self, value: Optional[str]) -> Self:
            return self._set("volume_mode", value)

        def vsphere_volume(
            self,
            value_or_callback: Union[
                Optional[VsphereVirtualDiskVolumeSource],
                Callable[
                    [Type[VsphereVirtualDiskVolumeSource]],
                    VsphereVirtualDiskVolumeSource,
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(VsphereVirtualDiskVolumeSource)
            return self._set("vsphere_volume", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    access_modes: Annotated[
        Optional[List[str]],
        Field(
            alias="accessModes",
            description="accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes",
        ),
    ] = None
    aws_elastic_block_store: Annotated[
        Optional[AWSElasticBlockStoreVolumeSource],
        Field(
            alias="awsElasticBlockStore",
            description="awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
        ),
    ] = None
    azure_disk: Annotated[
        Optional[AzureDiskVolumeSource],
        Field(
            alias="azureDisk",
            description="azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
        ),
    ] = None
    azure_file: Annotated[
        Optional[AzureFilePersistentVolumeSource],
        Field(
            alias="azureFile",
            description="azureFile represents an Azure File Service mount on the host and bind mount to the pod.",
        ),
    ] = None
    capacity: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(
            description="capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity"
        ),
    ] = None
    cephfs: Annotated[
        Optional[CephFSPersistentVolumeSource],
        Field(
            description="cephFS represents a Ceph FS mount on the host that shares a pod's lifetime"
        ),
    ] = None
    cinder: Annotated[
        Optional[CinderPersistentVolumeSource],
        Field(
            description="cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
        ),
    ] = None
    claim_ref: Annotated[
        Optional[ObjectReference],
        Field(
            alias="claimRef",
            description="claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding",
        ),
    ] = None
    csi: Annotated[
        Optional[CSIPersistentVolumeSource],
        Field(
            description="csi represents storage that is handled by an external CSI driver (Beta feature)."
        ),
    ] = None
    fc: Annotated[
        Optional[FCVolumeSource],
        Field(
            description="fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod."
        ),
    ] = None
    flex_volume: Annotated[
        Optional[FlexPersistentVolumeSource],
        Field(
            alias="flexVolume",
            description="flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
        ),
    ] = None
    flocker: Annotated[
        Optional[FlockerVolumeSource],
        Field(
            description="flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running"
        ),
    ] = None
    gce_persistent_disk: Annotated[
        Optional[GCEPersistentDiskVolumeSource],
        Field(
            alias="gcePersistentDisk",
            description="gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
        ),
    ] = None
    glusterfs: Annotated[
        Optional[GlusterfsPersistentVolumeSource],
        Field(
            description="glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md"
        ),
    ] = None
    host_path: Annotated[
        Optional[HostPathVolumeSource],
        Field(
            alias="hostPath",
            description="hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
        ),
    ] = None
    iscsi: Annotated[
        Optional[ISCSIPersistentVolumeSource],
        Field(
            description="iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin."
        ),
    ] = None
    local: Annotated[
        Optional[LocalVolumeSource],
        Field(description="local represents directly-attached storage with node affinity"),
    ] = None
    mount_options: Annotated[
        Optional[List[str]],
        Field(
            alias="mountOptions",
            description='mountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options',
        ),
    ] = None
    nfs: Annotated[
        Optional[NFSVolumeSource],
        Field(
            description="nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
        ),
    ] = None
    node_affinity: Annotated[
        Optional[VolumeNodeAffinity],
        Field(
            alias="nodeAffinity",
            description="nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.",
        ),
    ] = None
    persistent_volume_reclaim_policy: Annotated[
        Optional[str],
        Field(
            alias="persistentVolumeReclaimPolicy",
            description="persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming",
        ),
    ] = None
    photon_persistent_disk: Annotated[
        Optional[PhotonPersistentDiskVolumeSource],
        Field(
            alias="photonPersistentDisk",
            description="photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
        ),
    ] = None
    portworx_volume: Annotated[
        Optional[PortworxVolumeSource],
        Field(
            alias="portworxVolume",
            description="portworxVolume represents a portworx volume attached and mounted on kubelets host machine",
        ),
    ] = None
    quobyte: Annotated[
        Optional[QuobyteVolumeSource],
        Field(
            description="quobyte represents a Quobyte mount on the host that shares a pod's lifetime"
        ),
    ] = None
    rbd: Annotated[
        Optional[RBDPersistentVolumeSource],
        Field(
            description="rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md"
        ),
    ] = None
    scale_io: Annotated[
        Optional[ScaleIOPersistentVolumeSource],
        Field(
            alias="scaleIO",
            description="scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
        ),
    ] = None
    storage_class_name: Annotated[
        Optional[str],
        Field(
            alias="storageClassName",
            description="storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.",
        ),
    ] = None
    storageos: Annotated[
        Optional[StorageOSPersistentVolumeSource],
        Field(
            description="storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md"
        ),
    ] = None
    volume_attributes_class_name: Annotated[
        Optional[str],
        Field(
            alias="volumeAttributesClassName",
            description="Name of VolumeAttributesClass to which this persistent volume belongs. Empty value is not allowed. When this field is not set, it indicates that this volume does not belong to any VolumeAttributesClass. This field is mutable and can be changed by the CSI driver after a volume has been updated successfully to a new class. For an unbound PersistentVolume, the volumeAttributesClassName will be matched with unbound PersistentVolumeClaims during the binding process. This is a beta field and requires enabling VolumeAttributesClass feature (off by default).",
        ),
    ] = None
    volume_mode: Annotated[
        Optional[str],
        Field(
            alias="volumeMode",
            description="volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.",
        ),
    ] = None
    vsphere_volume: Annotated[
        Optional[VsphereVirtualDiskVolumeSource],
        Field(
            alias="vsphereVolume",
            description="vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
        ),
    ] = None


class PodAffinityTerm(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PodAffinityTerm":
            return PodAffinityTerm(**self._attrs)

        def label_selector(
            self,
            value_or_callback: Union[
                Optional[apimachinery.LabelSelector],
                Callable[[Type[apimachinery.LabelSelector]], apimachinery.LabelSelector],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.LabelSelector)
            return self._set("label_selector", value)

        def match_label_keys(self, value: Optional[List[str]]) -> Self:
            return self._set("match_label_keys", value)

        def mismatch_label_keys(self, value: Optional[List[str]]) -> Self:
            return self._set("mismatch_label_keys", value)

        def namespace_selector(
            self,
            value_or_callback: Union[
                Optional[apimachinery.LabelSelector],
                Callable[[Type[apimachinery.LabelSelector]], apimachinery.LabelSelector],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.LabelSelector)
            return self._set("namespace_selector", value)

        def namespaces(self, value: Optional[List[str]]) -> Self:
            return self._set("namespaces", value)

        def topology_key(self, value: str) -> Self:
            return self._set("topology_key", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    label_selector: Annotated[
        Optional[apimachinery.LabelSelector],
        Field(
            alias="labelSelector",
            description="A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.",
        ),
    ] = None
    match_label_keys: Annotated[
        Optional[List[str]],
        Field(
            alias="matchLabelKeys",
            description="MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set. This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
        ),
    ] = None
    mismatch_label_keys: Annotated[
        Optional[List[str]],
        Field(
            alias="mismatchLabelKeys",
            description="MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set. This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
        ),
    ] = None
    namespace_selector: Annotated[
        Optional[apimachinery.LabelSelector],
        Field(
            alias="namespaceSelector",
            description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces.',
        ),
    ] = None
    namespaces: Annotated[
        Optional[List[str]],
        Field(
            description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace".'
        ),
    ] = None
    topology_key: Annotated[
        str,
        Field(
            alias="topologyKey",
            description="This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
        ),
    ]


class PodStatus(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PodStatus":
            return PodStatus(**self._attrs)

        def conditions(
            self,
            value_or_callback: Union[
                Optional[List[PodCondition]],
                Callable[[Type[PodCondition]], List[PodCondition]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodCondition)
            return self._set("conditions", value)

        def container_statuses(
            self,
            value_or_callback: Union[
                Optional[List[ContainerStatus]],
                Callable[[Type[ContainerStatus]], List[ContainerStatus]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ContainerStatus)
            return self._set("container_statuses", value)

        def ephemeral_container_statuses(
            self,
            value_or_callback: Union[
                Optional[List[ContainerStatus]],
                Callable[[Type[ContainerStatus]], List[ContainerStatus]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ContainerStatus)
            return self._set("ephemeral_container_statuses", value)

        def host_ip(self, value: Optional[str]) -> Self:
            return self._set("host_ip", value)

        def host_i_ps(
            self,
            value_or_callback: Union[
                Optional[List[HostIP]], Callable[[Type[HostIP]], List[HostIP]]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(HostIP)
            return self._set("host_i_ps", value)

        def init_container_statuses(
            self,
            value_or_callback: Union[
                Optional[List[ContainerStatus]],
                Callable[[Type[ContainerStatus]], List[ContainerStatus]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ContainerStatus)
            return self._set("init_container_statuses", value)

        def message(self, value: Optional[str]) -> Self:
            return self._set("message", value)

        def nominated_node_name(self, value: Optional[str]) -> Self:
            return self._set("nominated_node_name", value)

        def phase(self, value: Optional[str]) -> Self:
            return self._set("phase", value)

        def pod_ip(self, value: Optional[str]) -> Self:
            return self._set("pod_ip", value)

        def pod_i_ps(
            self,
            value_or_callback: Union[Optional[List[PodIP]], Callable[[Type[PodIP]], List[PodIP]]],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodIP)
            return self._set("pod_i_ps", value)

        def qos_class(self, value: Optional[str]) -> Self:
            return self._set("qos_class", value)

        def reason(self, value: Optional[str]) -> Self:
            return self._set("reason", value)

        def resize(self, value: Optional[str]) -> Self:
            return self._set("resize", value)

        def resource_claim_statuses(
            self,
            value_or_callback: Union[
                Optional[List[PodResourceClaimStatus]],
                Callable[[Type[PodResourceClaimStatus]], List[PodResourceClaimStatus]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodResourceClaimStatus)
            return self._set("resource_claim_statuses", value)

        def start_time(
            self,
            value_or_callback: Union[
                Optional[apimachinery.Time],
                Callable[[Type[apimachinery.Time]], apimachinery.Time],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Time)
            return self._set("start_time", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    conditions: Annotated[
        Optional[List[PodCondition]],
        Field(
            description="Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions"
        ),
    ] = None
    container_statuses: Annotated[
        Optional[List[ContainerStatus]],
        Field(
            alias="containerStatuses",
            description="The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
        ),
    ] = None
    ephemeral_container_statuses: Annotated[
        Optional[List[ContainerStatus]],
        Field(
            alias="ephemeralContainerStatuses",
            description="Status for any ephemeral containers that have run in this pod.",
        ),
    ] = None
    host_ip: Annotated[
        Optional[str],
        Field(
            alias="hostIP",
            description="hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will not be updated even if there is a node is assigned to pod",
        ),
    ] = None
    host_i_ps: Annotated[
        Optional[List[HostIP]],
        Field(
            alias="hostIPs",
            description="hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must match the hostIP field. This list is empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will not be updated even if there is a node is assigned to this pod.",
        ),
    ] = None
    init_container_statuses: Annotated[
        Optional[List[ContainerStatus]],
        Field(
            alias="initContainerStatuses",
            description="The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
        ),
    ] = None
    message: Annotated[
        Optional[str],
        Field(
            description="A human readable message indicating details about why the pod is in this condition."
        ),
    ] = None
    nominated_node_name: Annotated[
        Optional[str],
        Field(
            alias="nominatedNodeName",
            description="nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.",
        ),
    ] = None
    phase: Annotated[
        Optional[str],
        Field(
            description="The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:\n\nPending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase"
        ),
    ] = None
    pod_ip: Annotated[
        Optional[str],
        Field(
            alias="podIP",
            description="podIP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.",
        ),
    ] = None
    pod_i_ps: Annotated[
        Optional[List[PodIP]],
        Field(
            alias="podIPs",
            description="podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.",
        ),
    ] = None
    qos_class: Annotated[
        Optional[str],
        Field(
            alias="qosClass",
            description="The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes",
        ),
    ] = None
    reason: Annotated[
        Optional[str],
        Field(
            description="A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'"
        ),
    ] = None
    resize: Annotated[
        Optional[str],
        Field(
            description='Status of resources resize desired for pod\'s containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to "Proposed"'
        ),
    ] = None
    resource_claim_statuses: Annotated[
        Optional[List[PodResourceClaimStatus]],
        Field(alias="resourceClaimStatuses", description="Status of resource claims."),
    ] = None
    start_time: Annotated[
        Optional[apimachinery.Time],
        Field(
            alias="startTime",
            description="RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.",
        ),
    ] = None


class Probe(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "Probe":
            return Probe(**self._attrs)

        def exec(
            self,
            value_or_callback: Union[
                Optional[ExecAction], Callable[[Type[ExecAction]], ExecAction]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ExecAction)
            return self._set("exec", value)

        def failure_threshold(self, value: Optional[int]) -> Self:
            return self._set("failure_threshold", value)

        def grpc(
            self,
            value_or_callback: Union[
                Optional[GRPCAction], Callable[[Type[GRPCAction]], GRPCAction]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(GRPCAction)
            return self._set("grpc", value)

        def http_get(
            self,
            value_or_callback: Union[
                Optional[HTTPGetAction], Callable[[Type[HTTPGetAction]], HTTPGetAction]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(HTTPGetAction)
            return self._set("http_get", value)

        def initial_delay_seconds(self, value: Optional[int]) -> Self:
            return self._set("initial_delay_seconds", value)

        def period_seconds(self, value: Optional[int]) -> Self:
            return self._set("period_seconds", value)

        def success_threshold(self, value: Optional[int]) -> Self:
            return self._set("success_threshold", value)

        def tcp_socket(
            self,
            value_or_callback: Union[
                Optional[TCPSocketAction],
                Callable[[Type[TCPSocketAction]], TCPSocketAction],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(TCPSocketAction)
            return self._set("tcp_socket", value)

        def termination_grace_period_seconds(self, value: Optional[int]) -> Self:
            return self._set("termination_grace_period_seconds", value)

        def timeout_seconds(self, value: Optional[int]) -> Self:
            return self._set("timeout_seconds", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    exec: Annotated[
        Optional[ExecAction], Field(description="Exec specifies the action to take.")
    ] = None
    failure_threshold: Annotated[
        Optional[int],
        Field(
            alias="failureThreshold",
            description="Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
        ),
    ] = None
    grpc: Annotated[
        Optional[GRPCAction],
        Field(description="GRPC specifies an action involving a GRPC port."),
    ] = None
    http_get: Annotated[
        Optional[HTTPGetAction],
        Field(
            alias="httpGet",
            description="HTTPGet specifies the http request to perform.",
        ),
    ] = None
    initial_delay_seconds: Annotated[
        Optional[int],
        Field(
            alias="initialDelaySeconds",
            description="Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
        ),
    ] = None
    period_seconds: Annotated[
        Optional[int],
        Field(
            alias="periodSeconds",
            description="How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
        ),
    ] = None
    success_threshold: Annotated[
        Optional[int],
        Field(
            alias="successThreshold",
            description="Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
        ),
    ] = None
    tcp_socket: Annotated[
        Optional[TCPSocketAction],
        Field(
            alias="tcpSocket",
            description="TCPSocket specifies an action involving a TCP port.",
        ),
    ] = None
    termination_grace_period_seconds: Annotated[
        Optional[int],
        Field(
            alias="terminationGracePeriodSeconds",
            description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
        ),
    ] = None
    timeout_seconds: Annotated[
        Optional[int],
        Field(
            alias="timeoutSeconds",
            description="Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
        ),
    ] = None


class ResourceQuotaSpec(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ResourceQuotaSpec":
            return ResourceQuotaSpec(**self._attrs)

        def hard(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("hard", value)

        def scope_selector(
            self,
            value_or_callback: Union[
                Optional[ScopeSelector], Callable[[Type[ScopeSelector]], ScopeSelector]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ScopeSelector)
            return self._set("scope_selector", value)

        def scopes(self, value: Optional[List[str]]) -> Self:
            return self._set("scopes", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    hard: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(
            description="hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/"
        ),
    ] = None
    scope_selector: Annotated[
        Optional[ScopeSelector],
        Field(
            alias="scopeSelector",
            description="scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.",
        ),
    ] = None
    scopes: Annotated[
        Optional[List[str]],
        Field(
            description="A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects."
        ),
    ] = None


class Secret(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "Secret":
            return Secret(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]]) -> Self:
            return self._set("api_version", value)

        def data(self, value: Optional[Dict[str, str]]) -> Self:
            return self._set("data", value)

        def immutable(self, value: Optional[bool]) -> Self:
            return self._set("immutable", value)

        def kind(self, value: Optional[Literal["Secret"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def string_data(self, value: Optional[Dict[str, str]]) -> Self:
            return self._set("string_data", value)

        def type(self, value: Optional[str]) -> Self:
            return self._set("type", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "v1"
    data: Annotated[
        Optional[Dict[str, str]],
        Field(
            description="Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4"
        ),
    ] = None
    immutable: Annotated[
        Optional[bool],
        Field(
            description="Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil."
        ),
    ] = None
    kind: Annotated[
        Optional[Literal["Secret"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "Secret"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    string_data: Annotated[
        Optional[Dict[str, str]],
        Field(
            alias="stringData",
            description="stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.",
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(
            description="Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types"
        ),
    ] = None


SecretList = ResourceList["Secret"]


class ServiceAccount(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "ServiceAccount":
            return ServiceAccount(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]]) -> Self:
            return self._set("api_version", value)

        def automount_service_account_token(self, value: Optional[bool]) -> Self:
            return self._set("automount_service_account_token", value)

        def image_pull_secrets(
            self,
            value_or_callback: Union[
                Optional[List[LocalObjectReference]],
                Callable[[Type[LocalObjectReference]], List[LocalObjectReference]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LocalObjectReference)
            return self._set("image_pull_secrets", value)

        def kind(self, value: Optional[Literal["ServiceAccount"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def secrets(
            self,
            value_or_callback: Union[
                Optional[List[ObjectReference]],
                Callable[[Type[ObjectReference]], List[ObjectReference]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ObjectReference)
            return self._set("secrets", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "v1"
    automount_service_account_token: Annotated[
        Optional[bool],
        Field(
            alias="automountServiceAccountToken",
            description="AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.",
        ),
    ] = None
    image_pull_secrets: Annotated[
        Optional[List[LocalObjectReference]],
        Field(
            alias="imagePullSecrets",
            description="ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod",
        ),
    ] = None
    kind: Annotated[
        Optional[Literal["ServiceAccount"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "ServiceAccount"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    secrets: Annotated[
        Optional[List[ObjectReference]],
        Field(
            description='Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a "kubernetes.io/enforce-mountable-secrets" annotation set to "true". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret'
        ),
    ] = None


ServiceAccountList = ResourceList["ServiceAccount"]


class ServiceStatus(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ServiceStatus":
            return ServiceStatus(**self._attrs)

        def conditions(
            self,
            value_or_callback: Union[
                Optional[List[apimachinery.Condition]],
                Callable[[Type[apimachinery.Condition]], List[apimachinery.Condition]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.Condition)
            return self._set("conditions", value)

        def load_balancer(
            self,
            value_or_callback: Union[
                Optional[LoadBalancerStatus],
                Callable[[Type[LoadBalancerStatus]], LoadBalancerStatus],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LoadBalancerStatus)
            return self._set("load_balancer", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    conditions: Annotated[
        Optional[List[apimachinery.Condition]],
        Field(description="Current service state"),
    ] = None
    load_balancer: Annotated[
        Optional[LoadBalancerStatus],
        Field(
            alias="loadBalancer",
            description="LoadBalancer contains the current status of the load-balancer, if one is present.",
        ),
    ] = None


class TopologySpreadConstraint(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "TopologySpreadConstraint":
            return TopologySpreadConstraint(**self._attrs)

        def label_selector(
            self,
            value_or_callback: Union[
                Optional[apimachinery.LabelSelector],
                Callable[[Type[apimachinery.LabelSelector]], apimachinery.LabelSelector],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.LabelSelector)
            return self._set("label_selector", value)

        def match_label_keys(self, value: Optional[List[str]]) -> Self:
            return self._set("match_label_keys", value)

        def max_skew(self, value: int) -> Self:
            return self._set("max_skew", value)

        def min_domains(self, value: Optional[int]) -> Self:
            return self._set("min_domains", value)

        def node_affinity_policy(self, value: Optional[str]) -> Self:
            return self._set("node_affinity_policy", value)

        def node_taints_policy(self, value: Optional[str]) -> Self:
            return self._set("node_taints_policy", value)

        def topology_key(self, value: str) -> Self:
            return self._set("topology_key", value)

        def when_unsatisfiable(self, value: str) -> Self:
            return self._set("when_unsatisfiable", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    label_selector: Annotated[
        Optional[apimachinery.LabelSelector],
        Field(
            alias="labelSelector",
            description="LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.",
        ),
    ] = None
    match_label_keys: Annotated[
        Optional[List[str]],
        Field(
            alias="matchLabelKeys",
            description="MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).",
        ),
    ] = None
    max_skew: Annotated[
        int,
        Field(
            alias="maxSkew",
            description="MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
        ),
    ]
    min_domains: Annotated[
        Optional[int],
        Field(
            alias="minDomains",
            description='MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won\'t schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.',
        ),
    ] = None
    node_affinity_policy: Annotated[
        Optional[str],
        Field(
            alias="nodeAffinityPolicy",
            description="NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
        ),
    ] = None
    node_taints_policy: Annotated[
        Optional[str],
        Field(
            alias="nodeTaintsPolicy",
            description="NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
        ),
    ] = None
    topology_key: Annotated[
        str,
        Field(
            alias="topologyKey",
            description='TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It\'s a required field.',
        ),
    ]
    when_unsatisfiable: Annotated[
        str,
        Field(
            alias="whenUnsatisfiable",
            description='WhenUnsatisfiable indicates how to deal with a pod if it doesn\'t satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won\'t make it *more* imbalanced. It\'s a required field.',
        ),
    ]


class WeightedPodAffinityTerm(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "WeightedPodAffinityTerm":
            return WeightedPodAffinityTerm(**self._attrs)

        def pod_affinity_term(
            self,
            value_or_callback: Union[
                PodAffinityTerm, Callable[[Type[PodAffinityTerm]], PodAffinityTerm]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodAffinityTerm)
            return self._set("pod_affinity_term", value)

        def weight(self, value: int) -> Self:
            return self._set("weight", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    pod_affinity_term: Annotated[
        PodAffinityTerm,
        Field(
            alias="podAffinityTerm",
            description="Required. A pod affinity term, associated with the corresponding weight.",
        ),
    ]
    weight: Annotated[
        int,
        Field(
            description="weight associated with matching the corresponding podAffinityTerm, in the range 1-100."
        ),
    ]


class DownwardAPIProjection(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "DownwardAPIProjection":
            return DownwardAPIProjection(**self._attrs)

        def items(
            self,
            value_or_callback: Union[
                Optional[List[DownwardAPIVolumeFile]],
                Callable[[Type[DownwardAPIVolumeFile]], List[DownwardAPIVolumeFile]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(DownwardAPIVolumeFile)
            return self._set("items", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    items: Annotated[
        Optional[List[DownwardAPIVolumeFile]],
        Field(description="Items is a list of DownwardAPIVolume file"),
    ] = None


class EnvVar(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "EnvVar":
            return EnvVar(**self._attrs)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def value(self, value: Optional[str]) -> Self:
            return self._set("value", value)

        def value_from(
            self,
            value_or_callback: Union[
                Optional[EnvVarSource], Callable[[Type[EnvVarSource]], EnvVarSource]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(EnvVarSource)
            return self._set("value_from", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    name: Annotated[
        str,
        Field(description="Name of the environment variable. Must be a C_IDENTIFIER."),
    ]
    value: Annotated[
        Optional[str],
        Field(
            description='Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".'
        ),
    ] = None
    value_from: Annotated[
        Optional[EnvVarSource],
        Field(
            alias="valueFrom",
            description="Source for the environment variable's value. Cannot be used if value is not empty.",
        ),
    ] = None


class EphemeralVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "EphemeralVolumeSource":
            return EphemeralVolumeSource(**self._attrs)

        def volume_claim_template(
            self,
            value_or_callback: Union[
                Optional[PersistentVolumeClaimTemplate],
                Callable[[Type[PersistentVolumeClaimTemplate]], PersistentVolumeClaimTemplate],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PersistentVolumeClaimTemplate)
            return self._set("volume_claim_template", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    volume_claim_template: Annotated[
        Optional[PersistentVolumeClaimTemplate],
        Field(
            alias="volumeClaimTemplate",
            description="Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.\n\nRequired, must not be nil.",
        ),
    ] = None


class Lifecycle(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "Lifecycle":
            return Lifecycle(**self._attrs)

        def post_start(
            self,
            value_or_callback: Union[
                Optional[LifecycleHandler],
                Callable[[Type[LifecycleHandler]], LifecycleHandler],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LifecycleHandler)
            return self._set("post_start", value)

        def pre_stop(
            self,
            value_or_callback: Union[
                Optional[LifecycleHandler],
                Callable[[Type[LifecycleHandler]], LifecycleHandler],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LifecycleHandler)
            return self._set("pre_stop", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    post_start: Annotated[
        Optional[LifecycleHandler],
        Field(
            alias="postStart",
            description="PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
        ),
    ] = None
    pre_stop: Annotated[
        Optional[LifecycleHandler],
        Field(
            alias="preStop",
            description="PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
        ),
    ] = None


class Node(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "Node":
            return Node(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["Node"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[Optional[NodeSpec], Callable[[Type[NodeSpec]], NodeSpec]],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeSpec)
            return self._set("spec", value)

        def status(
            self,
            value_or_callback: Union[
                Optional[NodeStatus], Callable[[Type[NodeStatus]], NodeStatus]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeStatus)
            return self._set("status", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "v1"
    kind: Annotated[
        Optional[Literal["Node"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "Node"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    spec: Annotated[
        Optional[NodeSpec],
        Field(
            description="Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None
    status: Annotated[
        Optional[NodeStatus],
        Field(
            description="Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None


NodeList = ResourceList["Node"]


class PersistentVolume(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "PersistentVolume":
            return PersistentVolume(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["PersistentVolume"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[
                Optional[PersistentVolumeSpec],
                Callable[[Type[PersistentVolumeSpec]], PersistentVolumeSpec],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PersistentVolumeSpec)
            return self._set("spec", value)

        def status(
            self,
            value_or_callback: Union[
                Optional[PersistentVolumeStatus],
                Callable[[Type[PersistentVolumeStatus]], PersistentVolumeStatus],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PersistentVolumeStatus)
            return self._set("status", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "v1"
    kind: Annotated[
        Optional[Literal["PersistentVolume"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "PersistentVolume"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    spec: Annotated[
        Optional[PersistentVolumeSpec],
        Field(
            description="spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes"
        ),
    ] = None
    status: Annotated[
        Optional[PersistentVolumeStatus],
        Field(
            description="status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes"
        ),
    ] = None


class PersistentVolumeClaim(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "PersistentVolumeClaim":
            return PersistentVolumeClaim(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["PersistentVolumeClaim"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[
                Optional[PersistentVolumeClaimSpec],
                Callable[[Type[PersistentVolumeClaimSpec]], PersistentVolumeClaimSpec],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PersistentVolumeClaimSpec)
            return self._set("spec", value)

        def status(
            self,
            value_or_callback: Union[
                Optional[PersistentVolumeClaimStatus],
                Callable[[Type[PersistentVolumeClaimStatus]], PersistentVolumeClaimStatus],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PersistentVolumeClaimStatus)
            return self._set("status", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "v1"
    kind: Annotated[
        Optional[Literal["PersistentVolumeClaim"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "PersistentVolumeClaim"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    spec: Annotated[
        Optional[PersistentVolumeClaimSpec],
        Field(
            description="spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        ),
    ] = None
    status: Annotated[
        Optional[PersistentVolumeClaimStatus],
        Field(
            description="status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        ),
    ] = None


PersistentVolumeClaimList = ResourceList["PersistentVolumeClaim"]


PersistentVolumeList = ResourceList["PersistentVolume"]


class PodAffinity(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PodAffinity":
            return PodAffinity(**self._attrs)

        def preferred_during_scheduling_ignored_during_execution(
            self,
            value_or_callback: Union[
                Optional[List[WeightedPodAffinityTerm]],
                Callable[[Type[WeightedPodAffinityTerm]], List[WeightedPodAffinityTerm]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(WeightedPodAffinityTerm)
            return self._set("preferred_during_scheduling_ignored_during_execution", value)

        def required_during_scheduling_ignored_during_execution(
            self,
            value_or_callback: Union[
                Optional[List[PodAffinityTerm]],
                Callable[[Type[PodAffinityTerm]], List[PodAffinityTerm]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodAffinityTerm)
            return self._set("required_during_scheduling_ignored_during_execution", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    preferred_during_scheduling_ignored_during_execution: Annotated[
        Optional[List[WeightedPodAffinityTerm]],
        Field(
            alias="preferredDuringSchedulingIgnoredDuringExecution",
            description='The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
        ),
    ] = None
    required_during_scheduling_ignored_during_execution: Annotated[
        Optional[List[PodAffinityTerm]],
        Field(
            alias="requiredDuringSchedulingIgnoredDuringExecution",
            description="If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
        ),
    ] = None


class PodAntiAffinity(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PodAntiAffinity":
            return PodAntiAffinity(**self._attrs)

        def preferred_during_scheduling_ignored_during_execution(
            self,
            value_or_callback: Union[
                Optional[List[WeightedPodAffinityTerm]],
                Callable[[Type[WeightedPodAffinityTerm]], List[WeightedPodAffinityTerm]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(WeightedPodAffinityTerm)
            return self._set("preferred_during_scheduling_ignored_during_execution", value)

        def required_during_scheduling_ignored_during_execution(
            self,
            value_or_callback: Union[
                Optional[List[PodAffinityTerm]],
                Callable[[Type[PodAffinityTerm]], List[PodAffinityTerm]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodAffinityTerm)
            return self._set("required_during_scheduling_ignored_during_execution", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    preferred_during_scheduling_ignored_during_execution: Annotated[
        Optional[List[WeightedPodAffinityTerm]],
        Field(
            alias="preferredDuringSchedulingIgnoredDuringExecution",
            description='The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
        ),
    ] = None
    required_during_scheduling_ignored_during_execution: Annotated[
        Optional[List[PodAffinityTerm]],
        Field(
            alias="requiredDuringSchedulingIgnoredDuringExecution",
            description="If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
        ),
    ] = None


class ResourceQuota(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "ResourceQuota":
            return ResourceQuota(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["ResourceQuota"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[
                Optional[ResourceQuotaSpec],
                Callable[[Type[ResourceQuotaSpec]], ResourceQuotaSpec],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ResourceQuotaSpec)
            return self._set("spec", value)

        def status(
            self,
            value_or_callback: Union[
                Optional[ResourceQuotaStatus],
                Callable[[Type[ResourceQuotaStatus]], ResourceQuotaStatus],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ResourceQuotaStatus)
            return self._set("status", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "v1"
    kind: Annotated[
        Optional[Literal["ResourceQuota"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "ResourceQuota"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    spec: Annotated[
        Optional[ResourceQuotaSpec],
        Field(
            description="Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None
    status: Annotated[
        Optional[ResourceQuotaStatus],
        Field(
            description="Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None


ResourceQuotaList = ResourceList["ResourceQuota"]


class Service(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "Service":
            return Service(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["Service"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[
                Optional[ServiceSpec], Callable[[Type[ServiceSpec]], ServiceSpec]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ServiceSpec)
            return self._set("spec", value)

        def status(
            self,
            value_or_callback: Union[
                Optional[ServiceStatus], Callable[[Type[ServiceStatus]], ServiceStatus]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ServiceStatus)
            return self._set("status", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "v1"
    kind: Annotated[
        Optional[Literal["Service"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "Service"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    spec: Annotated[
        Optional[ServiceSpec],
        Field(
            description="Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None
    status: Annotated[
        Optional[ServiceStatus],
        Field(
            description="Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None


ServiceList = ResourceList["Service"]


class VolumeProjection(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "VolumeProjection":
            return VolumeProjection(**self._attrs)

        def cluster_trust_bundle(
            self,
            value_or_callback: Union[
                Optional[ClusterTrustBundleProjection],
                Callable[[Type[ClusterTrustBundleProjection]], ClusterTrustBundleProjection],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ClusterTrustBundleProjection)
            return self._set("cluster_trust_bundle", value)

        def config_map(
            self,
            value_or_callback: Union[
                Optional[ConfigMapProjection],
                Callable[[Type[ConfigMapProjection]], ConfigMapProjection],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ConfigMapProjection)
            return self._set("config_map", value)

        def downward_api(
            self,
            value_or_callback: Union[
                Optional[DownwardAPIProjection],
                Callable[[Type[DownwardAPIProjection]], DownwardAPIProjection],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(DownwardAPIProjection)
            return self._set("downward_api", value)

        def secret(
            self,
            value_or_callback: Union[
                Optional[SecretProjection],
                Callable[[Type[SecretProjection]], SecretProjection],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SecretProjection)
            return self._set("secret", value)

        def service_account_token(
            self,
            value_or_callback: Union[
                Optional[ServiceAccountTokenProjection],
                Callable[[Type[ServiceAccountTokenProjection]], ServiceAccountTokenProjection],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ServiceAccountTokenProjection)
            return self._set("service_account_token", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    cluster_trust_bundle: Annotated[
        Optional[ClusterTrustBundleProjection],
        Field(
            alias="clusterTrustBundle",
            description="ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field of ClusterTrustBundle objects in an auto-updating file.\n\nAlpha, gated by the ClusterTrustBundleProjection feature gate.\n\nClusterTrustBundle objects can either be selected by name, or by the combination of signer name and a label selector.\n\nKubelet performs aggressive normalization of the PEM contents written into the pod filesystem.  Esoteric PEM features such as inter-block comments and block headers are stripped.  Certificates are deduplicated. The ordering of certificates within the file is arbitrary, and Kubelet may change the order over time.",
        ),
    ] = None
    config_map: Annotated[
        Optional[ConfigMapProjection],
        Field(
            alias="configMap",
            description="configMap information about the configMap data to project",
        ),
    ] = None
    downward_api: Annotated[
        Optional[DownwardAPIProjection],
        Field(
            alias="downwardAPI",
            description="downwardAPI information about the downwardAPI data to project",
        ),
    ] = None
    secret: Annotated[
        Optional[SecretProjection],
        Field(description="secret information about the secret data to project"),
    ] = None
    service_account_token: Annotated[
        Optional[ServiceAccountTokenProjection],
        Field(
            alias="serviceAccountToken",
            description="serviceAccountToken is information about the serviceAccountToken data to project",
        ),
    ] = None


class Affinity(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "Affinity":
            return Affinity(**self._attrs)

        def node_affinity(
            self,
            value_or_callback: Union[
                Optional[NodeAffinity], Callable[[Type[NodeAffinity]], NodeAffinity]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NodeAffinity)
            return self._set("node_affinity", value)

        def pod_affinity(
            self,
            value_or_callback: Union[
                Optional[PodAffinity], Callable[[Type[PodAffinity]], PodAffinity]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodAffinity)
            return self._set("pod_affinity", value)

        def pod_anti_affinity(
            self,
            value_or_callback: Union[
                Optional[PodAntiAffinity],
                Callable[[Type[PodAntiAffinity]], PodAntiAffinity],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodAntiAffinity)
            return self._set("pod_anti_affinity", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    node_affinity: Annotated[
        Optional[NodeAffinity],
        Field(
            alias="nodeAffinity",
            description="Describes node affinity scheduling rules for the pod.",
        ),
    ] = None
    pod_affinity: Annotated[
        Optional[PodAffinity],
        Field(
            alias="podAffinity",
            description="Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
        ),
    ] = None
    pod_anti_affinity: Annotated[
        Optional[PodAntiAffinity],
        Field(
            alias="podAntiAffinity",
            description="Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
        ),
    ] = None


class Container(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "Container":
            return Container(**self._attrs)

        def args(self, value: Optional[List[str]]) -> Self:
            return self._set("args", value)

        def command(self, value: Optional[List[str]]) -> Self:
            return self._set("command", value)

        def env(
            self,
            value_or_callback: Union[
                Optional[List[EnvVar]], Callable[[Type[EnvVar]], List[EnvVar]]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(EnvVar)
            return self._set("env", value)

        def env_from(
            self,
            value_or_callback: Union[
                Optional[List[EnvFromSource]],
                Callable[[Type[EnvFromSource]], List[EnvFromSource]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(EnvFromSource)
            return self._set("env_from", value)

        def image(self, value: Optional[str]) -> Self:
            return self._set("image", value)

        def image_pull_policy(self, value: Optional[str]) -> Self:
            return self._set("image_pull_policy", value)

        def lifecycle(
            self,
            value_or_callback: Union[Optional[Lifecycle], Callable[[Type[Lifecycle]], Lifecycle]],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Lifecycle)
            return self._set("lifecycle", value)

        def liveness_probe(
            self,
            value_or_callback: Union[Optional[Probe], Callable[[Type[Probe]], Probe]],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Probe)
            return self._set("liveness_probe", value)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def ports(
            self,
            value_or_callback: Union[
                Optional[List[ContainerPort]],
                Callable[[Type[ContainerPort]], List[ContainerPort]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ContainerPort)
            return self._set("ports", value)

        def readiness_probe(
            self,
            value_or_callback: Union[Optional[Probe], Callable[[Type[Probe]], Probe]],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Probe)
            return self._set("readiness_probe", value)

        def resize_policy(
            self,
            value_or_callback: Union[
                Optional[List[ContainerResizePolicy]],
                Callable[[Type[ContainerResizePolicy]], List[ContainerResizePolicy]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ContainerResizePolicy)
            return self._set("resize_policy", value)

        def resources(
            self,
            value_or_callback: Union[
                Optional[ResourceRequirements],
                Callable[[Type[ResourceRequirements]], ResourceRequirements],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ResourceRequirements)
            return self._set("resources", value)

        def restart_policy(self, value: Optional[str]) -> Self:
            return self._set("restart_policy", value)

        def security_context(
            self,
            value_or_callback: Union[
                Optional[SecurityContext],
                Callable[[Type[SecurityContext]], SecurityContext],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SecurityContext)
            return self._set("security_context", value)

        def startup_probe(
            self,
            value_or_callback: Union[Optional[Probe], Callable[[Type[Probe]], Probe]],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Probe)
            return self._set("startup_probe", value)

        def stdin(self, value: Optional[bool]) -> Self:
            return self._set("stdin", value)

        def stdin_once(self, value: Optional[bool]) -> Self:
            return self._set("stdin_once", value)

        def termination_message_path(self, value: Optional[str]) -> Self:
            return self._set("termination_message_path", value)

        def termination_message_policy(self, value: Optional[str]) -> Self:
            return self._set("termination_message_policy", value)

        def tty(self, value: Optional[bool]) -> Self:
            return self._set("tty", value)

        def volume_devices(
            self,
            value_or_callback: Union[
                Optional[List[VolumeDevice]],
                Callable[[Type[VolumeDevice]], List[VolumeDevice]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(VolumeDevice)
            return self._set("volume_devices", value)

        def volume_mounts(
            self,
            value_or_callback: Union[
                Optional[List[VolumeMount]],
                Callable[[Type[VolumeMount]], List[VolumeMount]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(VolumeMount)
            return self._set("volume_mounts", value)

        def working_dir(self, value: Optional[str]) -> Self:
            return self._set("working_dir", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    args: Annotated[
        Optional[List[str]],
        Field(
            description='Arguments to the entrypoint. The container image\'s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
        ),
    ] = None
    command: Annotated[
        Optional[List[str]],
        Field(
            description='Entrypoint array. Not executed within a shell. The container image\'s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
        ),
    ] = None
    env: Annotated[
        Optional[List[EnvVar]],
        Field(
            description="List of environment variables to set in the container. Cannot be updated."
        ),
    ] = None
    env_from: Annotated[
        Optional[List[EnvFromSource]],
        Field(
            alias="envFrom",
            description="List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
        ),
    ] = None
    image: Annotated[
        Optional[str],
        Field(
            description="Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets."
        ),
    ] = None
    image_pull_policy: Annotated[
        Optional[str],
        Field(
            alias="imagePullPolicy",
            description="Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
        ),
    ] = None
    lifecycle: Annotated[
        Optional[Lifecycle],
        Field(
            description="Actions that the management system should take in response to container lifecycle events. Cannot be updated."
        ),
    ] = None
    liveness_probe: Annotated[
        Optional[Probe],
        Field(
            alias="livenessProbe",
            description="Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
        ),
    ] = None
    name: Annotated[
        str,
        Field(
            description="Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
        ),
    ]
    ports: Annotated[
        Optional[List[ContainerPort]],
        Field(
            description='List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.'
        ),
    ] = None
    readiness_probe: Annotated[
        Optional[Probe],
        Field(
            alias="readinessProbe",
            description="Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
        ),
    ] = None
    resize_policy: Annotated[
        Optional[List[ContainerResizePolicy]],
        Field(
            alias="resizePolicy",
            description="Resources resize policy for the container.",
        ),
    ] = None
    resources: Annotated[
        Optional[ResourceRequirements],
        Field(
            description="Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
        ),
    ] = None
    restart_policy: Annotated[
        Optional[str],
        Field(
            alias="restartPolicy",
            description='RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is "Always". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod\'s restart policy and the container type. Setting the RestartPolicy as "Always" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy "Always" will be shut down. This lifecycle differs from normal init containers and is often referred to as a "sidecar" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.',
        ),
    ] = None
    security_context: Annotated[
        Optional[SecurityContext],
        Field(
            alias="securityContext",
            description="SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
        ),
    ] = None
    startup_probe: Annotated[
        Optional[Probe],
        Field(
            alias="startupProbe",
            description="StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
        ),
    ] = None
    stdin: Annotated[
        Optional[bool],
        Field(
            description="Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
        ),
    ] = None
    stdin_once: Annotated[
        Optional[bool],
        Field(
            alias="stdinOnce",
            description="Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
        ),
    ] = None
    termination_message_path: Annotated[
        Optional[str],
        Field(
            alias="terminationMessagePath",
            description="Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
        ),
    ] = None
    termination_message_policy: Annotated[
        Optional[str],
        Field(
            alias="terminationMessagePolicy",
            description="Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
        ),
    ] = None
    tty: Annotated[
        Optional[bool],
        Field(
            description="Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
        ),
    ] = None
    volume_devices: Annotated[
        Optional[List[VolumeDevice]],
        Field(
            alias="volumeDevices",
            description="volumeDevices is the list of block devices to be used by the container.",
        ),
    ] = None
    volume_mounts: Annotated[
        Optional[List[VolumeMount]],
        Field(
            alias="volumeMounts",
            description="Pod volumes to mount into the container's filesystem. Cannot be updated.",
        ),
    ] = None
    working_dir: Annotated[
        Optional[str],
        Field(
            alias="workingDir",
            description="Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
        ),
    ] = None


class EphemeralContainer(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "EphemeralContainer":
            return EphemeralContainer(**self._attrs)

        def args(self, value: Optional[List[str]]) -> Self:
            return self._set("args", value)

        def command(self, value: Optional[List[str]]) -> Self:
            return self._set("command", value)

        def env(
            self,
            value_or_callback: Union[
                Optional[List[EnvVar]], Callable[[Type[EnvVar]], List[EnvVar]]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(EnvVar)
            return self._set("env", value)

        def env_from(
            self,
            value_or_callback: Union[
                Optional[List[EnvFromSource]],
                Callable[[Type[EnvFromSource]], List[EnvFromSource]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(EnvFromSource)
            return self._set("env_from", value)

        def image(self, value: Optional[str]) -> Self:
            return self._set("image", value)

        def image_pull_policy(self, value: Optional[str]) -> Self:
            return self._set("image_pull_policy", value)

        def lifecycle(
            self,
            value_or_callback: Union[Optional[Lifecycle], Callable[[Type[Lifecycle]], Lifecycle]],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Lifecycle)
            return self._set("lifecycle", value)

        def liveness_probe(
            self,
            value_or_callback: Union[Optional[Probe], Callable[[Type[Probe]], Probe]],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Probe)
            return self._set("liveness_probe", value)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def ports(
            self,
            value_or_callback: Union[
                Optional[List[ContainerPort]],
                Callable[[Type[ContainerPort]], List[ContainerPort]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ContainerPort)
            return self._set("ports", value)

        def readiness_probe(
            self,
            value_or_callback: Union[Optional[Probe], Callable[[Type[Probe]], Probe]],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Probe)
            return self._set("readiness_probe", value)

        def resize_policy(
            self,
            value_or_callback: Union[
                Optional[List[ContainerResizePolicy]],
                Callable[[Type[ContainerResizePolicy]], List[ContainerResizePolicy]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ContainerResizePolicy)
            return self._set("resize_policy", value)

        def resources(
            self,
            value_or_callback: Union[
                Optional[ResourceRequirements],
                Callable[[Type[ResourceRequirements]], ResourceRequirements],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ResourceRequirements)
            return self._set("resources", value)

        def restart_policy(self, value: Optional[str]) -> Self:
            return self._set("restart_policy", value)

        def security_context(
            self,
            value_or_callback: Union[
                Optional[SecurityContext],
                Callable[[Type[SecurityContext]], SecurityContext],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SecurityContext)
            return self._set("security_context", value)

        def startup_probe(
            self,
            value_or_callback: Union[Optional[Probe], Callable[[Type[Probe]], Probe]],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Probe)
            return self._set("startup_probe", value)

        def stdin(self, value: Optional[bool]) -> Self:
            return self._set("stdin", value)

        def stdin_once(self, value: Optional[bool]) -> Self:
            return self._set("stdin_once", value)

        def target_container_name(self, value: Optional[str]) -> Self:
            return self._set("target_container_name", value)

        def termination_message_path(self, value: Optional[str]) -> Self:
            return self._set("termination_message_path", value)

        def termination_message_policy(self, value: Optional[str]) -> Self:
            return self._set("termination_message_policy", value)

        def tty(self, value: Optional[bool]) -> Self:
            return self._set("tty", value)

        def volume_devices(
            self,
            value_or_callback: Union[
                Optional[List[VolumeDevice]],
                Callable[[Type[VolumeDevice]], List[VolumeDevice]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(VolumeDevice)
            return self._set("volume_devices", value)

        def volume_mounts(
            self,
            value_or_callback: Union[
                Optional[List[VolumeMount]],
                Callable[[Type[VolumeMount]], List[VolumeMount]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(VolumeMount)
            return self._set("volume_mounts", value)

        def working_dir(self, value: Optional[str]) -> Self:
            return self._set("working_dir", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    args: Annotated[
        Optional[List[str]],
        Field(
            description='Arguments to the entrypoint. The image\'s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
        ),
    ] = None
    command: Annotated[
        Optional[List[str]],
        Field(
            description='Entrypoint array. Not executed within a shell. The image\'s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
        ),
    ] = None
    env: Annotated[
        Optional[List[EnvVar]],
        Field(
            description="List of environment variables to set in the container. Cannot be updated."
        ),
    ] = None
    env_from: Annotated[
        Optional[List[EnvFromSource]],
        Field(
            alias="envFrom",
            description="List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
        ),
    ] = None
    image: Annotated[
        Optional[str],
        Field(
            description="Container image name. More info: https://kubernetes.io/docs/concepts/containers/images"
        ),
    ] = None
    image_pull_policy: Annotated[
        Optional[str],
        Field(
            alias="imagePullPolicy",
            description="Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
        ),
    ] = None
    lifecycle: Annotated[
        Optional[Lifecycle],
        Field(description="Lifecycle is not allowed for ephemeral containers."),
    ] = None
    liveness_probe: Annotated[
        Optional[Probe],
        Field(
            alias="livenessProbe",
            description="Probes are not allowed for ephemeral containers.",
        ),
    ] = None
    name: Annotated[
        str,
        Field(
            description="Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers."
        ),
    ]
    ports: Annotated[
        Optional[List[ContainerPort]],
        Field(description="Ports are not allowed for ephemeral containers."),
    ] = None
    readiness_probe: Annotated[
        Optional[Probe],
        Field(
            alias="readinessProbe",
            description="Probes are not allowed for ephemeral containers.",
        ),
    ] = None
    resize_policy: Annotated[
        Optional[List[ContainerResizePolicy]],
        Field(
            alias="resizePolicy",
            description="Resources resize policy for the container.",
        ),
    ] = None
    resources: Annotated[
        Optional[ResourceRequirements],
        Field(
            description="Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod."
        ),
    ] = None
    restart_policy: Annotated[
        Optional[str],
        Field(
            alias="restartPolicy",
            description="Restart policy for the container to manage the restart behavior of each container within a pod. This may only be set for init containers. You cannot set this field on ephemeral containers.",
        ),
    ] = None
    security_context: Annotated[
        Optional[SecurityContext],
        Field(
            alias="securityContext",
            description="Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.",
        ),
    ] = None
    startup_probe: Annotated[
        Optional[Probe],
        Field(
            alias="startupProbe",
            description="Probes are not allowed for ephemeral containers.",
        ),
    ] = None
    stdin: Annotated[
        Optional[bool],
        Field(
            description="Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
        ),
    ] = None
    stdin_once: Annotated[
        Optional[bool],
        Field(
            alias="stdinOnce",
            description="Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
        ),
    ] = None
    target_container_name: Annotated[
        Optional[str],
        Field(
            alias="targetContainerName",
            description="If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.\n\nThe container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.",
        ),
    ] = None
    termination_message_path: Annotated[
        Optional[str],
        Field(
            alias="terminationMessagePath",
            description="Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
        ),
    ] = None
    termination_message_policy: Annotated[
        Optional[str],
        Field(
            alias="terminationMessagePolicy",
            description="Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
        ),
    ] = None
    tty: Annotated[
        Optional[bool],
        Field(
            description="Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
        ),
    ] = None
    volume_devices: Annotated[
        Optional[List[VolumeDevice]],
        Field(
            alias="volumeDevices",
            description="volumeDevices is the list of block devices to be used by the container.",
        ),
    ] = None
    volume_mounts: Annotated[
        Optional[List[VolumeMount]],
        Field(
            alias="volumeMounts",
            description="Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.",
        ),
    ] = None
    working_dir: Annotated[
        Optional[str],
        Field(
            alias="workingDir",
            description="Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
        ),
    ] = None


class ProjectedVolumeSource(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ProjectedVolumeSource":
            return ProjectedVolumeSource(**self._attrs)

        def default_mode(self, value: Optional[int]) -> Self:
            return self._set("default_mode", value)

        def sources(
            self,
            value_or_callback: Union[
                Optional[List[VolumeProjection]],
                Callable[[Type[VolumeProjection]], List[VolumeProjection]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(VolumeProjection)
            return self._set("sources", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    default_mode: Annotated[
        Optional[int],
        Field(
            alias="defaultMode",
            description="defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
        ),
    ] = None
    sources: Annotated[
        Optional[List[VolumeProjection]],
        Field(
            description="sources is the list of volume projections. Each entry in this list handles one source."
        ),
    ] = None


class Volume(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "Volume":
            return Volume(**self._attrs)

        def aws_elastic_block_store(
            self,
            value_or_callback: Union[
                Optional[AWSElasticBlockStoreVolumeSource],
                Callable[
                    [Type[AWSElasticBlockStoreVolumeSource]],
                    AWSElasticBlockStoreVolumeSource,
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(AWSElasticBlockStoreVolumeSource)
            return self._set("aws_elastic_block_store", value)

        def azure_disk(
            self,
            value_or_callback: Union[
                Optional[AzureDiskVolumeSource],
                Callable[[Type[AzureDiskVolumeSource]], AzureDiskVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(AzureDiskVolumeSource)
            return self._set("azure_disk", value)

        def azure_file(
            self,
            value_or_callback: Union[
                Optional[AzureFileVolumeSource],
                Callable[[Type[AzureFileVolumeSource]], AzureFileVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(AzureFileVolumeSource)
            return self._set("azure_file", value)

        def cephfs(
            self,
            value_or_callback: Union[
                Optional[CephFSVolumeSource],
                Callable[[Type[CephFSVolumeSource]], CephFSVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(CephFSVolumeSource)
            return self._set("cephfs", value)

        def cinder(
            self,
            value_or_callback: Union[
                Optional[CinderVolumeSource],
                Callable[[Type[CinderVolumeSource]], CinderVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(CinderVolumeSource)
            return self._set("cinder", value)

        def config_map(
            self,
            value_or_callback: Union[
                Optional[ConfigMapVolumeSource],
                Callable[[Type[ConfigMapVolumeSource]], ConfigMapVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ConfigMapVolumeSource)
            return self._set("config_map", value)

        def csi(
            self,
            value_or_callback: Union[
                Optional[CSIVolumeSource],
                Callable[[Type[CSIVolumeSource]], CSIVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(CSIVolumeSource)
            return self._set("csi", value)

        def downward_api(
            self,
            value_or_callback: Union[
                Optional[DownwardAPIVolumeSource],
                Callable[[Type[DownwardAPIVolumeSource]], DownwardAPIVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(DownwardAPIVolumeSource)
            return self._set("downward_api", value)

        def empty_dir(
            self,
            value_or_callback: Union[
                Optional[EmptyDirVolumeSource],
                Callable[[Type[EmptyDirVolumeSource]], EmptyDirVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(EmptyDirVolumeSource)
            return self._set("empty_dir", value)

        def ephemeral(
            self,
            value_or_callback: Union[
                Optional[EphemeralVolumeSource],
                Callable[[Type[EphemeralVolumeSource]], EphemeralVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(EphemeralVolumeSource)
            return self._set("ephemeral", value)

        def fc(
            self,
            value_or_callback: Union[
                Optional[FCVolumeSource],
                Callable[[Type[FCVolumeSource]], FCVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(FCVolumeSource)
            return self._set("fc", value)

        def flex_volume(
            self,
            value_or_callback: Union[
                Optional[FlexVolumeSource],
                Callable[[Type[FlexVolumeSource]], FlexVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(FlexVolumeSource)
            return self._set("flex_volume", value)

        def flocker(
            self,
            value_or_callback: Union[
                Optional[FlockerVolumeSource],
                Callable[[Type[FlockerVolumeSource]], FlockerVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(FlockerVolumeSource)
            return self._set("flocker", value)

        def gce_persistent_disk(
            self,
            value_or_callback: Union[
                Optional[GCEPersistentDiskVolumeSource],
                Callable[[Type[GCEPersistentDiskVolumeSource]], GCEPersistentDiskVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(GCEPersistentDiskVolumeSource)
            return self._set("gce_persistent_disk", value)

        def git_repo(
            self,
            value_or_callback: Union[
                Optional[GitRepoVolumeSource],
                Callable[[Type[GitRepoVolumeSource]], GitRepoVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(GitRepoVolumeSource)
            return self._set("git_repo", value)

        def glusterfs(
            self,
            value_or_callback: Union[
                Optional[GlusterfsVolumeSource],
                Callable[[Type[GlusterfsVolumeSource]], GlusterfsVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(GlusterfsVolumeSource)
            return self._set("glusterfs", value)

        def host_path(
            self,
            value_or_callback: Union[
                Optional[HostPathVolumeSource],
                Callable[[Type[HostPathVolumeSource]], HostPathVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(HostPathVolumeSource)
            return self._set("host_path", value)

        def image(
            self,
            value_or_callback: Union[
                Optional[ImageVolumeSource],
                Callable[[Type[ImageVolumeSource]], ImageVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ImageVolumeSource)
            return self._set("image", value)

        def iscsi(
            self,
            value_or_callback: Union[
                Optional[ISCSIVolumeSource],
                Callable[[Type[ISCSIVolumeSource]], ISCSIVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ISCSIVolumeSource)
            return self._set("iscsi", value)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def nfs(
            self,
            value_or_callback: Union[
                Optional[NFSVolumeSource],
                Callable[[Type[NFSVolumeSource]], NFSVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(NFSVolumeSource)
            return self._set("nfs", value)

        def persistent_volume_claim(
            self,
            value_or_callback: Union[
                Optional[PersistentVolumeClaimVolumeSource],
                Callable[
                    [Type[PersistentVolumeClaimVolumeSource]],
                    PersistentVolumeClaimVolumeSource,
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PersistentVolumeClaimVolumeSource)
            return self._set("persistent_volume_claim", value)

        def photon_persistent_disk(
            self,
            value_or_callback: Union[
                Optional[PhotonPersistentDiskVolumeSource],
                Callable[
                    [Type[PhotonPersistentDiskVolumeSource]],
                    PhotonPersistentDiskVolumeSource,
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PhotonPersistentDiskVolumeSource)
            return self._set("photon_persistent_disk", value)

        def portworx_volume(
            self,
            value_or_callback: Union[
                Optional[PortworxVolumeSource],
                Callable[[Type[PortworxVolumeSource]], PortworxVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PortworxVolumeSource)
            return self._set("portworx_volume", value)

        def projected(
            self,
            value_or_callback: Union[
                Optional[ProjectedVolumeSource],
                Callable[[Type[ProjectedVolumeSource]], ProjectedVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ProjectedVolumeSource)
            return self._set("projected", value)

        def quobyte(
            self,
            value_or_callback: Union[
                Optional[QuobyteVolumeSource],
                Callable[[Type[QuobyteVolumeSource]], QuobyteVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(QuobyteVolumeSource)
            return self._set("quobyte", value)

        def rbd(
            self,
            value_or_callback: Union[
                Optional[RBDVolumeSource],
                Callable[[Type[RBDVolumeSource]], RBDVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(RBDVolumeSource)
            return self._set("rbd", value)

        def scale_io(
            self,
            value_or_callback: Union[
                Optional[ScaleIOVolumeSource],
                Callable[[Type[ScaleIOVolumeSource]], ScaleIOVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ScaleIOVolumeSource)
            return self._set("scale_io", value)

        def secret(
            self,
            value_or_callback: Union[
                Optional[SecretVolumeSource],
                Callable[[Type[SecretVolumeSource]], SecretVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SecretVolumeSource)
            return self._set("secret", value)

        def storageos(
            self,
            value_or_callback: Union[
                Optional[StorageOSVolumeSource],
                Callable[[Type[StorageOSVolumeSource]], StorageOSVolumeSource],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(StorageOSVolumeSource)
            return self._set("storageos", value)

        def vsphere_volume(
            self,
            value_or_callback: Union[
                Optional[VsphereVirtualDiskVolumeSource],
                Callable[
                    [Type[VsphereVirtualDiskVolumeSource]],
                    VsphereVirtualDiskVolumeSource,
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(VsphereVirtualDiskVolumeSource)
            return self._set("vsphere_volume", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    aws_elastic_block_store: Annotated[
        Optional[AWSElasticBlockStoreVolumeSource],
        Field(
            alias="awsElasticBlockStore",
            description="awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
        ),
    ] = None
    azure_disk: Annotated[
        Optional[AzureDiskVolumeSource],
        Field(
            alias="azureDisk",
            description="azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
        ),
    ] = None
    azure_file: Annotated[
        Optional[AzureFileVolumeSource],
        Field(
            alias="azureFile",
            description="azureFile represents an Azure File Service mount on the host and bind mount to the pod.",
        ),
    ] = None
    cephfs: Annotated[
        Optional[CephFSVolumeSource],
        Field(
            description="cephFS represents a Ceph FS mount on the host that shares a pod's lifetime"
        ),
    ] = None
    cinder: Annotated[
        Optional[CinderVolumeSource],
        Field(
            description="cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
        ),
    ] = None
    config_map: Annotated[
        Optional[ConfigMapVolumeSource],
        Field(
            alias="configMap",
            description="configMap represents a configMap that should populate this volume",
        ),
    ] = None
    csi: Annotated[
        Optional[CSIVolumeSource],
        Field(
            description="csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature)."
        ),
    ] = None
    downward_api: Annotated[
        Optional[DownwardAPIVolumeSource],
        Field(
            alias="downwardAPI",
            description="downwardAPI represents downward API about the pod that should populate this volume",
        ),
    ] = None
    empty_dir: Annotated[
        Optional[EmptyDirVolumeSource],
        Field(
            alias="emptyDir",
            description="emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
        ),
    ] = None
    ephemeral: Annotated[
        Optional[EphemeralVolumeSource],
        Field(
            description="ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.\n\nUse this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.\n\nA pod can use both types of ephemeral volumes and persistent volumes at the same time."
        ),
    ] = None
    fc: Annotated[
        Optional[FCVolumeSource],
        Field(
            description="fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod."
        ),
    ] = None
    flex_volume: Annotated[
        Optional[FlexVolumeSource],
        Field(
            alias="flexVolume",
            description="flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
        ),
    ] = None
    flocker: Annotated[
        Optional[FlockerVolumeSource],
        Field(
            description="flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running"
        ),
    ] = None
    gce_persistent_disk: Annotated[
        Optional[GCEPersistentDiskVolumeSource],
        Field(
            alias="gcePersistentDisk",
            description="gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
        ),
    ] = None
    git_repo: Annotated[
        Optional[GitRepoVolumeSource],
        Field(
            alias="gitRepo",
            description="gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
        ),
    ] = None
    glusterfs: Annotated[
        Optional[GlusterfsVolumeSource],
        Field(
            description="glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md"
        ),
    ] = None
    host_path: Annotated[
        Optional[HostPathVolumeSource],
        Field(
            alias="hostPath",
            description="hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
        ),
    ] = None
    image: Annotated[
        Optional[ImageVolumeSource],
        Field(
            description="image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine. The volume is resolved at pod startup depending on which PullPolicy value is provided:\n\n- Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails. - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present. - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.\n\nThe volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation. A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message. The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field. The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images. The volume will be mounted read-only (ro) and non-executable files (noexec). Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath). The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type."
        ),
    ] = None
    iscsi: Annotated[
        Optional[ISCSIVolumeSource],
        Field(
            description="iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md"
        ),
    ] = None
    name: Annotated[
        str,
        Field(
            description="name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        ),
    ]
    nfs: Annotated[
        Optional[NFSVolumeSource],
        Field(
            description="nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
        ),
    ] = None
    persistent_volume_claim: Annotated[
        Optional[PersistentVolumeClaimVolumeSource],
        Field(
            alias="persistentVolumeClaim",
            description="persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
        ),
    ] = None
    photon_persistent_disk: Annotated[
        Optional[PhotonPersistentDiskVolumeSource],
        Field(
            alias="photonPersistentDisk",
            description="photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
        ),
    ] = None
    portworx_volume: Annotated[
        Optional[PortworxVolumeSource],
        Field(
            alias="portworxVolume",
            description="portworxVolume represents a portworx volume attached and mounted on kubelets host machine",
        ),
    ] = None
    projected: Annotated[
        Optional[ProjectedVolumeSource],
        Field(
            description="projected items for all in one resources secrets, configmaps, and downward API"
        ),
    ] = None
    quobyte: Annotated[
        Optional[QuobyteVolumeSource],
        Field(
            description="quobyte represents a Quobyte mount on the host that shares a pod's lifetime"
        ),
    ] = None
    rbd: Annotated[
        Optional[RBDVolumeSource],
        Field(
            description="rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md"
        ),
    ] = None
    scale_io: Annotated[
        Optional[ScaleIOVolumeSource],
        Field(
            alias="scaleIO",
            description="scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
        ),
    ] = None
    secret: Annotated[
        Optional[SecretVolumeSource],
        Field(
            description="secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
        ),
    ] = None
    storageos: Annotated[
        Optional[StorageOSVolumeSource],
        Field(
            description="storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes."
        ),
    ] = None
    vsphere_volume: Annotated[
        Optional[VsphereVirtualDiskVolumeSource],
        Field(
            alias="vsphereVolume",
            description="vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
        ),
    ] = None


class PodSpec(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PodSpec":
            return PodSpec(**self._attrs)

        def active_deadline_seconds(self, value: Optional[int]) -> Self:
            return self._set("active_deadline_seconds", value)

        def affinity(
            self,
            value_or_callback: Union[Optional[Affinity], Callable[[Type[Affinity]], Affinity]],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Affinity)
            return self._set("affinity", value)

        def automount_service_account_token(self, value: Optional[bool]) -> Self:
            return self._set("automount_service_account_token", value)

        def containers(
            self,
            value_or_callback: Union[List[Container], Callable[[Type[Container]], List[Container]]],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Container)
            return self._set("containers", value)

        def dns_config(
            self,
            value_or_callback: Union[
                Optional[PodDNSConfig], Callable[[Type[PodDNSConfig]], PodDNSConfig]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodDNSConfig)
            return self._set("dns_config", value)

        def dns_policy(self, value: Optional[str]) -> Self:
            return self._set("dns_policy", value)

        def enable_service_links(self, value: Optional[bool]) -> Self:
            return self._set("enable_service_links", value)

        def ephemeral_containers(
            self,
            value_or_callback: Union[
                Optional[List[EphemeralContainer]],
                Callable[[Type[EphemeralContainer]], List[EphemeralContainer]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(EphemeralContainer)
            return self._set("ephemeral_containers", value)

        def host_aliases(
            self,
            value_or_callback: Union[
                Optional[List[HostAlias]], Callable[[Type[HostAlias]], List[HostAlias]]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(HostAlias)
            return self._set("host_aliases", value)

        def host_ipc(self, value: Optional[bool]) -> Self:
            return self._set("host_ipc", value)

        def host_network(self, value: Optional[bool]) -> Self:
            return self._set("host_network", value)

        def host_pid(self, value: Optional[bool]) -> Self:
            return self._set("host_pid", value)

        def host_users(self, value: Optional[bool]) -> Self:
            return self._set("host_users", value)

        def hostname(self, value: Optional[str]) -> Self:
            return self._set("hostname", value)

        def image_pull_secrets(
            self,
            value_or_callback: Union[
                Optional[List[LocalObjectReference]],
                Callable[[Type[LocalObjectReference]], List[LocalObjectReference]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(LocalObjectReference)
            return self._set("image_pull_secrets", value)

        def init_containers(
            self,
            value_or_callback: Union[
                Optional[List[Container]], Callable[[Type[Container]], List[Container]]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Container)
            return self._set("init_containers", value)

        def node_name(self, value: Optional[str]) -> Self:
            return self._set("node_name", value)

        def node_selector(self, value: Optional[Dict[str, str]]) -> Self:
            return self._set("node_selector", value)

        def os(
            self,
            value_or_callback: Union[Optional[PodOS], Callable[[Type[PodOS]], PodOS]],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodOS)
            return self._set("os", value)

        def overhead(self, value: Optional[Dict[str, apimachinery.Quantity]]) -> Self:
            return self._set("overhead", value)

        def preemption_policy(self, value: Optional[str]) -> Self:
            return self._set("preemption_policy", value)

        def priority(self, value: Optional[int]) -> Self:
            return self._set("priority", value)

        def priority_class_name(self, value: Optional[str]) -> Self:
            return self._set("priority_class_name", value)

        def readiness_gates(
            self,
            value_or_callback: Union[
                Optional[List[PodReadinessGate]],
                Callable[[Type[PodReadinessGate]], List[PodReadinessGate]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodReadinessGate)
            return self._set("readiness_gates", value)

        def resource_claims(
            self,
            value_or_callback: Union[
                Optional[List[PodResourceClaim]],
                Callable[[Type[PodResourceClaim]], List[PodResourceClaim]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodResourceClaim)
            return self._set("resource_claims", value)

        def restart_policy(self, value: Optional[str]) -> Self:
            return self._set("restart_policy", value)

        def runtime_class_name(self, value: Optional[str]) -> Self:
            return self._set("runtime_class_name", value)

        def scheduler_name(self, value: Optional[str]) -> Self:
            return self._set("scheduler_name", value)

        def scheduling_gates(
            self,
            value_or_callback: Union[
                Optional[List[PodSchedulingGate]],
                Callable[[Type[PodSchedulingGate]], List[PodSchedulingGate]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodSchedulingGate)
            return self._set("scheduling_gates", value)

        def security_context(
            self,
            value_or_callback: Union[
                Optional[PodSecurityContext],
                Callable[[Type[PodSecurityContext]], PodSecurityContext],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodSecurityContext)
            return self._set("security_context", value)

        def service_account(self, value: Optional[str]) -> Self:
            return self._set("service_account", value)

        def service_account_name(self, value: Optional[str]) -> Self:
            return self._set("service_account_name", value)

        def set_hostname_as_fqdn(self, value: Optional[bool]) -> Self:
            return self._set("set_hostname_as_fqdn", value)

        def share_process_namespace(self, value: Optional[bool]) -> Self:
            return self._set("share_process_namespace", value)

        def subdomain(self, value: Optional[str]) -> Self:
            return self._set("subdomain", value)

        def termination_grace_period_seconds(self, value: Optional[int]) -> Self:
            return self._set("termination_grace_period_seconds", value)

        def tolerations(
            self,
            value_or_callback: Union[
                Optional[List[Toleration]],
                Callable[[Type[Toleration]], List[Toleration]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Toleration)
            return self._set("tolerations", value)

        def topology_spread_constraints(
            self,
            value_or_callback: Union[
                Optional[List[TopologySpreadConstraint]],
                Callable[[Type[TopologySpreadConstraint]], List[TopologySpreadConstraint]],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(TopologySpreadConstraint)
            return self._set("topology_spread_constraints", value)

        def volumes(
            self,
            value_or_callback: Union[
                Optional[List[Volume]], Callable[[Type[Volume]], List[Volume]]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(Volume)
            return self._set("volumes", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    active_deadline_seconds: Annotated[
        Optional[int],
        Field(
            alias="activeDeadlineSeconds",
            description="Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
        ),
    ] = None
    affinity: Annotated[
        Optional[Affinity],
        Field(description="If specified, the pod's scheduling constraints"),
    ] = None
    automount_service_account_token: Annotated[
        Optional[bool],
        Field(
            alias="automountServiceAccountToken",
            description="AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.",
        ),
    ] = None
    containers: Annotated[
        List[Container],
        Field(
            description="List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated."
        ),
    ]
    dns_config: Annotated[
        Optional[PodDNSConfig],
        Field(
            alias="dnsConfig",
            description="Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
        ),
    ] = None
    dns_policy: Annotated[
        Optional[str],
        Field(
            alias="dnsPolicy",
            description="Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
        ),
    ] = None
    enable_service_links: Annotated[
        Optional[bool],
        Field(
            alias="enableServiceLinks",
            description="EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.",
        ),
    ] = None
    ephemeral_containers: Annotated[
        Optional[List[EphemeralContainer]],
        Field(
            alias="ephemeralContainers",
            description="List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.",
        ),
    ] = None
    host_aliases: Annotated[
        Optional[List[HostAlias]],
        Field(
            alias="hostAliases",
            description="HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified.",
        ),
    ] = None
    host_ipc: Annotated[
        Optional[bool],
        Field(
            alias="hostIPC",
            description="Use the host's ipc namespace. Optional: Default to false.",
        ),
    ] = None
    host_network: Annotated[
        Optional[bool],
        Field(
            alias="hostNetwork",
            description="Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
        ),
    ] = None
    host_pid: Annotated[
        Optional[bool],
        Field(
            alias="hostPID",
            description="Use the host's pid namespace. Optional: Default to false.",
        ),
    ] = None
    host_users: Annotated[
        Optional[bool],
        Field(
            alias="hostUsers",
            description="Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.",
        ),
    ] = None
    hostname: Annotated[
        Optional[str],
        Field(
            description="Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value."
        ),
    ] = None
    image_pull_secrets: Annotated[
        Optional[List[LocalObjectReference]],
        Field(
            alias="imagePullSecrets",
            description="ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
        ),
    ] = None
    init_containers: Annotated[
        Optional[List[Container]],
        Field(
            alias="initContainers",
            description="List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
        ),
    ] = None
    node_name: Annotated[
        Optional[str],
        Field(
            alias="nodeName",
            description="NodeName indicates in which node this pod is scheduled. If empty, this pod is a candidate for scheduling by the scheduler defined in schedulerName. Once this field is set, the kubelet for this node becomes responsible for the lifecycle of this pod. This field should not be used to express a desire for the pod to be scheduled on a specific node. https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename",
        ),
    ] = None
    node_selector: Annotated[
        Optional[Dict[str, str]],
        Field(
            alias="nodeSelector",
            description="NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
        ),
    ] = None
    os: Annotated[
        Optional[PodOS],
        Field(
            description="Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.\n\nIf the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions\n\nIf the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.appArmorProfile - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.securityContext.supplementalGroupsPolicy - spec.containers[*].securityContext.appArmorProfile - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup"
        ),
    ] = None
    overhead: Annotated[
        Optional[Dict[str, apimachinery.Quantity]],
        Field(
            description="Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md"
        ),
    ] = None
    preemption_policy: Annotated[
        Optional[str],
        Field(
            alias="preemptionPolicy",
            description="PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.",
        ),
    ] = None
    priority: Annotated[
        Optional[int],
        Field(
            description="The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority."
        ),
    ] = None
    priority_class_name: Annotated[
        Optional[str],
        Field(
            alias="priorityClassName",
            description='If specified, indicates the pod\'s priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.',
        ),
    ] = None
    readiness_gates: Annotated[
        Optional[List[PodReadinessGate]],
        Field(
            alias="readinessGates",
            description='If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates',
        ),
    ] = None
    resource_claims: Annotated[
        Optional[List[PodResourceClaim]],
        Field(
            alias="resourceClaims",
            description="ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable.",
        ),
    ] = None
    restart_policy: Annotated[
        Optional[str],
        Field(
            alias="restartPolicy",
            description="Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
        ),
    ] = None
    runtime_class_name: Annotated[
        Optional[str],
        Field(
            alias="runtimeClassName",
            description='RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class',
        ),
    ] = None
    scheduler_name: Annotated[
        Optional[str],
        Field(
            alias="schedulerName",
            description="If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
        ),
    ] = None
    scheduling_gates: Annotated[
        Optional[List[PodSchedulingGate]],
        Field(
            alias="schedulingGates",
            description="SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.\n\nSchedulingGates can only be set at pod creation time, and be removed only afterwards.",
        ),
    ] = None
    security_context: Annotated[
        Optional[PodSecurityContext],
        Field(
            alias="securityContext",
            description="SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
        ),
    ] = None
    service_account: Annotated[
        Optional[str],
        Field(
            alias="serviceAccount",
            description="DeprecatedServiceAccount is a deprecated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.",
        ),
    ] = None
    service_account_name: Annotated[
        Optional[str],
        Field(
            alias="serviceAccountName",
            description="ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
        ),
    ] = None
    set_hostname_as_fqdn: Annotated[
        Optional[bool],
        Field(
            alias="setHostnameAsFQDN",
            description="If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.",
        ),
    ] = None
    share_process_namespace: Annotated[
        Optional[bool],
        Field(
            alias="shareProcessNamespace",
            description="Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.",
        ),
    ] = None
    subdomain: Annotated[
        Optional[str],
        Field(
            description='If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.'
        ),
    ] = None
    termination_grace_period_seconds: Annotated[
        Optional[int],
        Field(
            alias="terminationGracePeriodSeconds",
            description="Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
        ),
    ] = None
    tolerations: Annotated[
        Optional[List[Toleration]],
        Field(description="If specified, the pod's tolerations."),
    ] = None
    topology_spread_constraints: Annotated[
        Optional[List[TopologySpreadConstraint]],
        Field(
            alias="topologySpreadConstraints",
            description="TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.",
        ),
    ] = None
    volumes: Annotated[
        Optional[List[Volume]],
        Field(
            description="List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes"
        ),
    ] = None


class PodTemplateSpec(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "PodTemplateSpec":
            return PodTemplateSpec(**self._attrs)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[Optional[PodSpec], Callable[[Type[PodSpec]], PodSpec]],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodSpec)
            return self._set("spec", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    spec: Annotated[
        Optional[PodSpec],
        Field(
            description="Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None


class ReplicationControllerSpec(BaseModel):
    class Builder(BaseBuilder):
        def build(self) -> "ReplicationControllerSpec":
            return ReplicationControllerSpec(**self._attrs)

        def min_ready_seconds(self, value: Optional[int]) -> Self:
            return self._set("min_ready_seconds", value)

        def replicas(self, value: Optional[int]) -> Self:
            return self._set("replicas", value)

        def selector(self, value: Optional[Dict[str, str]]) -> Self:
            return self._set("selector", value)

        def template(
            self,
            value_or_callback: Union[
                Optional[PodTemplateSpec],
                Callable[[Type[PodTemplateSpec]], PodTemplateSpec],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodTemplateSpec)
            return self._set("template", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    min_ready_seconds: Annotated[
        Optional[int],
        Field(
            alias="minReadySeconds",
            description="Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
        ),
    ] = None
    replicas: Annotated[
        Optional[int],
        Field(
            description="Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller"
        ),
    ] = None
    selector: Annotated[
        Optional[Dict[str, str]],
        Field(
            description="Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors"
        ),
    ] = None
    template: Annotated[
        Optional[PodTemplateSpec],
        Field(
            description='Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. The only allowed template.spec.restartPolicy value is "Always". More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template'
        ),
    ] = None


class Pod(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "Pod":
            return Pod(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["Pod"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[Optional[PodSpec], Callable[[Type[PodSpec]], PodSpec]],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodSpec)
            return self._set("spec", value)

        def status(
            self,
            value_or_callback: Union[Optional[PodStatus], Callable[[Type[PodStatus]], PodStatus]],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodStatus)
            return self._set("status", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "v1"
    kind: Annotated[
        Optional[Literal["Pod"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "Pod"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    spec: Annotated[
        Optional[PodSpec],
        Field(
            description="Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None
    status: Annotated[
        Optional[PodStatus],
        Field(
            description="Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None


PodList = ResourceList["Pod"]


class PodTemplate(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "PodTemplate":
            return PodTemplate(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["PodTemplate"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def template(
            self,
            value_or_callback: Union[
                Optional[PodTemplateSpec],
                Callable[[Type[PodTemplateSpec]], PodTemplateSpec],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(PodTemplateSpec)
            return self._set("template", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "v1"
    kind: Annotated[
        Optional[Literal["PodTemplate"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "PodTemplate"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    template: Annotated[
        Optional[PodTemplateSpec],
        Field(
            description="Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None


PodTemplateList = ResourceList["PodTemplate"]


class ReplicationController(Resource):
    class Builder(BaseBuilder):
        def build(self) -> "ReplicationController":
            return ReplicationController(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]]) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["ReplicationController"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[Type[apimachinery.ObjectMeta]], apimachinery.ObjectMeta],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta)
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[
                Optional[ReplicationControllerSpec],
                Callable[[Type[ReplicationControllerSpec]], ReplicationControllerSpec],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ReplicationControllerSpec)
            return self._set("spec", value)

        def status(
            self,
            value_or_callback: Union[
                Optional[ReplicationControllerStatus],
                Callable[[Type[ReplicationControllerStatus]], ReplicationControllerStatus],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ReplicationControllerStatus)
            return self._set("status", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def list_builder(cls) -> ListBuilder[Self]:
        return ListBuilder[cls]()  # type: ignore[valid-type]

    api_version: Annotated[
        Optional[Literal["v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "v1"
    kind: Annotated[
        Optional[Literal["ReplicationController"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "ReplicationController"
    metadata: Annotated[
        Optional[apimachinery.ObjectMeta],
        Field(
            description="If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        ),
    ] = None
    spec: Annotated[
        Optional[ReplicationControllerSpec],
        Field(
            description="Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None
    status: Annotated[
        Optional[ReplicationControllerStatus],
        Field(
            description="Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        ),
    ] = None


ReplicationControllerList = ResourceList["ReplicationController"]
