[build-system]
build-backend = 'hatchling.build'
requires = [ "hatch-fancy-pypi-readme", "hatchling" ]

[project]
name = "splitme"
version = "0.1.11"
description = "âŒ– Markdown tools for modular docs."
dynamic = ["readme"]
keywords = [
    "ai",
    "devtools",
    "docs",
    "documentation",
    "documentation-tool",
    "markdown",
    "markdown-parser",
    "markdown-split",
    "mkdocs",
    "python",
    "readme",
    "reflinks",
    "reference-links",
]
license = "MIT"
authors = [ { name = "Eli Salamie", email = "egsalamie@gmail.com" } ]
requires-python = ">=3.9, <=3.14"
classifiers = [
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
    "Framework :: Pytest",
    "Framework :: Pydantic",
]
dependencies = [
    "mistletoe>=1.4.0",
    "pydantic>=2.10.3",
    "pydantic-settings>=2.6.1",
    "pyyaml>=6.0.2",
    "requests>=2.32.3",
    "rich>=13.9.4",
    "toml>=0.10.2 ; python_full_version < '3.11'",
]

optional-dependencies.ai = [
    "pydantic-ai>=0.0.15",
]
optional-dependencies.docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.47",
]
urls.Homepage = 'https://github.com/eli64s/splitme'
scripts.splitme = "splitme.__main__:main"

[dependency-groups]
dev = [
    "commonmark>=0.9.1",
    "hatch>=1.13",
    "ipykernel>=6.29.5",
    "keybert>=0.8.5",
    "markdown-it-py>=3.0.0",
    "mdit-py-plugins>=0.4.2",
]
test = [
    "coverage[toml]>=7.6.9",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25",
    "pytest-cov>=6",
    "pytest-mock>=3.14.0",
    "pytest-pretty>=1.2",
    "pytest-randomly>=3.16",
    "pytest-sugar>=1",
    "pytest-xdist>=3.6.1",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.47",
]
lint = [
    "mypy>=1.14",
    "pyright>=1.1.391",
    "ruff>=0.8.4",
    "types-aiofiles>=24.1.0.20241221",
    "types-pyyaml>=6.0.12.20240917",
    "types-requests>=2.32.0.20241016",
]

[tool.hatch.build]
include = [
  "src/*"
]

[tool.hatch.build.targets.wheel]
packages = [ "src/splitme" ]

[tool.hatch.build.targets.sdist]
include = [
  "Makefile",
  "/*.toml",
  "/*.json",
  "/*.lock",
  "/*.md",
  "docs/*",
  "src/*",
  "tests/*",
]

[tool.hatch.version]
path = 'src/splitme/__init__.py'

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = 'text/markdown'
substitutions = [
    { pattern = '(\s+)#(\d+)', replacement = '\1[#\2](https://github.com/eli64s/splitme/issues/\2)' },
    { pattern = '(\s+)@([\w\-]+)', replacement = '\1[@\2](https://github.com/\2)' },
    # replace relative links with absolute links
    { pattern = '\[(.+?)\]\(((?!https?://)\S+?)\)', replacement = '[\1](https://github.com/eli64s/splitme/tree/main/\g<2>)'},
]

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"# replace relative links with absolute links

[tool.pytest.ini_options]
addopts = [
    "-vv",
    "-rfEsxX",
    "--tb=short",
    "--durations=3",
    "--cov=splitme",
    "--cov-branch",
    "--cov-fail-under=0",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=json:tests/.reports/coverage.json",
    "--asyncio-mode=auto",
    "--numprocesses=auto",
]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def repr",
    "raise NotImplementedError",
    "if name == .__main__.:",
    "if TYPE_CHECKING:",
    "pass",
    "\\.\\.\\.",
]
precision = 2
show_missing = true
skip_empty = true
sort = "cover"

[tool.coverage.run]
data_file = "tests/.reports/.coverage"
omit = [
    "docs/*",
    "examples/*",
    "tests/*",
    "**/__init__.py",
    "noxfile.py",
]
source = ["splitme"]

[tool.coverage.json]
output = "tests/.reports/coverage.json"
pretty_print = true

[tool.pyright]
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportUnnecessaryIsInstance = false
reportUnnecessaryTypeIgnoreComment = true
include = [ "splitme", "tests" ]
venvPath = ".venv"
executionEnvironments = [
    { root = "tests", reportUnusedFunction = false },
]
